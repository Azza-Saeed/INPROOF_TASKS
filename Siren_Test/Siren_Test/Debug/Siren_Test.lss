
Siren_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006d0  00000764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000764  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c20  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043f  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000583  00000000  00000000  00002017  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069c  00000000  00000000  00002cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_10>
  2c:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 02 	call	0x596	; 0x596 <main>
  8a:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Alarm_voidInit>:
#include "Alarm_Driver.h"


void Alarm_voidInit(Alarm_Parameters_t Alarm_Obj)
{
	dio_vidConfigChannel(Alarm_Obj.u8port, Alarm_Obj.u8pin,OUTPUT);
  92:	69 2f       	mov	r22, r25
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	0e 94 7c 00 	call	0xf8	; 0xf8 <dio_vidConfigChannel>
}
  9a:	08 95       	ret

0000009c <Alarm_voidOn>:

void Alarm_voidOn(Alarm_Parameters_t Alarm_Obj)
{
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	08 2f       	mov	r16, r24
  a6:	19 2f       	mov	r17, r25
  a8:	c4 ef       	ldi	r28, 0xF4	; 244
  aa:	d1 e0       	ldi	r29, 0x01	; 1
		for(int i=0;i<MAXIMUM_TIME;i++)
		{
			dio_vidWriteChannel(Alarm_Obj.u8port, Alarm_Obj.u8pin,STD_HIGH);
  ac:	80 2f       	mov	r24, r16
  ae:	61 2f       	mov	r22, r17
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	0e 94 1d 01 	call	0x23a	; 0x23a <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f ec       	ldi	r24, 0xCF	; 207
  b8:	97 e0       	ldi	r25, 0x07	; 7
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <Alarm_voidOn+0x1e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <Alarm_voidOn+0x24>
  c0:	00 00       	nop
			_delay_ms(ALARM_TONE);
			dio_vidWriteChannel(Alarm_Obj.u8port, Alarm_Obj.u8pin,STD_LOW);
  c2:	80 2f       	mov	r24, r16
  c4:	61 2f       	mov	r22, r17
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	0e 94 1d 01 	call	0x23a	; 0x23a <dio_vidWriteChannel>
  cc:	af ec       	ldi	r26, 0xCF	; 207
  ce:	b7 e0       	ldi	r27, 0x07	; 7
  d0:	11 97       	sbiw	r26, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Alarm_voidOn+0x34>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <Alarm_voidOn+0x3a>
  d6:	00 00       	nop
  d8:	21 97       	sbiw	r28, 0x01	; 1
	dio_vidConfigChannel(Alarm_Obj.u8port, Alarm_Obj.u8pin,OUTPUT);
}

void Alarm_voidOn(Alarm_Parameters_t Alarm_Obj)
{
		for(int i=0;i<MAXIMUM_TIME;i++)
  da:	41 f7       	brne	.-48     	; 0xac <Alarm_voidOn+0x10>
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	99 e6       	ldi	r25, 0x69	; 105
  e0:	a8 e1       	ldi	r26, 0x18	; 24
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	a0 40       	sbci	r26, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <Alarm_voidOn+0x46>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Alarm_voidOn+0x50>
  ec:	00 00       	nop
			dio_vidWriteChannel(Alarm_Obj.u8port, Alarm_Obj.u8pin,STD_LOW);
			_delay_ms(ALARM_TONE);
		//	dio_vidFlipChannel(Alarm_Obj.u8port, Alarm_Obj.u8pin);
		}
		_delay_ms(500);
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	31 f1       	breq	.+76     	; 0x148 <dio_vidConfigChannel+0x50>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	38 f0       	brcs	.+14     	; 0x10e <dio_vidConfigChannel+0x16>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	09 f4       	brne	.+2      	; 0x106 <dio_vidConfigChannel+0xe>
 104:	3e c0       	rjmp	.+124    	; 0x182 <dio_vidConfigChannel+0x8a>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	09 f0       	breq	.+2      	; 0x10c <dio_vidConfigChannel+0x14>
 10a:	74 c0       	rjmp	.+232    	; 0x1f4 <dio_vidConfigChannel+0xfc>
 10c:	57 c0       	rjmp	.+174    	; 0x1bc <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	69 f4       	brne	.+26     	; 0x12c <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 112:	2a b3       	in	r18, 0x1a	; 26
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	ac 01       	movw	r20, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <dio_vidConfigChannel+0x28>
 11c:	44 0f       	add	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <dio_vidConfigChannel+0x24>
 124:	ba 01       	movw	r22, r20
 126:	62 2b       	or	r22, r18
 128:	6a bb       	out	0x1a, r22	; 26
 12a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 12c:	2a b3       	in	r18, 0x1a	; 26
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <dio_vidConfigChannel+0x42>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <dio_vidConfigChannel+0x3e>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	6a bb       	out	0x1a, r22	; 26
 146:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	69 f4       	brne	.+26     	; 0x166 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 14c:	27 b3       	in	r18, 0x17	; 23
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ac 01       	movw	r20, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <dio_vidConfigChannel+0x62>
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <dio_vidConfigChannel+0x5e>
 15e:	ba 01       	movw	r22, r20
 160:	62 2b       	or	r22, r18
 162:	67 bb       	out	0x17, r22	; 23
 164:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	ac 01       	movw	r20, r24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <dio_vidConfigChannel+0x7c>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <dio_vidConfigChannel+0x78>
 178:	ba 01       	movw	r22, r20
 17a:	60 95       	com	r22
 17c:	62 23       	and	r22, r18
 17e:	67 bb       	out	0x17, r22	; 23
 180:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	69 f4       	brne	.+26     	; 0x1a0 <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <dio_vidConfigChannel+0x9c>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <dio_vidConfigChannel+0x98>
 198:	ba 01       	movw	r22, r20
 19a:	62 2b       	or	r22, r18
 19c:	64 bb       	out	0x14, r22	; 20
 19e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 1a0:	24 b3       	in	r18, 0x14	; 20
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	ac 01       	movw	r20, r24
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <dio_vidConfigChannel+0xb6>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <dio_vidConfigChannel+0xb2>
 1b2:	ba 01       	movw	r22, r20
 1b4:	60 95       	com	r22
 1b6:	62 23       	and	r22, r18
 1b8:	64 bb       	out	0x14, r22	; 20
 1ba:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	69 f4       	brne	.+26     	; 0x1da <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 1c0:	21 b3       	in	r18, 0x11	; 17
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ac 01       	movw	r20, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <dio_vidConfigChannel+0xd6>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <dio_vidConfigChannel+0xd2>
 1d2:	ba 01       	movw	r22, r20
 1d4:	62 2b       	or	r22, r18
 1d6:	61 bb       	out	0x11, r22	; 17
 1d8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 1da:	21 b3       	in	r18, 0x11	; 17
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	ac 01       	movw	r20, r24
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <dio_vidConfigChannel+0xf0>
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <dio_vidConfigChannel+0xec>
 1ec:	ba 01       	movw	r22, r20
 1ee:	60 95       	com	r22
 1f0:	62 23       	and	r22, r18
 1f2:	61 bb       	out	0x11, r22	; 17
 1f4:	08 95       	ret

000001f6 <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	49 f0       	breq	.+18     	; 0x20c <dio_vidConfigPort+0x16>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	28 f0       	brcs	.+10     	; 0x208 <dio_vidConfigPort+0x12>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	39 f0       	breq	.+14     	; 0x210 <dio_vidConfigPort+0x1a>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	41 f4       	brne	.+16     	; 0x216 <dio_vidConfigPort+0x20>
 206:	06 c0       	rjmp	.+12     	; 0x214 <dio_vidConfigPort+0x1e>
	{
		case DIO_PORTA: DIO_DDRA_REG = direction;	break;
 208:	6a bb       	out	0x1a, r22	; 26
 20a:	08 95       	ret
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 20c:	67 bb       	out	0x17, r22	; 23
 20e:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 210:	64 bb       	out	0x14, r22	; 20
 212:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 214:	61 bb       	out	0x11, r22	; 17
 216:	08 95       	ret

00000218 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	49 f0       	breq	.+18     	; 0x22e <dio_vidSetPortValue+0x16>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	28 f0       	brcs	.+10     	; 0x22a <dio_vidSetPortValue+0x12>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	39 f0       	breq	.+14     	; 0x232 <dio_vidSetPortValue+0x1a>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	41 f4       	brne	.+16     	; 0x238 <dio_vidSetPortValue+0x20>
 228:	06 c0       	rjmp	.+12     	; 0x236 <dio_vidSetPortValue+0x1e>
	{
		case DIO_PORTA: DIO_PORTA_REG = value;	break;
 22a:	6b bb       	out	0x1b, r22	; 27
 22c:	08 95       	ret
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 22e:	68 bb       	out	0x18, r22	; 24
 230:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 232:	65 bb       	out	0x15, r22	; 21
 234:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 236:	62 bb       	out	0x12, r22	; 18
 238:	08 95       	ret

0000023a <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	31 f1       	breq	.+76     	; 0x28a <dio_vidWriteChannel+0x50>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	38 f0       	brcs	.+14     	; 0x250 <dio_vidWriteChannel+0x16>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	09 f4       	brne	.+2      	; 0x248 <dio_vidWriteChannel+0xe>
 246:	3e c0       	rjmp	.+124    	; 0x2c4 <dio_vidWriteChannel+0x8a>
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	09 f0       	breq	.+2      	; 0x24e <dio_vidWriteChannel+0x14>
 24c:	74 c0       	rjmp	.+232    	; 0x336 <dio_vidWriteChannel+0xfc>
 24e:	57 c0       	rjmp	.+174    	; 0x2fe <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 250:	44 23       	and	r20, r20
 252:	71 f4       	brne	.+28     	; 0x270 <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 254:	2b b3       	in	r18, 0x1b	; 27
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <dio_vidWriteChannel+0x28>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <dio_vidWriteChannel+0x24>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	6b bb       	out	0x1b, r22	; 27
 26e:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 270:	2b b3       	in	r18, 0x1b	; 27
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <dio_vidWriteChannel+0x44>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <dio_vidWriteChannel+0x40>
 282:	ba 01       	movw	r22, r20
 284:	62 2b       	or	r22, r18
 286:	6b bb       	out	0x1b, r22	; 27
 288:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 28a:	44 23       	and	r20, r20
 28c:	71 f4       	brne	.+28     	; 0x2aa <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 28e:	28 b3       	in	r18, 0x18	; 24
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <dio_vidWriteChannel+0x62>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <dio_vidWriteChannel+0x5e>
 2a0:	ba 01       	movw	r22, r20
 2a2:	60 95       	com	r22
 2a4:	62 23       	and	r22, r18
 2a6:	68 bb       	out	0x18, r22	; 24
 2a8:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <dio_vidWriteChannel+0x7e>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <dio_vidWriteChannel+0x7a>
 2bc:	ba 01       	movw	r22, r20
 2be:	62 2b       	or	r22, r18
 2c0:	68 bb       	out	0x18, r22	; 24
 2c2:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 2c4:	44 23       	and	r20, r20
 2c6:	71 f4       	brne	.+28     	; 0x2e4 <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 2c8:	25 b3       	in	r18, 0x15	; 21
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <dio_vidWriteChannel+0x9c>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <dio_vidWriteChannel+0x98>
 2da:	ba 01       	movw	r22, r20
 2dc:	60 95       	com	r22
 2de:	62 23       	and	r22, r18
 2e0:	65 bb       	out	0x15, r22	; 21
 2e2:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 2e4:	25 b3       	in	r18, 0x15	; 21
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <dio_vidWriteChannel+0xb8>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <dio_vidWriteChannel+0xb4>
 2f6:	ba 01       	movw	r22, r20
 2f8:	62 2b       	or	r22, r18
 2fa:	65 bb       	out	0x15, r22	; 21
 2fc:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 2fe:	44 23       	and	r20, r20
 300:	71 f4       	brne	.+28     	; 0x31e <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	ac 01       	movw	r20, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <dio_vidWriteChannel+0xd6>
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <dio_vidWriteChannel+0xd2>
 314:	ba 01       	movw	r22, r20
 316:	60 95       	com	r22
 318:	62 23       	and	r22, r18
 31a:	62 bb       	out	0x12, r22	; 18
 31c:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 31e:	22 b3       	in	r18, 0x12	; 18
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	ac 01       	movw	r20, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <dio_vidWriteChannel+0xf2>
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <dio_vidWriteChannel+0xee>
 330:	ba 01       	movw	r22, r20
 332:	62 2b       	or	r22, r18
 334:	62 bb       	out	0x12, r22	; 18
 336:	08 95       	ret

00000338 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	c1 f0       	breq	.+48     	; 0x36c <dio_vidWriteChannelGroup+0x34>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	30 f0       	brcs	.+12     	; 0x34c <dio_vidWriteChannelGroup+0x14>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	19 f1       	breq	.+70     	; 0x38a <dio_vidWriteChannelGroup+0x52>
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	09 f0       	breq	.+2      	; 0x34a <dio_vidWriteChannelGroup+0x12>
 348:	3e c0       	rjmp	.+124    	; 0x3c6 <dio_vidWriteChannelGroup+0x8e>
 34a:	2e c0       	rjmp	.+92     	; 0x3a8 <dio_vidWriteChannelGroup+0x70>
	{
		case DIO_PORTA:
			DIO_PORTA_REG &= ~mask;
 34c:	8b b3       	in	r24, 0x1b	; 27
 34e:	94 2f       	mov	r25, r20
 350:	90 95       	com	r25
 352:	89 23       	and	r24, r25
 354:	8b bb       	out	0x1b, r24	; 27
			DIO_PORTA_REG = (value<<pos) & mask;
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	cb 01       	movw	r24, r22
 35a:	02 c0       	rjmp	.+4      	; 0x360 <dio_vidWriteChannelGroup+0x28>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	2a 95       	dec	r18
 362:	e2 f7       	brpl	.-8      	; 0x35c <dio_vidWriteChannelGroup+0x24>
 364:	9c 01       	movw	r18, r24
 366:	24 23       	and	r18, r20
 368:	2b bb       	out	0x1b, r18	; 27
		break;
 36a:	08 95       	ret

		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 36c:	88 b3       	in	r24, 0x18	; 24
 36e:	94 2f       	mov	r25, r20
 370:	90 95       	com	r25
 372:	89 23       	and	r24, r25
 374:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	fb 01       	movw	r30, r22
 37a:	02 c0       	rjmp	.+4      	; 0x380 <dio_vidWriteChannelGroup+0x48>
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	2a 95       	dec	r18
 382:	e2 f7       	brpl	.-8      	; 0x37c <dio_vidWriteChannelGroup+0x44>
 384:	e4 23       	and	r30, r20
 386:	e8 bb       	out	0x18, r30	; 24
		break;
 388:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 38a:	85 b3       	in	r24, 0x15	; 21
 38c:	94 2f       	mov	r25, r20
 38e:	90 95       	com	r25
 390:	89 23       	and	r24, r25
 392:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	cb 01       	movw	r24, r22
 398:	02 c0       	rjmp	.+4      	; 0x39e <dio_vidWriteChannelGroup+0x66>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	2a 95       	dec	r18
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <dio_vidWriteChannelGroup+0x62>
 3a2:	84 23       	and	r24, r20
 3a4:	85 bb       	out	0x15, r24	; 21
		break;
 3a6:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 3a8:	82 b3       	in	r24, 0x12	; 18
 3aa:	94 2f       	mov	r25, r20
 3ac:	90 95       	com	r25
 3ae:	89 23       	and	r24, r25
 3b0:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	cb 01       	movw	r24, r22
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <dio_vidWriteChannelGroup+0x84>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	2a 95       	dec	r18
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <dio_vidWriteChannelGroup+0x80>
 3c0:	9c 01       	movw	r18, r24
 3c2:	24 23       	and	r18, r20
 3c4:	22 bb       	out	0x12, r18	; 18
 3c6:	08 95       	ret

000003c8 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 3c8:	68 23       	and	r22, r24
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	cb 01       	movw	r24, r22
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <dio_vidReadChannelGroup+0xc>
 3d0:	95 95       	asr	r25
 3d2:	87 95       	ror	r24
 3d4:	4a 95       	dec	r20
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <dio_vidReadChannelGroup+0x8>
}
 3d8:	08 95       	ret

000003da <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	a1 f0       	breq	.+40     	; 0x406 <dio_vidFlipChannel+0x2c>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	28 f0       	brcs	.+10     	; 0x3ec <dio_vidFlipChannel+0x12>
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	e9 f0       	breq	.+58     	; 0x420 <dio_vidFlipChannel+0x46>
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	a1 f5       	brne	.+104    	; 0x452 <dio_vidFlipChannel+0x78>
 3ea:	27 c0       	rjmp	.+78     	; 0x43a <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 3ec:	2b b3       	in	r18, 0x1b	; 27
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <dio_vidFlipChannel+0x20>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <dio_vidFlipChannel+0x1c>
 3fe:	ba 01       	movw	r22, r20
 400:	62 27       	eor	r22, r18
 402:	6b bb       	out	0x1b, r22	; 27
		break;
 404:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 406:	28 b3       	in	r18, 0x18	; 24
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <dio_vidFlipChannel+0x3a>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <dio_vidFlipChannel+0x36>
 418:	ba 01       	movw	r22, r20
 41a:	62 27       	eor	r22, r18
 41c:	68 bb       	out	0x18, r22	; 24
		break;
 41e:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 420:	25 b3       	in	r18, 0x15	; 21
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	ac 01       	movw	r20, r24
 428:	02 c0       	rjmp	.+4      	; 0x42e <dio_vidFlipChannel+0x54>
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <dio_vidFlipChannel+0x50>
 432:	ba 01       	movw	r22, r20
 434:	62 27       	eor	r22, r18
 436:	65 bb       	out	0x15, r22	; 21
		break;
 438:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 43a:	22 b3       	in	r18, 0x12	; 18
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	ac 01       	movw	r20, r24
 442:	02 c0       	rjmp	.+4      	; 0x448 <dio_vidFlipChannel+0x6e>
 444:	44 0f       	add	r20, r20
 446:	55 1f       	adc	r21, r21
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <dio_vidFlipChannel+0x6a>
 44c:	ba 01       	movw	r22, r20
 44e:	62 27       	eor	r22, r18
 450:	62 bb       	out	0x12, r22	; 18
 452:	08 95       	ret

00000454 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	89 f0       	breq	.+34     	; 0x47a <dio_dioLevelReadChannel+0x26>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	28 f0       	brcs	.+10     	; 0x466 <dio_dioLevelReadChannel+0x12>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	b9 f0       	breq	.+46     	; 0x48e <dio_dioLevelReadChannel+0x3a>
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	49 f5       	brne	.+82     	; 0x4b6 <dio_dioLevelReadChannel+0x62>
 464:	1e c0       	rjmp	.+60     	; 0x4a2 <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 466:	29 b3       	in	r18, 0x19	; 25
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	c9 01       	movw	r24, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <dio_dioLevelReadChannel+0x1e>
 46e:	95 95       	asr	r25
 470:	87 95       	ror	r24
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <dio_dioLevelReadChannel+0x1a>
 476:	81 70       	andi	r24, 0x01	; 1
		break;
 478:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 47a:	26 b3       	in	r18, 0x16	; 22
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	c9 01       	movw	r24, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <dio_dioLevelReadChannel+0x32>
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <dio_dioLevelReadChannel+0x2e>
 48a:	81 70       	andi	r24, 0x01	; 1
		break;
 48c:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 48e:	23 b3       	in	r18, 0x13	; 19
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	c9 01       	movw	r24, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <dio_dioLevelReadChannel+0x46>
 496:	95 95       	asr	r25
 498:	87 95       	ror	r24
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <dio_dioLevelReadChannel+0x42>
 49e:	81 70       	andi	r24, 0x01	; 1
		break;
 4a0:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 4a2:	20 b3       	in	r18, 0x10	; 16
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	c9 01       	movw	r24, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <dio_dioLevelReadChannel+0x5a>
 4aa:	95 95       	asr	r25
 4ac:	87 95       	ror	r24
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <dio_dioLevelReadChannel+0x56>
 4b2:	81 70       	andi	r24, 0x01	; 1
		break;
 4b4:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 4b8:	08 95       	ret

000004ba <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	f9 f0       	breq	.+62     	; 0x4fc <dio_vidEnablePullUp+0x42>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	30 f0       	brcs	.+12     	; 0x4ce <dio_vidEnablePullUp+0x14>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	91 f1       	breq	.+100    	; 0x52a <dio_vidEnablePullUp+0x70>
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	09 f0       	breq	.+2      	; 0x4cc <dio_vidEnablePullUp+0x12>
 4ca:	5c c0       	rjmp	.+184    	; 0x584 <dio_vidEnablePullUp+0xca>
 4cc:	45 c0       	rjmp	.+138    	; 0x558 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if(CHECK_BIT(DIO_DDRA_REG,channel) == INPUT)
 4ce:	8a b3       	in	r24, 0x1a	; 26
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	06 2e       	mov	r0, r22
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <dio_vidEnablePullUp+0x20>
 4d6:	95 95       	asr	r25
 4d8:	87 95       	ror	r24
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <dio_vidEnablePullUp+0x1c>
 4de:	80 fd       	sbrc	r24, 0
 4e0:	51 c0       	rjmp	.+162    	; 0x584 <dio_vidEnablePullUp+0xca>
		{
			SET_BIT(DIO_PORTA_REG,channel);	
 4e2:	2b b3       	in	r18, 0x1b	; 27
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	ac 01       	movw	r20, r24
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <dio_vidEnablePullUp+0x36>
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <dio_vidEnablePullUp+0x32>
 4f4:	ba 01       	movw	r22, r20
 4f6:	62 2b       	or	r22, r18
 4f8:	6b bb       	out	0x1b, r22	; 27
 4fa:	08 95       	ret
		}
		break;

		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 4fc:	87 b3       	in	r24, 0x17	; 23
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	06 2e       	mov	r0, r22
 502:	02 c0       	rjmp	.+4      	; 0x508 <dio_vidEnablePullUp+0x4e>
 504:	95 95       	asr	r25
 506:	87 95       	ror	r24
 508:	0a 94       	dec	r0
 50a:	e2 f7       	brpl	.-8      	; 0x504 <dio_vidEnablePullUp+0x4a>
 50c:	80 fd       	sbrc	r24, 0
 50e:	3a c0       	rjmp	.+116    	; 0x584 <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 510:	28 b3       	in	r18, 0x18	; 24
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	ac 01       	movw	r20, r24
 518:	02 c0       	rjmp	.+4      	; 0x51e <dio_vidEnablePullUp+0x64>
 51a:	44 0f       	add	r20, r20
 51c:	55 1f       	adc	r21, r21
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <dio_vidEnablePullUp+0x60>
 522:	ba 01       	movw	r22, r20
 524:	62 2b       	or	r22, r18
 526:	68 bb       	out	0x18, r22	; 24
 528:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 52a:	84 b3       	in	r24, 0x14	; 20
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	06 2e       	mov	r0, r22
 530:	02 c0       	rjmp	.+4      	; 0x536 <dio_vidEnablePullUp+0x7c>
 532:	95 95       	asr	r25
 534:	87 95       	ror	r24
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <dio_vidEnablePullUp+0x78>
 53a:	80 fd       	sbrc	r24, 0
 53c:	23 c0       	rjmp	.+70     	; 0x584 <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 53e:	25 b3       	in	r18, 0x15	; 21
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ac 01       	movw	r20, r24
 546:	02 c0       	rjmp	.+4      	; 0x54c <dio_vidEnablePullUp+0x92>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <dio_vidEnablePullUp+0x8e>
 550:	ba 01       	movw	r22, r20
 552:	62 2b       	or	r22, r18
 554:	65 bb       	out	0x15, r22	; 21
 556:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 558:	81 b3       	in	r24, 0x11	; 17
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	06 2e       	mov	r0, r22
 55e:	02 c0       	rjmp	.+4      	; 0x564 <dio_vidEnablePullUp+0xaa>
 560:	95 95       	asr	r25
 562:	87 95       	ror	r24
 564:	0a 94       	dec	r0
 566:	e2 f7       	brpl	.-8      	; 0x560 <dio_vidEnablePullUp+0xa6>
 568:	80 fd       	sbrc	r24, 0
 56a:	0c c0       	rjmp	.+24     	; 0x584 <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 56c:	22 b3       	in	r18, 0x12	; 18
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	ac 01       	movw	r20, r24
 574:	02 c0       	rjmp	.+4      	; 0x57a <dio_vidEnablePullUp+0xc0>
 576:	44 0f       	add	r20, r20
 578:	55 1f       	adc	r21, r21
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <dio_vidEnablePullUp+0xbc>
 57e:	ba 01       	movw	r22, r20
 580:	62 2b       	or	r22, r18
 582:	62 bb       	out	0x12, r22	; 18
 584:	08 95       	ret

00000586 <GIE_voidGlobalInterruptEnable>:

#define SREG    *((volatile u8*)0x5F)

void GIE_voidGlobalInterruptEnable(void)
{
	SET_BIT(SREG,7);
 586:	8f b7       	in	r24, 0x3f	; 63
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	8f bf       	out	0x3f, r24	; 63
}
 58c:	08 95       	ret

0000058e <GIE_voidGlobalInterruptDisable>:

void GIE_voidGlobalInterruptDisable(void)
{
	CLEAR_BIT(SREG,7);
 58e:	8f b7       	in	r24, 0x3f	; 63
 590:	8f 77       	andi	r24, 0x7F	; 127
 592:	8f bf       	out	0x3f, r24	; 63
}
 594:	08 95       	ret

00000596 <main>:

#include "Alarm_Driver.h"

int main(void)
{
	Alarm_Parameters_t alarm_par={DIO_PORTC,DIO_PIN1};
 596:	d2 e0       	ldi	r29, 0x02	; 2
 598:	c1 e0       	ldi	r28, 0x01	; 1
		
	Alarm_voidInit(alarm_par);
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 49 00 	call	0x92	; 0x92 <Alarm_voidInit>

    while(1)
    {
		Alarm_voidOn(alarm_par);
 5a2:	8d 2f       	mov	r24, r29
 5a4:	9c 2f       	mov	r25, r28
 5a6:	0e 94 4e 00 	call	0x9c	; 0x9c <Alarm_voidOn>
 5aa:	fb cf       	rjmp	.-10     	; 0x5a2 <main+0xc>

000005ac <TIMER0_void_Init>:
	#if(TIMER0_MODE == TIMER0_NORMAL)
		CLEAR_BIT(TCCR0 , 6);
		CLEAR_BIT(TCCR0 , 3);
	
	#elif(TIMER0_MODE == TIMER0_CTC)
		CLEAR_BIT(TCCR0 , 6);
 5ac:	83 b7       	in	r24, 0x33	; 51
 5ae:	8f 7b       	andi	r24, 0xBF	; 191
 5b0:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 3);
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	88 60       	ori	r24, 0x08	; 8
 5b6:	83 bf       	out	0x33, r24	; 51
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_256 )
		CLEAR_BIT(TCCR0 , 0);
		CLEAR_BIT(TCCR0 , 1);
		SET_BIT(TCCR0 , 2);
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_1024 )
		SET_BIT(TCCR0 , 0);
 5b8:	83 b7       	in	r24, 0x33	; 51
 5ba:	81 60       	ori	r24, 0x01	; 1
 5bc:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 1);
 5be:	83 b7       	in	r24, 0x33	; 51
 5c0:	8d 7f       	andi	r24, 0xFD	; 253
 5c2:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 2);
 5c4:	83 b7       	in	r24, 0x33	; 51
 5c6:	84 60       	ori	r24, 0x04	; 4
 5c8:	83 bf       	out	0x33, r24	; 51
		
	#endif
	
	#if(TIMER0_COM_EVENT == TIMER0_NO_ACTION)
		CLEAR_BIT(TCCR0 , 4);
 5ca:	83 b7       	in	r24, 0x33	; 51
 5cc:	8f 7e       	andi	r24, 0xEF	; 239
 5ce:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 5);
 5d0:	83 b7       	in	r24, 0x33	; 51
 5d2:	8f 7d       	andi	r24, 0xDF	; 223
 5d4:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 5);

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);	
 5d6:	89 b7       	in	r24, 0x39	; 57
 5d8:	8e 7f       	andi	r24, 0xFE	; 254
 5da:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 5dc:	89 b7       	in	r24, 0x39	; 57
 5de:	8d 7f       	andi	r24, 0xFD	; 253
 5e0:	89 bf       	out	0x39, r24	; 57
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);	
 5e2:	88 b7       	in	r24, 0x38	; 56
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 5e8:	88 b7       	in	r24, 0x38	; 56
 5ea:	82 60       	ori	r24, 0x02	; 2
 5ec:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT0 = 0 ;
 5ee:	12 be       	out	0x32, r1	; 50
	OCR0 = 0 ;
 5f0:	1c be       	out	0x3c, r1	; 60
	
	
}
 5f2:	08 95       	ret

000005f4 <TIMER0_void_SetTimerReg>:

void TIMER0_void_SetTimerReg(u8 Copy_uint8Val)
{
	TCNT0 = Copy_uint8Val ;
 5f4:	82 bf       	out	0x32, r24	; 50
}
 5f6:	08 95       	ret

000005f8 <TIMER0_void_SetCompareVal>:

void TIMER0_void_SetCompareVal(u8 Copy_uint8Val)
{
	OCR0 = Copy_uint8Val ;
 5f8:	8c bf       	out	0x3c, r24	; 60
}
 5fa:	08 95       	ret

000005fc <TIMER0_void_EnableOVInt>:

void TIMER0_void_EnableOVInt(void)
{
	SET_BIT(TIMSK , 0);
 5fc:	89 b7       	in	r24, 0x39	; 57
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	89 bf       	out	0x39, r24	; 57
}
 602:	08 95       	ret

00000604 <TIMER0_void_DisableOVInt>:

void TIMER0_void_DisableOVInt(void)
{
	CLEAR_BIT(TIMSK , 0);
 604:	89 b7       	in	r24, 0x39	; 57
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	89 bf       	out	0x39, r24	; 57
}
 60a:	08 95       	ret

0000060c <TIMER0_void_EnableCTCInt>:

void TIMER0_void_EnableCTCInt(void)
{
	SET_BIT(TIMSK , 1);
 60c:	89 b7       	in	r24, 0x39	; 57
 60e:	82 60       	ori	r24, 0x02	; 2
 610:	89 bf       	out	0x39, r24	; 57
}
 612:	08 95       	ret

00000614 <TIMER0_void_DisableCTCInt>:

void TIMER0_void_DisableCTCInt(void)
{
	CLEAR_BIT(TIMSK , 1);
 614:	89 b7       	in	r24, 0x39	; 57
 616:	8d 7f       	andi	r24, 0xFD	; 253
 618:	89 bf       	out	0x39, r24	; 57
}
 61a:	08 95       	ret

0000061c <TIMER0_void_SetOVCallBack>:

void TIMER0_void_SetOVCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_OV_CallBack = Copy_ptr ;
 61c:	90 93 63 00 	sts	0x0063, r25
 620:	80 93 62 00 	sts	0x0062, r24
}
 624:	08 95       	ret

00000626 <TIMER0_void_SetCTCCallBack>:

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 626:	90 93 61 00 	sts	0x0061, r25
 62a:	80 93 60 00 	sts	0x0060, r24
	
}
 62e:	08 95       	ret

00000630 <__vector_11>:

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 652:	e0 91 62 00 	lds	r30, 0x0062
 656:	f0 91 63 00 	lds	r31, 0x0063
 65a:	09 95       	icall
}
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	2f 93       	push	r18
 68a:	3f 93       	push	r19
 68c:	4f 93       	push	r20
 68e:	5f 93       	push	r21
 690:	6f 93       	push	r22
 692:	7f 93       	push	r23
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	af 93       	push	r26
 69a:	bf 93       	push	r27
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 6a0:	e0 91 60 00 	lds	r30, 0x0060
 6a4:	f0 91 61 00 	lds	r31, 0x0061
 6a8:	09 95       	icall
}
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	7f 91       	pop	r23
 6b8:	6f 91       	pop	r22
 6ba:	5f 91       	pop	r21
 6bc:	4f 91       	pop	r20
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <_exit>:
 6cc:	f8 94       	cli

000006ce <__stop_program>:
 6ce:	ff cf       	rjmp	.-2      	; 0x6ce <__stop_program>
