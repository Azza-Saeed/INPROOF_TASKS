
IR_Transmitter_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000a2a  00000abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800064  00800064  00000ac2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001218  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001176  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f5  00000000  00000000  0000248e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071e  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bf  00000000  00000000  000034cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca6  00000000  00000000  00003a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00004731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	e7 c4       	rjmp	.+2510   	; 0x9d8 <__vector_4>
   a:	bf c4       	rjmp	.+2430   	; 0x98a <__vector_5>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e2       	ldi	r30, 0x2A	; 42
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 37       	cpi	r26, 0x70	; 112
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	a0 d2       	rcall	.+1344   	; 0x59a <main>
  5a:	e5 c4       	rjmp	.+2506   	; 0xa26 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <App_vidInit>:
	
void App_vidInit(void)
{	
		
	//IR_voidInit(Transmitter);
	dio_vidConfigChannel(DIO_PORTB,DIO_PIN0,OUTPUT);
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	41 e0       	ldi	r20, 0x01	; 1
  64:	9d d2       	rcall	.+1338   	; 0x5a0 <dio_vidConfigChannel>
}
  66:	08 95       	ret

00000068 <App_vidMain>:

void App_vidMain(void)
{
	IR_voidTransmitFrame_timer(Transmitter);
  68:	60 91 60 00 	lds	r22, 0x0060
  6c:	70 91 61 00 	lds	r23, 0x0061
  70:	80 91 62 00 	lds	r24, 0x0062
  74:	90 91 63 00 	lds	r25, 0x0063
  78:	7e d2       	rcall	.+1276   	; 0x576 <IR_voidTransmitFrame_timer>
	//IR_voidSendStartBit_timer(Transmitter);
	/*dio_vidWriteChannel(DIO_PORTB,DIO_PIN0,STD_HIGH);
	_delay_ms(500);
	dio_vidWriteChannel(DIO_PORTB,DIO_PIN0,STD_LOW);
	_delay_ms(500);*/
  7a:	08 95       	ret

0000007c <IR_voidInit>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : initialize the system
*/
void IR_voidInit(IR_parameters_t IR_Obj)
{
  7c:	cf 92       	push	r12
  7e:	df 92       	push	r13
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
  84:	6b 01       	movw	r12, r22
  86:	7c 01       	movw	r14, r24
    IR_Global_Obj = IR_Obj;
  88:	60 93 68 00 	sts	0x0068, r22
  8c:	70 93 69 00 	sts	0x0069, r23
  90:	80 93 6a 00 	sts	0x006A, r24
  94:	90 93 6b 00 	sts	0x006B, r25
//	u32Concat |= IR_Obj.u8Address;			// address bits
//	u32Concat |= (~IR_Obj.u8Address)<<8;	// inverted address bits
//	u32Concat |= (IR_Obj.u8Data)<<16;		// data bits
//	u32Concat |= (~IR_Obj.u8Data)<<24;		// inverted data bits
    
        u32Concat |= IR_Obj.u8Data;			// data bits
  98:	80 91 64 00 	lds	r24, 0x0064
  9c:	90 91 65 00 	lds	r25, 0x0065
  a0:	a0 91 66 00 	lds	r26, 0x0066
  a4:	b0 91 67 00 	lds	r27, 0x0067
  a8:	4e 2d       	mov	r20, r14
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	84 2b       	or	r24, r20
  b2:	95 2b       	or	r25, r21
  b4:	a6 2b       	or	r26, r22
  b6:	b7 2b       	or	r27, r23
  b8:	80 93 64 00 	sts	0x0064, r24
  bc:	90 93 65 00 	sts	0x0065, r25
  c0:	a0 93 66 00 	sts	0x0066, r26
  c4:	b0 93 67 00 	sts	0x0067, r27
    /* IO initialization */
    dio_vidConfigChannel(IR_Obj.u8port, IR_Obj.u8pin,OUTPUT);
  c8:	8c 2d       	mov	r24, r12
  ca:	6d 2d       	mov	r22, r13
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	68 d2       	rcall	.+1232   	; 0x5a0 <dio_vidConfigChannel>
    /* Idle */
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin,STD_LOW);
  d0:	8c 2d       	mov	r24, r12
  d2:	6d 2d       	mov	r22, r13
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	db d2       	rcall	.+1462   	; 0x68e <dio_vidWriteChannel>
    /* Initialize timer */
    TIMER2_void_Init();
  d8:	16 d4       	rcall	.+2092   	; 0x906 <TIMER2_void_Init>
}
  da:	ff 90       	pop	r15
  dc:	ef 90       	pop	r14
  de:	df 90       	pop	r13
  e0:	cf 90       	pop	r12
  e2:	08 95       	ret

000000e4 <IR_voidSendStartBit>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the start of the frame
*/
void IR_voidSendStartBit(IR_parameters_t IR_Obj)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	d6 2f       	mov	r29, r22
  ea:	c7 2f       	mov	r28, r23
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
  ec:	86 2f       	mov	r24, r22
  ee:	67 2f       	mov	r22, r23
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	cd d2       	rcall	.+1434   	; 0x68e <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e9       	ldi	r24, 0x9F	; 159
  f6:	9c e8       	ldi	r25, 0x8C	; 140
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <IR_voidSendStartBit+0x14>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <IR_voidSendStartBit+0x1a>
  fe:	00 00       	nop
    _delay_ms(SET_BIT_PULSE_TIMES);
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 100:	8d 2f       	mov	r24, r29
 102:	6c 2f       	mov	r22, r28
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	c3 d2       	rcall	.+1414   	; 0x68e <dio_vidWriteChannel>
 108:	8f e4       	ldi	r24, 0x4F	; 79
 10a:	96 e4       	ldi	r25, 0x46	; 70
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <IR_voidSendStartBit+0x28>
 110:	00 c0       	rjmp	.+0      	; 0x112 <IR_voidSendStartBit+0x2e>
 112:	00 00       	nop
    _delay_ms(SET_BIT_PULSE_SPACE_TIMES);
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <IR_voidTransmitData>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the IR Address & Data
*/
void IR_voidTransmitData(IR_parameters_t IR_Obj)
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	16 2f       	mov	r17, r22
 124:	07 2f       	mov	r16, r23
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	d0 e0       	ldi	r29, 0x00	; 0
    u8 u8Counter=0;

    /* check on data */
    for(u8Counter=0;u8Counter<MAXIMUM_LENGTH;u8Counter++ )
    {
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 12a:	81 2f       	mov	r24, r17
 12c:	60 2f       	mov	r22, r16
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	ae d2       	rcall	.+1372   	; 0x68e <dio_vidWriteChannel>
 132:	8b ec       	ldi	r24, 0xCB	; 203
 134:	98 e0       	ldi	r25, 0x08	; 8
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <IR_voidTransmitData+0x1c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <IR_voidTransmitData+0x22>
 13c:	00 00       	nop
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(((u32Concat >> u8Counter) & 1 != 0 ) )
 13e:	80 91 64 00 	lds	r24, 0x0064
 142:	90 91 65 00 	lds	r25, 0x0065
 146:	a0 91 66 00 	lds	r26, 0x0066
 14a:	b0 91 67 00 	lds	r27, 0x0067
 14e:	0c 2e       	mov	r0, r28
 150:	04 c0       	rjmp	.+8      	; 0x15a <IR_voidTransmitData+0x40>
 152:	b6 95       	lsr	r27
 154:	a7 95       	ror	r26
 156:	97 95       	ror	r25
 158:	87 95       	ror	r24
 15a:	0a 94       	dec	r0
 15c:	d2 f7       	brpl	.-12     	; 0x152 <IR_voidTransmitData+0x38>
 15e:	81 70       	andi	r24, 0x01	; 1
 160:	90 70       	andi	r25, 0x00	; 0
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	59 f0       	breq	.+22     	; 0x17c <IR_voidTransmitData+0x62>
        {
            dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 166:	81 2f       	mov	r24, r17
 168:	60 2f       	mov	r22, r16
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	90 d2       	rcall	.+1312   	; 0x68e <dio_vidWriteChannel>
 16e:	8d e5       	ldi	r24, 0x5D	; 93
 170:	9a e1       	ldi	r25, 0x1A	; 26
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <IR_voidTransmitData+0x58>
 176:	00 c0       	rjmp	.+0      	; 0x178 <IR_voidTransmitData+0x5e>
 178:	00 00       	nop
 17a:	0d c0       	rjmp	.+26     	; 0x196 <IR_voidTransmitData+0x7c>
            _delay_ms(HIGH_PULSE_BURST_SPACE_TIMES);
        }else{
            dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 17c:	81 2f       	mov	r24, r17
 17e:	60 2f       	mov	r22, r16
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	85 d2       	rcall	.+1290   	; 0x68e <dio_vidWriteChannel>
 184:	8f e7       	ldi	r24, 0x7F	; 127
 186:	9d e7       	ldi	r25, 0x7D	; 125
 188:	ab e1       	ldi	r26, 0x1B	; 27
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	a0 40       	sbci	r26, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <IR_voidTransmitData+0x70>
 192:	00 c0       	rjmp	.+0      	; 0x194 <IR_voidTransmitData+0x7a>
 194:	00 00       	nop
 196:	21 96       	adiw	r28, 0x01	; 1
void IR_voidTransmitData(IR_parameters_t IR_Obj)
{
    u8 u8Counter=0;

    /* check on data */
    for(u8Counter=0;u8Counter<MAXIMUM_LENGTH;u8Counter++ )
 198:	c0 32       	cpi	r28, 0x20	; 32
 19a:	d1 05       	cpc	r29, r1
 19c:	31 f6       	brne	.-116    	; 0x12a <IR_voidTransmitData+0x10>
        }else{
            dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
            _delay_ms(LOW_PULSE_BURST_TIMES);
        }
    }
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <IR_voidEndBit>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the end of the frame
*/
void IR_voidEndBit(IR_parameters_t IR_Obj)
{
 1a8:	86 2f       	mov	r24, r22
    dio_vidWriteChannel(IR_Obj.u8port,IR_Obj.u8pin,STD_HIGH);
 1aa:	67 2f       	mov	r22, r23
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	6f d2       	rcall	.+1246   	; 0x68e <dio_vidWriteChannel>
 1b0:	8b ec       	ldi	r24, 0xCB	; 203
 1b2:	98 e0       	ldi	r25, 0x08	; 8
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <IR_voidEndBit+0xc>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <IR_voidEndBit+0x12>
 1ba:	00 00       	nop
    _delay_ms(END_BURST_TIMES);
}
 1bc:	08 95       	ret

000001be <IR_voidTransmitFrame>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the IR signal
*/
void IR_voidTransmitFrame(IR_parameters_t IR_Obj)
{
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
    /* Sending Start Frame */
    IR_voidSendStartBit(IR_Obj);
 1ca:	8c df       	rcall	.-232    	; 0xe4 <IR_voidSendStartBit>
    /* Sensing Address & Data */
    IR_voidTransmitData(IR_Obj);
 1cc:	c7 01       	movw	r24, r14
 1ce:	b6 01       	movw	r22, r12
 1d0:	a4 df       	rcall	.-184    	; 0x11a <IR_voidTransmitData>
    /* Send the end of the frame */
    IR_voidEndBit(IR_Obj);
 1d2:	c7 01       	movw	r24, r14
 1d4:	b6 01       	movw	r22, r12
 1d6:	e8 df       	rcall	.-48     	; 0x1a8 <IR_voidEndBit>
}
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	df 90       	pop	r13
 1de:	cf 90       	pop	r12
 1e0:	08 95       	ret

000001e2 <IR_voidSendPulses>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the start of the modulation pulses
*/
void IR_voidSendPulses(IR_parameters_t IR_Obj)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	d6 2f       	mov	r29, r22
 1e8:	c7 2f       	mov	r28, r23
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 1ea:	86 2f       	mov	r24, r22
 1ec:	67 2f       	mov	r22, r23
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	4e d2       	rcall	.+1180   	; 0x68e <dio_vidWriteChannel>
 1f2:	8f e1       	ldi	r24, 0x1F	; 31
 1f4:	9b ec       	ldi	r25, 0xCB	; 203
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <IR_voidSendPulses+0x14>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <IR_voidSendPulses+0x1a>
 1fc:	00 00       	nop
    _delay_ms(13);
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 1fe:	8d 2f       	mov	r24, r29
 200:	6c 2f       	mov	r22, r28
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	44 d2       	rcall	.+1160   	; 0x68e <dio_vidWriteChannel>
 206:	8f e1       	ldi	r24, 0x1F	; 31
 208:	9b ec       	ldi	r25, 0xCB	; 203
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <IR_voidSendPulses+0x28>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <IR_voidSendPulses+0x2e>
 210:	00 00       	nop
    _delay_ms(13);
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <IR_voidSendPulses_timer>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the start of the modulation pulses
*/
void IR_voidSendPulses_timer(IR_parameters_t IR_Obj)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	d6 2f       	mov	r29, r22
 21e:	c7 2f       	mov	r28, r23
    TCNT2 =0;
 220:	14 bc       	out	0x24, r1	; 36
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 222:	86 2f       	mov	r24, r22
 224:	67 2f       	mov	r22, r23
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	32 d2       	rcall	.+1124   	; 0x68e <dio_vidWriteChannel>
   while( TCNT2 <= HALF_PULSE_TIME );
 22a:	84 b5       	in	r24, 0x24	; 36
 22c:	89 31       	cpi	r24, 0x19	; 25
 22e:	e8 f3       	brcs	.-6      	; 0x22a <IR_voidSendPulses_timer+0x12>
  // _delay_ms(13);
   dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 230:	8d 2f       	mov	r24, r29
 232:	6c 2f       	mov	r22, r28
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	2b d2       	rcall	.+1110   	; 0x68e <dio_vidWriteChannel>
   while( TCNT2 <= 2*HALF_PULSE_TIME );
 238:	84 b5       	in	r24, 0x24	; 36
 23a:	81 33       	cpi	r24, 0x31	; 49
 23c:	e8 f3       	brcs	.-6      	; 0x238 <IR_voidSendPulses_timer+0x20>
  //_delay_ms(13);
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <IR_voidSendStartBit_timer>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the start of the frame
*/
void IR_voidSendStartBit_timer(IR_parameters_t IR_Obj)
{
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	06 2f       	mov	r16, r22
 252:	17 2f       	mov	r17, r23
 254:	f8 2e       	mov	r15, r24
 256:	e9 2e       	mov	r14, r25
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 258:	86 2f       	mov	r24, r22
 25a:	67 2f       	mov	r22, r23
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	17 d2       	rcall	.+1070   	; 0x68e <dio_vidWriteChannel>
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	9c e8       	ldi	r25, 0x8C	; 140
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <IR_voidSendStartBit_timer+0x20>
 268:	00 c0       	rjmp	.+0      	; 0x26a <IR_voidSendStartBit_timer+0x26>
 26a:	00 00       	nop
 26c:	cd ea       	ldi	r28, 0xAD	; 173
 26e:	d0 e0       	ldi	r29, 0x00	; 0
    _delay_ms(9);
    
    for(int i=0; i<LOW_START_ITERATION;i++)
    {
        IR_voidSendPulses_timer(IR_Obj);
 270:	60 2f       	mov	r22, r16
 272:	71 2f       	mov	r23, r17
 274:	8f 2d       	mov	r24, r15
 276:	9e 2d       	mov	r25, r14
 278:	cf df       	rcall	.-98     	; 0x218 <IR_voidSendPulses_timer>
 27a:	21 97       	sbiw	r28, 0x01	; 1
void IR_voidSendStartBit_timer(IR_parameters_t IR_Obj)
{
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
    _delay_ms(9);
    
    for(int i=0; i<LOW_START_ITERATION;i++)
 27c:	c9 f7       	brne	.-14     	; 0x270 <IR_voidSendStartBit_timer+0x2c>

    /*dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
    _delay_ms(4.5);*/
    
    
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	08 95       	ret

0000028c <IR_voidTransmitData_timer>:
    Function Arguments   : struct
    Function Description : send the IR Address & Data
*/

void IR_voidTransmitData_timer(IR_parameters_t IR_Obj)
{
 28c:	2f 92       	push	r2
 28e:	3f 92       	push	r3
 290:	4f 92       	push	r4
 292:	5f 92       	push	r5
 294:	6f 92       	push	r6
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <IR_voidTransmitData_timer+0x26>
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <IR_voidTransmitData_timer+0x28>
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Data, u8Counter) == 0)
 2b8:	6a 83       	std	Y+2, r22	; 0x02
 2ba:	79 83       	std	Y+1, r23	; 0x01
 2bc:	38 2e       	mov	r3, r24
 2be:	29 2e       	mov	r2, r25
    Function Arguments   : struct
    Function Description : send the IR Address & Data
*/

void IR_voidTransmitData_timer(IR_parameters_t IR_Obj)
{
 2c0:	cc 24       	eor	r12, r12
 2c2:	dd 24       	eor	r13, r13
    u8 u8Counter=0;

    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 2c4:	96 2e       	mov	r9, r22
 2c6:	87 2e       	mov	r8, r23
        _delay_ms(HIGH_PULSE_BURST_TIMES);
    
        if(CHECK_BIT(IR_Obj.u8Address, u8Counter) == 0)
 2c8:	a9 2e       	mov	r10, r25
 2ca:	bb 24       	eor	r11, r11
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 2cc:	16 2f       	mov	r17, r22
 2ce:	07 2f       	mov	r16, r23
 2d0:	f8 2e       	mov	r15, r24
 2d2:	e9 2e       	mov	r14, r25
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
    
        if(CHECK_BIT(IR_Obj.u8Address, u8Counter) == 0)
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f5 e1       	ldi	r31, 0x15	; 21
 2d8:	4f 2e       	mov	r4, r31
 2da:	55 24       	eor	r5, r5
 2dc:	f0 2d       	mov	r31, r0
    u8 u8Counter=0;

    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 2de:	89 2d       	mov	r24, r9
 2e0:	68 2d       	mov	r22, r8
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	d4 d1       	rcall	.+936    	; 0x68e <dio_vidWriteChannel>
 2e6:	8b ec       	ldi	r24, 0xCB	; 203
 2e8:	98 e0       	ldi	r25, 0x08	; 8
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <IR_voidTransmitData_timer+0x5e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <IR_voidTransmitData_timer+0x64>
 2f0:	00 00       	nop
        _delay_ms(HIGH_PULSE_BURST_TIMES);
    
        if(CHECK_BIT(IR_Obj.u8Address, u8Counter) == 0)
 2f2:	35 01       	movw	r6, r10
 2f4:	c5 01       	movw	r24, r10
 2f6:	0c 2c       	mov	r0, r12
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <IR_voidTransmitData_timer+0x72>
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <IR_voidTransmitData_timer+0x6e>
 302:	80 fd       	sbrc	r24, 0
 304:	0f c0       	rjmp	.+30     	; 0x324 <IR_voidTransmitData_timer+0x98>
 306:	5c 82       	std	Y+4, r5	; 0x04
 308:	4b 82       	std	Y+3, r4	; 0x03
        {
            for(int i=0;i<LOW_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 30a:	61 2f       	mov	r22, r17
 30c:	70 2f       	mov	r23, r16
 30e:	8f 2d       	mov	r24, r15
 310:	9e 2d       	mov	r25, r14
 312:	82 df       	rcall	.-252    	; 0x218 <IR_voidSendPulses_timer>
 314:	eb 81       	ldd	r30, Y+3	; 0x03
 316:	fc 81       	ldd	r31, Y+4	; 0x04
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	fc 83       	std	Y+4, r31	; 0x04
 31c:	eb 83       	std	Y+3, r30	; 0x03
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
    
        if(CHECK_BIT(IR_Obj.u8Address, u8Counter) == 0)
        {
            for(int i=0;i<LOW_DATA_ITERATION;i++)
 31e:	30 97       	sbiw	r30, 0x00	; 0
 320:	a1 f7       	brne	.-24     	; 0x30a <IR_voidTransmitData_timer+0x7e>
 322:	10 c0       	rjmp	.+32     	; 0x344 <IR_voidTransmitData_timer+0xb8>
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
    
        if(CHECK_BIT(IR_Obj.u8Address, u8Counter) == 0)
 324:	81 e4       	ldi	r24, 0x41	; 65
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	9c 83       	std	Y+4, r25	; 0x04
 32a:	8b 83       	std	Y+3, r24	; 0x03
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 32c:	61 2f       	mov	r22, r17
 32e:	70 2f       	mov	r23, r16
 330:	8f 2d       	mov	r24, r15
 332:	9e 2d       	mov	r25, r14
 334:	71 df       	rcall	.-286    	; 0x218 <IR_voidSendPulses_timer>
 336:	eb 81       	ldd	r30, Y+3	; 0x03
 338:	fc 81       	ldd	r31, Y+4	; 0x04
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	fc 83       	std	Y+4, r31	; 0x04
 33e:	eb 83       	std	Y+3, r30	; 0x03
            {
                IR_voidSendPulses_timer(IR_Obj);
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
 340:	30 97       	sbiw	r30, 0x00	; 0
 342:	a1 f7       	brne	.-24     	; 0x32c <IR_voidTransmitData_timer+0xa0>
 344:	08 94       	sec
 346:	c1 1c       	adc	r12, r1
 348:	d1 1c       	adc	r13, r1

void IR_voidTransmitData_timer(IR_parameters_t IR_Obj)
{
    u8 u8Counter=0;

    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
 34a:	f8 e0       	ldi	r31, 0x08	; 8
 34c:	cf 16       	cp	r12, r31
 34e:	d1 04       	cpc	r13, r1
 350:	31 f6       	brne	.-116    	; 0x2de <IR_voidTransmitData_timer+0x52>
 352:	cc 24       	eor	r12, r12
 354:	dd 24       	eor	r13, r13
        }
    }
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 356:	9a 80       	ldd	r9, Y+2	; 0x02
 358:	89 80       	ldd	r8, Y+1	; 0x01
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Address, u8Counter) == 0) 
 35a:	53 01       	movw	r10, r6
 35c:	a0 94       	com	r10
 35e:	b0 94       	com	r11
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 360:	19 2d       	mov	r17, r9
 362:	08 2d       	mov	r16, r8
 364:	f3 2c       	mov	r15, r3
 366:	e2 2c       	mov	r14, r2
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Address, u8Counter) == 0) 
 368:	0f 2e       	mov	r0, r31
 36a:	f5 e1       	ldi	r31, 0x15	; 21
 36c:	6f 2e       	mov	r6, r31
 36e:	77 24       	eor	r7, r7
 370:	f0 2d       	mov	r31, r0
        }
    }
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 372:	89 2d       	mov	r24, r9
 374:	68 2d       	mov	r22, r8
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	8a d1       	rcall	.+788    	; 0x68e <dio_vidWriteChannel>
 37a:	8b ec       	ldi	r24, 0xCB	; 203
 37c:	98 e0       	ldi	r25, 0x08	; 8
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <IR_voidTransmitData_timer+0xf2>
 382:	00 c0       	rjmp	.+0      	; 0x384 <IR_voidTransmitData_timer+0xf8>
 384:	00 00       	nop
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Address, u8Counter) == 0) 
 386:	c5 01       	movw	r24, r10
 388:	0c 2c       	mov	r0, r12
 38a:	02 c0       	rjmp	.+4      	; 0x390 <IR_voidTransmitData_timer+0x104>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <IR_voidTransmitData_timer+0x100>
 394:	80 fd       	sbrc	r24, 0
 396:	0d c0       	rjmp	.+26     	; 0x3b2 <IR_voidTransmitData_timer+0x126>
 398:	23 01       	movw	r4, r6
		{
            for(int i=0;i<LOW_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 39a:	61 2f       	mov	r22, r17
 39c:	70 2f       	mov	r23, r16
 39e:	8f 2d       	mov	r24, r15
 3a0:	9e 2d       	mov	r25, r14
 3a2:	3a df       	rcall	.-396    	; 0x218 <IR_voidSendPulses_timer>
 3a4:	08 94       	sec
 3a6:	41 08       	sbc	r4, r1
 3a8:	51 08       	sbc	r5, r1
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Address, u8Counter) == 0) 
		{
            for(int i=0;i<LOW_DATA_ITERATION;i++)
 3aa:	41 14       	cp	r4, r1
 3ac:	51 04       	cpc	r5, r1
 3ae:	a9 f7       	brne	.-22     	; 0x39a <IR_voidTransmitData_timer+0x10e>
 3b0:	10 c0       	rjmp	.+32     	; 0x3d2 <IR_voidTransmitData_timer+0x146>
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Address, u8Counter) == 0) 
 3b2:	0f 2e       	mov	r0, r31
 3b4:	f1 e4       	ldi	r31, 0x41	; 65
 3b6:	4f 2e       	mov	r4, r31
 3b8:	55 24       	eor	r5, r5
 3ba:	f0 2d       	mov	r31, r0
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 3bc:	61 2f       	mov	r22, r17
 3be:	70 2f       	mov	r23, r16
 3c0:	8f 2d       	mov	r24, r15
 3c2:	9e 2d       	mov	r25, r14
 3c4:	29 df       	rcall	.-430    	; 0x218 <IR_voidSendPulses_timer>
 3c6:	08 94       	sec
 3c8:	41 08       	sbc	r4, r1
 3ca:	51 08       	sbc	r5, r1
            {
                IR_voidSendPulses_timer(IR_Obj);
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
 3cc:	41 14       	cp	r4, r1
 3ce:	51 04       	cpc	r5, r1
 3d0:	a9 f7       	brne	.-22     	; 0x3bc <IR_voidTransmitData_timer+0x130>
 3d2:	08 94       	sec
 3d4:	c1 1c       	adc	r12, r1
 3d6:	d1 1c       	adc	r13, r1
            {
                IR_voidSendPulses_timer(IR_Obj);
            }
        }
    }
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
 3d8:	98 e0       	ldi	r25, 0x08	; 8
 3da:	c9 16       	cp	r12, r25
 3dc:	d1 04       	cpc	r13, r1
 3de:	49 f6       	brne	.-110    	; 0x372 <IR_voidTransmitData_timer+0xe6>
 3e0:	cc 24       	eor	r12, r12
 3e2:	dd 24       	eor	r13, r13
	}	
    
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 3e4:	9a 80       	ldd	r9, Y+2	; 0x02
 3e6:	89 80       	ldd	r8, Y+1	; 0x01
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
 3e8:	a3 2c       	mov	r10, r3
 3ea:	bb 24       	eor	r11, r11
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 3ec:	19 2d       	mov	r17, r9
 3ee:	08 2d       	mov	r16, r8
 3f0:	f3 2c       	mov	r15, r3
 3f2:	e2 2c       	mov	r14, r2
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
 3f4:	0f 2e       	mov	r0, r31
 3f6:	f5 e1       	ldi	r31, 0x15	; 21
 3f8:	4f 2e       	mov	r4, r31
 3fa:	55 24       	eor	r5, r5
 3fc:	f0 2d       	mov	r31, r0
	}	
    
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 3fe:	89 2d       	mov	r24, r9
 400:	68 2d       	mov	r22, r8
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	44 d1       	rcall	.+648    	; 0x68e <dio_vidWriteChannel>
 406:	eb ec       	ldi	r30, 0xCB	; 203
 408:	f8 e0       	ldi	r31, 0x08	; 8
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <IR_voidTransmitData_timer+0x17e>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <IR_voidTransmitData_timer+0x184>
 410:	00 00       	nop
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
 412:	35 01       	movw	r6, r10
 414:	c5 01       	movw	r24, r10
 416:	0c 2c       	mov	r0, r12
 418:	02 c0       	rjmp	.+4      	; 0x41e <IR_voidTransmitData_timer+0x192>
 41a:	95 95       	asr	r25
 41c:	87 95       	ror	r24
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <IR_voidTransmitData_timer+0x18e>
 422:	80 fd       	sbrc	r24, 0
 424:	0f c0       	rjmp	.+30     	; 0x444 <IR_voidTransmitData_timer+0x1b8>
 426:	5c 82       	std	Y+4, r5	; 0x04
 428:	4b 82       	std	Y+3, r4	; 0x03
        {
            for(int i=0;i<LOW_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 42a:	61 2f       	mov	r22, r17
 42c:	70 2f       	mov	r23, r16
 42e:	8f 2d       	mov	r24, r15
 430:	9e 2d       	mov	r25, r14
 432:	f2 de       	rcall	.-540    	; 0x218 <IR_voidSendPulses_timer>
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	9c 81       	ldd	r25, Y+4	; 0x04
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	9c 83       	std	Y+4, r25	; 0x04
 43c:	8b 83       	std	Y+3, r24	; 0x03
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
        {
            for(int i=0;i<LOW_DATA_ITERATION;i++)
 43e:	00 97       	sbiw	r24, 0x00	; 0
 440:	a1 f7       	brne	.-24     	; 0x42a <IR_voidTransmitData_timer+0x19e>
 442:	10 c0       	rjmp	.+32     	; 0x464 <__stack+0x5>
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
 444:	e1 e4       	ldi	r30, 0x41	; 65
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	fc 83       	std	Y+4, r31	; 0x04
 44a:	eb 83       	std	Y+3, r30	; 0x03
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 44c:	61 2f       	mov	r22, r17
 44e:	70 2f       	mov	r23, r16
 450:	8f 2d       	mov	r24, r15
 452:	9e 2d       	mov	r25, r14
 454:	e1 de       	rcall	.-574    	; 0x218 <IR_voidSendPulses_timer>
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	9c 81       	ldd	r25, Y+4	; 0x04
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	9c 83       	std	Y+4, r25	; 0x04
 45e:	8b 83       	std	Y+3, r24	; 0x03
            {
                IR_voidSendPulses_timer(IR_Obj);
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
 460:	00 97       	sbiw	r24, 0x00	; 0
 462:	a1 f7       	brne	.-24     	; 0x44c <IR_voidTransmitData_timer+0x1c0>
 464:	08 94       	sec
 466:	c1 1c       	adc	r12, r1
 468:	d1 1c       	adc	r13, r1
                IR_voidSendPulses_timer(IR_Obj);
            }
        }		
	}	
    
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
 46a:	98 e0       	ldi	r25, 0x08	; 8
 46c:	c9 16       	cp	r12, r25
 46e:	d1 04       	cpc	r13, r1
 470:	31 f6       	brne	.-116    	; 0x3fe <IR_voidTransmitData_timer+0x172>
 472:	cc 24       	eor	r12, r12
 474:	dd 24       	eor	r13, r13
    }
    
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 476:	9a 80       	ldd	r9, Y+2	; 0x02
 478:	89 80       	ldd	r8, Y+1	; 0x01
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Data, u8Counter) == 0)
 47a:	53 01       	movw	r10, r6
 47c:	a0 94       	com	r10
 47e:	b0 94       	com	r11
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 480:	19 2d       	mov	r17, r9
 482:	08 2d       	mov	r16, r8
 484:	f3 2c       	mov	r15, r3
 486:	e2 2c       	mov	r14, r2
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Data, u8Counter) == 0)
 488:	0f 2e       	mov	r0, r31
 48a:	f5 e1       	ldi	r31, 0x15	; 21
 48c:	6f 2e       	mov	r6, r31
 48e:	77 24       	eor	r7, r7
 490:	f0 2d       	mov	r31, r0
    }
    
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 492:	89 2d       	mov	r24, r9
 494:	68 2d       	mov	r22, r8
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	fa d0       	rcall	.+500    	; 0x68e <dio_vidWriteChannel>
 49a:	eb ec       	ldi	r30, 0xCB	; 203
 49c:	f8 e0       	ldi	r31, 0x08	; 8
 49e:	31 97       	sbiw	r30, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__stack+0x3f>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__stack+0x45>
 4a4:	00 00       	nop
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Data, u8Counter) == 0)
 4a6:	c5 01       	movw	r24, r10
 4a8:	0c 2c       	mov	r0, r12
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__stack+0x51>
 4ac:	95 95       	asr	r25
 4ae:	87 95       	ror	r24
 4b0:	0a 94       	dec	r0
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__stack+0x4d>
 4b4:	80 fd       	sbrc	r24, 0
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__stack+0x73>
 4b8:	23 01       	movw	r4, r6
        {
            for(int i=0;i<LOW_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 4ba:	61 2f       	mov	r22, r17
 4bc:	70 2f       	mov	r23, r16
 4be:	8f 2d       	mov	r24, r15
 4c0:	9e 2d       	mov	r25, r14
 4c2:	aa de       	rcall	.-684    	; 0x218 <IR_voidSendPulses_timer>
 4c4:	08 94       	sec
 4c6:	41 08       	sbc	r4, r1
 4c8:	51 08       	sbc	r5, r1
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Data, u8Counter) == 0)
        {
            for(int i=0;i<LOW_DATA_ITERATION;i++)
 4ca:	41 14       	cp	r4, r1
 4cc:	51 04       	cpc	r5, r1
 4ce:	a9 f7       	brne	.-22     	; 0x4ba <__stack+0x5b>
 4d0:	10 c0       	rjmp	.+32     	; 0x4f2 <__stack+0x93>
    {
        
        dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
        _delay_ms(HIGH_PULSE_BURST_TIMES);
        
        if(CHECK_BIT(~IR_Obj.u8Data, u8Counter) == 0)
 4d2:	0f 2e       	mov	r0, r31
 4d4:	f1 e4       	ldi	r31, 0x41	; 65
 4d6:	4f 2e       	mov	r4, r31
 4d8:	55 24       	eor	r5, r5
 4da:	f0 2d       	mov	r31, r0
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
 4dc:	61 2f       	mov	r22, r17
 4de:	70 2f       	mov	r23, r16
 4e0:	8f 2d       	mov	r24, r15
 4e2:	9e 2d       	mov	r25, r14
 4e4:	99 de       	rcall	.-718    	; 0x218 <IR_voidSendPulses_timer>
 4e6:	08 94       	sec
 4e8:	41 08       	sbc	r4, r1
 4ea:	51 08       	sbc	r5, r1
            {
                IR_voidSendPulses_timer(IR_Obj);
            }
            
        }else{
            for(int i=0;i<HIGH_DATA_ITERATION;i++)
 4ec:	41 14       	cp	r4, r1
 4ee:	51 04       	cpc	r5, r1
 4f0:	a9 f7       	brne	.-22     	; 0x4dc <__stack+0x7d>
 4f2:	08 94       	sec
 4f4:	c1 1c       	adc	r12, r1
 4f6:	d1 1c       	adc	r13, r1
                IR_voidSendPulses_timer(IR_Obj);
            }
        }
    }
    
    for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
 4f8:	f8 e0       	ldi	r31, 0x08	; 8
 4fa:	cf 16       	cp	r12, r31
 4fc:	d1 04       	cpc	r13, r1
 4fe:	49 f6       	brne	.-110    	; 0x492 <__stack+0x33>
            {
                IR_voidSendPulses_timer(IR_Obj);
            }
        }
    }
 }	
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	ff 90       	pop	r15
 512:	ef 90       	pop	r14
 514:	df 90       	pop	r13
 516:	cf 90       	pop	r12
 518:	bf 90       	pop	r11
 51a:	af 90       	pop	r10
 51c:	9f 90       	pop	r9
 51e:	8f 90       	pop	r8
 520:	7f 90       	pop	r7
 522:	6f 90       	pop	r6
 524:	5f 90       	pop	r5
 526:	4f 90       	pop	r4
 528:	3f 90       	pop	r3
 52a:	2f 90       	pop	r2
 52c:	08 95       	ret

0000052e <IR_voidEndBit_timer>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send end of the frame
*/
void IR_voidEndBit_timer(IR_parameters_t IR_Obj)
{
 52e:	ef 92       	push	r14
 530:	ff 92       	push	r15
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	06 2f       	mov	r16, r22
 53c:	17 2f       	mov	r17, r23
 53e:	f8 2e       	mov	r15, r24
 540:	e9 2e       	mov	r14, r25
    /* send the high signal */
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 542:	86 2f       	mov	r24, r22
 544:	67 2f       	mov	r22, r23
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	a2 d0       	rcall	.+324    	; 0x68e <dio_vidWriteChannel>
 54a:	8b ec       	ldi	r24, 0xCB	; 203
 54c:	98 e0       	ldi	r25, 0x08	; 8
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <IR_voidEndBit_timer+0x20>
 552:	00 c0       	rjmp	.+0      	; 0x554 <IR_voidEndBit_timer+0x26>
 554:	00 00       	nop
 556:	c5 e1       	ldi	r28, 0x15	; 21
 558:	d0 e0       	ldi	r29, 0x00	; 0
    _delay_ms(HIGH_PULSE_BURST_TIMES);
    /* send the pulse modulation signal */
    for(int i=0;i<LOW_DATA_ITERATION;i++)
    {
        IR_voidSendPulses_timer(IR_Obj);
 55a:	60 2f       	mov	r22, r16
 55c:	71 2f       	mov	r23, r17
 55e:	8f 2d       	mov	r24, r15
 560:	9e 2d       	mov	r25, r14
 562:	5a de       	rcall	.-844    	; 0x218 <IR_voidSendPulses_timer>
 564:	21 97       	sbiw	r28, 0x01	; 1
{
    /* send the high signal */
    dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
    _delay_ms(HIGH_PULSE_BURST_TIMES);
    /* send the pulse modulation signal */
    for(int i=0;i<LOW_DATA_ITERATION;i++)
 566:	c9 f7       	brne	.-14     	; 0x55a <IR_voidEndBit_timer+0x2c>
    }
        /*	for(int i=0;i<LOW_DATA_ITERATION;i++)
            {
                IR_voidSendPulses_timer(IR_Obj);
            }*/
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	08 95       	ret

00000576 <IR_voidTransmitFrame_timer>:
    Function Returns     : void
    Function Arguments   : struct
    Function Description : send the IR signal
*/
void IR_voidTransmitFrame_timer(IR_parameters_t IR_Obj)
{
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	6b 01       	movw	r12, r22
 580:	7c 01       	movw	r14, r24
    /* send the start of the frame */
    IR_voidSendStartBit_timer(IR_Obj); 
 582:	60 de       	rcall	.-832    	; 0x244 <IR_voidSendStartBit_timer>
    /* send the address and data */
    IR_voidTransmitData_timer(IR_Obj);
 584:	c7 01       	movw	r24, r14
 586:	b6 01       	movw	r22, r12
 588:	81 de       	rcall	.-766    	; 0x28c <IR_voidTransmitData_timer>
    //IR_voidNew(IR_Obj);
    /* send the end of the frame */
    IR_voidEndBit_timer(IR_Obj);
 58a:	c7 01       	movw	r24, r14
 58c:	b6 01       	movw	r22, r12
 58e:	cf df       	rcall	.-98     	; 0x52e <IR_voidEndBit_timer>
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	df 90       	pop	r13
 596:	cf 90       	pop	r12
 598:	08 95       	ret

0000059a <main>:

#include "App.h"

int main(void)
{
	App_vidInit();
 59a:	61 dd       	rcall	.-1342   	; 0x5e <App_vidInit>
	
    while(1)
    {
        App_vidMain(); 
 59c:	65 dd       	rcall	.-1334   	; 0x68 <App_vidMain>
 59e:	fe cf       	rjmp	.-4      	; 0x59c <main+0x2>

000005a0 <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	19 f1       	breq	.+70     	; 0x5ea <dio_vidConfigChannel+0x4a>
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	09 f4       	brne	.+2      	; 0x5aa <dio_vidConfigChannel+0xa>
 5a8:	3d c0       	rjmp	.+122    	; 0x624 <dio_vidConfigChannel+0x84>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <dio_vidConfigChannel+0x10>
 5ae:	56 c0       	rjmp	.+172    	; 0x65c <dio_vidConfigChannel+0xbc>
	{
	case DIO_PORTB:
		if (direction == OUTPUT)
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	69 f4       	brne	.+26     	; 0x5ce <dio_vidConfigChannel+0x2e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 5b4:	27 b3       	in	r18, 0x17	; 23
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	ac 01       	movw	r20, r24
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <dio_vidConfigChannel+0x22>
 5be:	44 0f       	add	r20, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <dio_vidConfigChannel+0x1e>
 5c6:	ba 01       	movw	r22, r20
 5c8:	62 2b       	or	r22, r18
 5ca:	67 bb       	out	0x17, r22	; 23
 5cc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 5ce:	27 b3       	in	r18, 0x17	; 23
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	ac 01       	movw	r20, r24
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <dio_vidConfigChannel+0x3c>
 5d8:	44 0f       	add	r20, r20
 5da:	55 1f       	adc	r21, r21
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <dio_vidConfigChannel+0x38>
 5e0:	ba 01       	movw	r22, r20
 5e2:	60 95       	com	r22
 5e4:	62 23       	and	r22, r18
 5e6:	67 bb       	out	0x17, r22	; 23
 5e8:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 5ea:	41 30       	cpi	r20, 0x01	; 1
 5ec:	69 f4       	brne	.+26     	; 0x608 <dio_vidConfigChannel+0x68>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 5ee:	24 b3       	in	r18, 0x14	; 20
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	ac 01       	movw	r20, r24
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <dio_vidConfigChannel+0x5c>
 5f8:	44 0f       	add	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <dio_vidConfigChannel+0x58>
 600:	ba 01       	movw	r22, r20
 602:	62 2b       	or	r22, r18
 604:	64 bb       	out	0x14, r22	; 20
 606:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 608:	24 b3       	in	r18, 0x14	; 20
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	ac 01       	movw	r20, r24
 610:	02 c0       	rjmp	.+4      	; 0x616 <dio_vidConfigChannel+0x76>
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <dio_vidConfigChannel+0x72>
 61a:	ba 01       	movw	r22, r20
 61c:	60 95       	com	r22
 61e:	62 23       	and	r22, r18
 620:	64 bb       	out	0x14, r22	; 20
 622:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 624:	41 30       	cpi	r20, 0x01	; 1
 626:	69 f4       	brne	.+26     	; 0x642 <dio_vidConfigChannel+0xa2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 628:	21 b3       	in	r18, 0x11	; 17
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	ac 01       	movw	r20, r24
 630:	02 c0       	rjmp	.+4      	; 0x636 <dio_vidConfigChannel+0x96>
 632:	44 0f       	add	r20, r20
 634:	55 1f       	adc	r21, r21
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <dio_vidConfigChannel+0x92>
 63a:	ba 01       	movw	r22, r20
 63c:	62 2b       	or	r22, r18
 63e:	61 bb       	out	0x11, r22	; 17
 640:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 642:	21 b3       	in	r18, 0x11	; 17
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	ac 01       	movw	r20, r24
 64a:	02 c0       	rjmp	.+4      	; 0x650 <dio_vidConfigChannel+0xb0>
 64c:	44 0f       	add	r20, r20
 64e:	55 1f       	adc	r21, r21
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <dio_vidConfigChannel+0xac>
 654:	ba 01       	movw	r22, r20
 656:	60 95       	com	r22
 658:	62 23       	and	r22, r18
 65a:	61 bb       	out	0x11, r22	; 17
 65c:	08 95       	ret

0000065e <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 65e:	82 30       	cpi	r24, 0x02	; 2
 660:	31 f0       	breq	.+12     	; 0x66e <dio_vidConfigPort+0x10>
 662:	83 30       	cpi	r24, 0x03	; 3
 664:	31 f0       	breq	.+12     	; 0x672 <dio_vidConfigPort+0x14>
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	29 f4       	brne	.+10     	; 0x674 <dio_vidConfigPort+0x16>
	{
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 66a:	67 bb       	out	0x17, r22	; 23
 66c:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 66e:	64 bb       	out	0x14, r22	; 20
 670:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 672:	61 bb       	out	0x11, r22	; 17
 674:	08 95       	ret

00000676 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	31 f0       	breq	.+12     	; 0x686 <dio_vidSetPortValue+0x10>
 67a:	83 30       	cpi	r24, 0x03	; 3
 67c:	31 f0       	breq	.+12     	; 0x68a <dio_vidSetPortValue+0x14>
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	29 f4       	brne	.+10     	; 0x68c <dio_vidSetPortValue+0x16>
	{
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 682:	68 bb       	out	0x18, r22	; 24
 684:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 686:	65 bb       	out	0x15, r22	; 21
 688:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 68a:	62 bb       	out	0x12, r22	; 18
 68c:	08 95       	ret

0000068e <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 68e:	82 30       	cpi	r24, 0x02	; 2
 690:	19 f1       	breq	.+70     	; 0x6d8 <dio_vidWriteChannel+0x4a>
 692:	83 30       	cpi	r24, 0x03	; 3
 694:	09 f4       	brne	.+2      	; 0x698 <dio_vidWriteChannel+0xa>
 696:	3d c0       	rjmp	.+122    	; 0x712 <dio_vidWriteChannel+0x84>
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	09 f0       	breq	.+2      	; 0x69e <dio_vidWriteChannel+0x10>
 69c:	56 c0       	rjmp	.+172    	; 0x74a <dio_vidWriteChannel+0xbc>
	{
	case DIO_PORTB:
		if (level == STD_LOW)
 69e:	44 23       	and	r20, r20
 6a0:	71 f4       	brne	.+28     	; 0x6be <dio_vidWriteChannel+0x30>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 6a2:	28 b3       	in	r18, 0x18	; 24
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	ac 01       	movw	r20, r24
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <dio_vidWriteChannel+0x22>
 6ac:	44 0f       	add	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <dio_vidWriteChannel+0x1e>
 6b4:	ba 01       	movw	r22, r20
 6b6:	60 95       	com	r22
 6b8:	62 23       	and	r22, r18
 6ba:	68 bb       	out	0x18, r22	; 24
 6bc:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 6be:	28 b3       	in	r18, 0x18	; 24
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	ac 01       	movw	r20, r24
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <dio_vidWriteChannel+0x3e>
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <dio_vidWriteChannel+0x3a>
 6d0:	ba 01       	movw	r22, r20
 6d2:	62 2b       	or	r22, r18
 6d4:	68 bb       	out	0x18, r22	; 24
 6d6:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 6d8:	44 23       	and	r20, r20
 6da:	71 f4       	brne	.+28     	; 0x6f8 <dio_vidWriteChannel+0x6a>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 6dc:	25 b3       	in	r18, 0x15	; 21
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	ac 01       	movw	r20, r24
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <dio_vidWriteChannel+0x5c>
 6e6:	44 0f       	add	r20, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <dio_vidWriteChannel+0x58>
 6ee:	ba 01       	movw	r22, r20
 6f0:	60 95       	com	r22
 6f2:	62 23       	and	r22, r18
 6f4:	65 bb       	out	0x15, r22	; 21
 6f6:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 6f8:	25 b3       	in	r18, 0x15	; 21
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	ac 01       	movw	r20, r24
 700:	02 c0       	rjmp	.+4      	; 0x706 <dio_vidWriteChannel+0x78>
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <dio_vidWriteChannel+0x74>
 70a:	ba 01       	movw	r22, r20
 70c:	62 2b       	or	r22, r18
 70e:	65 bb       	out	0x15, r22	; 21
 710:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 712:	44 23       	and	r20, r20
 714:	71 f4       	brne	.+28     	; 0x732 <dio_vidWriteChannel+0xa4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 716:	22 b3       	in	r18, 0x12	; 18
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	ac 01       	movw	r20, r24
 71e:	02 c0       	rjmp	.+4      	; 0x724 <dio_vidWriteChannel+0x96>
 720:	44 0f       	add	r20, r20
 722:	55 1f       	adc	r21, r21
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <dio_vidWriteChannel+0x92>
 728:	ba 01       	movw	r22, r20
 72a:	60 95       	com	r22
 72c:	62 23       	and	r22, r18
 72e:	62 bb       	out	0x12, r22	; 18
 730:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 732:	22 b3       	in	r18, 0x12	; 18
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	ac 01       	movw	r20, r24
 73a:	02 c0       	rjmp	.+4      	; 0x740 <dio_vidWriteChannel+0xb2>
 73c:	44 0f       	add	r20, r20
 73e:	55 1f       	adc	r21, r21
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <dio_vidWriteChannel+0xae>
 744:	ba 01       	movw	r22, r20
 746:	62 2b       	or	r22, r18
 748:	62 bb       	out	0x12, r22	; 18
 74a:	08 95       	ret

0000074c <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 74c:	82 30       	cpi	r24, 0x02	; 2
 74e:	a1 f0       	breq	.+40     	; 0x778 <dio_vidWriteChannelGroup+0x2c>
 750:	83 30       	cpi	r24, 0x03	; 3
 752:	09 f1       	breq	.+66     	; 0x796 <dio_vidWriteChannelGroup+0x4a>
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	71 f5       	brne	.+92     	; 0x7b4 <dio_vidWriteChannelGroup+0x68>
	{
		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 758:	88 b3       	in	r24, 0x18	; 24
 75a:	94 2f       	mov	r25, r20
 75c:	90 95       	com	r25
 75e:	89 23       	and	r24, r25
 760:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 762:	e6 2f       	mov	r30, r22
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	bf 01       	movw	r22, r30
 768:	02 c0       	rjmp	.+4      	; 0x76e <dio_vidWriteChannelGroup+0x22>
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	2a 95       	dec	r18
 770:	e2 f7       	brpl	.-8      	; 0x76a <dio_vidWriteChannelGroup+0x1e>
 772:	64 23       	and	r22, r20
 774:	68 bb       	out	0x18, r22	; 24
		break;
 776:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 778:	85 b3       	in	r24, 0x15	; 21
 77a:	94 2f       	mov	r25, r20
 77c:	90 95       	com	r25
 77e:	89 23       	and	r24, r25
 780:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	cb 01       	movw	r24, r22
 786:	02 c0       	rjmp	.+4      	; 0x78c <dio_vidWriteChannelGroup+0x40>
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	2a 95       	dec	r18
 78e:	e2 f7       	brpl	.-8      	; 0x788 <dio_vidWriteChannelGroup+0x3c>
 790:	84 23       	and	r24, r20
 792:	85 bb       	out	0x15, r24	; 21
		break;
 794:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 796:	82 b3       	in	r24, 0x12	; 18
 798:	94 2f       	mov	r25, r20
 79a:	90 95       	com	r25
 79c:	89 23       	and	r24, r25
 79e:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	cb 01       	movw	r24, r22
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <dio_vidWriteChannelGroup+0x5e>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	2a 95       	dec	r18
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <dio_vidWriteChannelGroup+0x5a>
 7ae:	9c 01       	movw	r18, r24
 7b0:	24 23       	and	r18, r20
 7b2:	22 bb       	out	0x12, r18	; 18
 7b4:	08 95       	ret

000007b6 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 7b6:	68 23       	and	r22, r24
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	cb 01       	movw	r24, r22
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <dio_vidReadChannelGroup+0xc>
 7be:	95 95       	asr	r25
 7c0:	87 95       	ror	r24
 7c2:	4a 95       	dec	r20
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <dio_vidReadChannelGroup+0x8>
}
 7c6:	08 95       	ret

000007c8 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 7c8:	82 30       	cpi	r24, 0x02	; 2
 7ca:	89 f0       	breq	.+34     	; 0x7ee <dio_vidFlipChannel+0x26>
 7cc:	83 30       	cpi	r24, 0x03	; 3
 7ce:	e1 f0       	breq	.+56     	; 0x808 <dio_vidFlipChannel+0x40>
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	31 f5       	brne	.+76     	; 0x820 <dio_vidFlipChannel+0x58>
	{
	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 7d4:	28 b3       	in	r18, 0x18	; 24
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	ac 01       	movw	r20, r24
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <dio_vidFlipChannel+0x1a>
 7de:	44 0f       	add	r20, r20
 7e0:	55 1f       	adc	r21, r21
 7e2:	6a 95       	dec	r22
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <dio_vidFlipChannel+0x16>
 7e6:	ba 01       	movw	r22, r20
 7e8:	62 27       	eor	r22, r18
 7ea:	68 bb       	out	0x18, r22	; 24
		break;
 7ec:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 7ee:	25 b3       	in	r18, 0x15	; 21
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	ac 01       	movw	r20, r24
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <dio_vidFlipChannel+0x34>
 7f8:	44 0f       	add	r20, r20
 7fa:	55 1f       	adc	r21, r21
 7fc:	6a 95       	dec	r22
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <dio_vidFlipChannel+0x30>
 800:	ba 01       	movw	r22, r20
 802:	62 27       	eor	r22, r18
 804:	65 bb       	out	0x15, r22	; 21
		break;
 806:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 808:	22 b3       	in	r18, 0x12	; 18
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	ac 01       	movw	r20, r24
 810:	02 c0       	rjmp	.+4      	; 0x816 <dio_vidFlipChannel+0x4e>
 812:	44 0f       	add	r20, r20
 814:	55 1f       	adc	r21, r21
 816:	6a 95       	dec	r22
 818:	e2 f7       	brpl	.-8      	; 0x812 <dio_vidFlipChannel+0x4a>
 81a:	ba 01       	movw	r22, r20
 81c:	62 27       	eor	r22, r18
 81e:	62 bb       	out	0x12, r22	; 18
 820:	08 95       	ret

00000822 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 822:	82 30       	cpi	r24, 0x02	; 2
 824:	71 f0       	breq	.+28     	; 0x842 <dio_dioLevelReadChannel+0x20>
 826:	83 30       	cpi	r24, 0x03	; 3
 828:	b1 f0       	breq	.+44     	; 0x856 <dio_dioLevelReadChannel+0x34>
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	f1 f4       	brne	.+60     	; 0x86a <dio_dioLevelReadChannel+0x48>
	{
	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 82e:	26 b3       	in	r18, 0x16	; 22
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	c9 01       	movw	r24, r18
 834:	02 c0       	rjmp	.+4      	; 0x83a <dio_dioLevelReadChannel+0x18>
 836:	95 95       	asr	r25
 838:	87 95       	ror	r24
 83a:	6a 95       	dec	r22
 83c:	e2 f7       	brpl	.-8      	; 0x836 <dio_dioLevelReadChannel+0x14>
 83e:	81 70       	andi	r24, 0x01	; 1
		break;
 840:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 842:	23 b3       	in	r18, 0x13	; 19
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	c9 01       	movw	r24, r18
 848:	02 c0       	rjmp	.+4      	; 0x84e <dio_dioLevelReadChannel+0x2c>
 84a:	95 95       	asr	r25
 84c:	87 95       	ror	r24
 84e:	6a 95       	dec	r22
 850:	e2 f7       	brpl	.-8      	; 0x84a <dio_dioLevelReadChannel+0x28>
 852:	81 70       	andi	r24, 0x01	; 1
		break;
 854:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 856:	20 b3       	in	r18, 0x10	; 16
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	c9 01       	movw	r24, r18
 85c:	02 c0       	rjmp	.+4      	; 0x862 <dio_dioLevelReadChannel+0x40>
 85e:	95 95       	asr	r25
 860:	87 95       	ror	r24
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <dio_dioLevelReadChannel+0x3c>
 866:	81 70       	andi	r24, 0x01	; 1
		break;
 868:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 86a:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 86c:	08 95       	ret

0000086e <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 86e:	82 30       	cpi	r24, 0x02	; 2
 870:	e1 f0       	breq	.+56     	; 0x8aa <dio_vidEnablePullUp+0x3c>
 872:	83 30       	cpi	r24, 0x03	; 3
 874:	89 f1       	breq	.+98     	; 0x8d8 <dio_vidEnablePullUp+0x6a>
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	09 f0       	breq	.+2      	; 0x87c <dio_vidEnablePullUp+0xe>
 87a:	44 c0       	rjmp	.+136    	; 0x904 <dio_vidEnablePullUp+0x96>
	{
		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 87c:	87 b3       	in	r24, 0x17	; 23
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	06 2e       	mov	r0, r22
 882:	02 c0       	rjmp	.+4      	; 0x888 <dio_vidEnablePullUp+0x1a>
 884:	95 95       	asr	r25
 886:	87 95       	ror	r24
 888:	0a 94       	dec	r0
 88a:	e2 f7       	brpl	.-8      	; 0x884 <dio_vidEnablePullUp+0x16>
 88c:	80 fd       	sbrc	r24, 0
 88e:	3a c0       	rjmp	.+116    	; 0x904 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 890:	28 b3       	in	r18, 0x18	; 24
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	ac 01       	movw	r20, r24
 898:	02 c0       	rjmp	.+4      	; 0x89e <dio_vidEnablePullUp+0x30>
 89a:	44 0f       	add	r20, r20
 89c:	55 1f       	adc	r21, r21
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <dio_vidEnablePullUp+0x2c>
 8a2:	ba 01       	movw	r22, r20
 8a4:	62 2b       	or	r22, r18
 8a6:	68 bb       	out	0x18, r22	; 24
 8a8:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 8aa:	84 b3       	in	r24, 0x14	; 20
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	06 2e       	mov	r0, r22
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <dio_vidEnablePullUp+0x48>
 8b2:	95 95       	asr	r25
 8b4:	87 95       	ror	r24
 8b6:	0a 94       	dec	r0
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <dio_vidEnablePullUp+0x44>
 8ba:	80 fd       	sbrc	r24, 0
 8bc:	23 c0       	rjmp	.+70     	; 0x904 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 8be:	25 b3       	in	r18, 0x15	; 21
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	ac 01       	movw	r20, r24
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <dio_vidEnablePullUp+0x5e>
 8c8:	44 0f       	add	r20, r20
 8ca:	55 1f       	adc	r21, r21
 8cc:	6a 95       	dec	r22
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <dio_vidEnablePullUp+0x5a>
 8d0:	ba 01       	movw	r22, r20
 8d2:	62 2b       	or	r22, r18
 8d4:	65 bb       	out	0x15, r22	; 21
 8d6:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 8d8:	81 b3       	in	r24, 0x11	; 17
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	06 2e       	mov	r0, r22
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <dio_vidEnablePullUp+0x76>
 8e0:	95 95       	asr	r25
 8e2:	87 95       	ror	r24
 8e4:	0a 94       	dec	r0
 8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <dio_vidEnablePullUp+0x72>
 8e8:	80 fd       	sbrc	r24, 0
 8ea:	0c c0       	rjmp	.+24     	; 0x904 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 8ec:	22 b3       	in	r18, 0x12	; 18
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	ac 01       	movw	r20, r24
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <dio_vidEnablePullUp+0x8c>
 8f6:	44 0f       	add	r20, r20
 8f8:	55 1f       	adc	r21, r21
 8fa:	6a 95       	dec	r22
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <dio_vidEnablePullUp+0x88>
 8fe:	ba 01       	movw	r22, r20
 900:	62 2b       	or	r22, r18
 902:	62 bb       	out	0x12, r22	; 18
 904:	08 95       	ret

00000906 <TIMER2_void_Init>:
void (*TIMER2_CTC_CallBack) (void) ;

void TIMER2_void_Init(void)
{
	#if(TIMER2_MODE == TIMER2_NORMAL)
		CLEAR_BIT(TCCR2 , 6);
 906:	85 b5       	in	r24, 0x25	; 37
 908:	8f 7b       	andi	r24, 0xBF	; 191
 90a:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 3);
 90c:	85 b5       	in	r24, 0x25	; 37
 90e:	87 7f       	andi	r24, 0xF7	; 247
 910:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 6);
		SET_BIT(TCCR2 , 3);
	#endif
	
	#if(TIMER2_PRESCALER == TIMER2_DIV_BY_1)
		SET_BIT(TCCR2 , 0);
 912:	85 b5       	in	r24, 0x25	; 37
 914:	81 60       	ori	r24, 0x01	; 1
 916:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 1);
 918:	85 b5       	in	r24, 0x25	; 37
 91a:	8d 7f       	andi	r24, 0xFD	; 253
 91c:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 2);
 91e:	85 b5       	in	r24, 0x25	; 37
 920:	8b 7f       	andi	r24, 0xFB	; 251
 922:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 2);
		
	#endif
	
	#if(TIMER2_COM_EVENT == TIMER2_NO_ACTION)
		CLEAR_BIT(TCCR2 , 4);
 924:	85 b5       	in	r24, 0x25	; 37
 926:	8f 7e       	andi	r24, 0xEF	; 239
 928:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 5);
 92a:	85 b5       	in	r24, 0x25	; 37
 92c:	8f 7d       	andi	r24, 0xDF	; 223
 92e:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 5);

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);	
 930:	89 b7       	in	r24, 0x39	; 57
 932:	8e 7f       	andi	r24, 0xFE	; 254
 934:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 936:	89 b7       	in	r24, 0x39	; 57
 938:	8d 7f       	andi	r24, 0xFD	; 253
 93a:	89 bf       	out	0x39, r24	; 57
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);	
 93c:	88 b7       	in	r24, 0x38	; 56
 93e:	81 60       	ori	r24, 0x01	; 1
 940:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 942:	88 b7       	in	r24, 0x38	; 56
 944:	82 60       	ori	r24, 0x02	; 2
 946:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT2 = 0 ;
 948:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0 ;
 94a:	13 bc       	out	0x23, r1	; 35
	
	
}
 94c:	08 95       	ret

0000094e <TIMER2_void_SetTimerReg>:

void TIMER2_void_SetTimerReg(u8 Copy_uint8Val)
{
	TCNT2 = Copy_uint8Val ;
 94e:	84 bd       	out	0x24, r24	; 36
}
 950:	08 95       	ret

00000952 <TIMER2_void_SetCompareVal>:

void TIMER2_void_SetCompareVal(u8 Copy_uint8Val)
{
	OCR2 = Copy_uint8Val ;
 952:	83 bd       	out	0x23, r24	; 35
}
 954:	08 95       	ret

00000956 <TIMER2_void_EnableOVInt>:

void TIMER2_void_EnableOVInt(void)
{
	SET_BIT(TIMSK , 6);
 956:	89 b7       	in	r24, 0x39	; 57
 958:	80 64       	ori	r24, 0x40	; 64
 95a:	89 bf       	out	0x39, r24	; 57
}
 95c:	08 95       	ret

0000095e <TIMER2_void_DisableOVInt>:

void TIMER2_void_DisableOVInt(void)
{
	CLEAR_BIT(TIMSK , 6);
 95e:	89 b7       	in	r24, 0x39	; 57
 960:	8f 7b       	andi	r24, 0xBF	; 191
 962:	89 bf       	out	0x39, r24	; 57
}
 964:	08 95       	ret

00000966 <TIMER2_void_EnableCTCInt>:

void TIMER2_void_EnableCTCInt(void)
{
	SET_BIT(TIMSK , 7);
 966:	89 b7       	in	r24, 0x39	; 57
 968:	80 68       	ori	r24, 0x80	; 128
 96a:	89 bf       	out	0x39, r24	; 57
}
 96c:	08 95       	ret

0000096e <TIMER2_void_DisableCTCInt>:

void TIMER2_void_DisableCTCInt(void)
{
	CLEAR_BIT(TIMSK , 7);
 96e:	89 b7       	in	r24, 0x39	; 57
 970:	8f 77       	andi	r24, 0x7F	; 127
 972:	89 bf       	out	0x39, r24	; 57
}
 974:	08 95       	ret

00000976 <TIMER2_void_SetOVCallBack>:

void TIMER2_void_SetOVCallBack(void (*Copy_ptr) (void) )
{
	TIMER2_OV_CallBack = Copy_ptr ;
 976:	90 93 6f 00 	sts	0x006F, r25
 97a:	80 93 6e 00 	sts	0x006E, r24
}
 97e:	08 95       	ret

00000980 <TIMER2_void_SetCTCCallBack>:

void TIMER2_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
	TIMER2_CTC_CallBack = Copy_ptr ;
 980:	90 93 6d 00 	sts	0x006D, r25
 984:	80 93 6c 00 	sts	0x006C, r24
	
}
 988:	08 95       	ret

0000098a <__vector_5>:

void __vector_5(void) __attribute__((signal , used));
void __vector_5(void)
{
 98a:	1f 92       	push	r1
 98c:	0f 92       	push	r0
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	0f 92       	push	r0
 992:	11 24       	eor	r1, r1
 994:	2f 93       	push	r18
 996:	3f 93       	push	r19
 998:	4f 93       	push	r20
 99a:	5f 93       	push	r21
 99c:	6f 93       	push	r22
 99e:	7f 93       	push	r23
 9a0:	8f 93       	push	r24
 9a2:	9f 93       	push	r25
 9a4:	af 93       	push	r26
 9a6:	bf 93       	push	r27
 9a8:	ef 93       	push	r30
 9aa:	ff 93       	push	r31
	
	TIMER2_OV_CallBack();
 9ac:	e0 91 6e 00 	lds	r30, 0x006E
 9b0:	f0 91 6f 00 	lds	r31, 0x006F
 9b4:	09 95       	icall
}
 9b6:	ff 91       	pop	r31
 9b8:	ef 91       	pop	r30
 9ba:	bf 91       	pop	r27
 9bc:	af 91       	pop	r26
 9be:	9f 91       	pop	r25
 9c0:	8f 91       	pop	r24
 9c2:	7f 91       	pop	r23
 9c4:	6f 91       	pop	r22
 9c6:	5f 91       	pop	r21
 9c8:	4f 91       	pop	r20
 9ca:	3f 91       	pop	r19
 9cc:	2f 91       	pop	r18
 9ce:	0f 90       	pop	r0
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	0f 90       	pop	r0
 9d4:	1f 90       	pop	r1
 9d6:	18 95       	reti

000009d8 <__vector_4>:

void __vector_4(void) __attribute__((signal , used));
void __vector_4(void)
{
 9d8:	1f 92       	push	r1
 9da:	0f 92       	push	r0
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	0f 92       	push	r0
 9e0:	11 24       	eor	r1, r1
 9e2:	2f 93       	push	r18
 9e4:	3f 93       	push	r19
 9e6:	4f 93       	push	r20
 9e8:	5f 93       	push	r21
 9ea:	6f 93       	push	r22
 9ec:	7f 93       	push	r23
 9ee:	8f 93       	push	r24
 9f0:	9f 93       	push	r25
 9f2:	af 93       	push	r26
 9f4:	bf 93       	push	r27
 9f6:	ef 93       	push	r30
 9f8:	ff 93       	push	r31
	
	TIMER2_CTC_CallBack();
 9fa:	e0 91 6c 00 	lds	r30, 0x006C
 9fe:	f0 91 6d 00 	lds	r31, 0x006D
 a02:	09 95       	icall
}
 a04:	ff 91       	pop	r31
 a06:	ef 91       	pop	r30
 a08:	bf 91       	pop	r27
 a0a:	af 91       	pop	r26
 a0c:	9f 91       	pop	r25
 a0e:	8f 91       	pop	r24
 a10:	7f 91       	pop	r23
 a12:	6f 91       	pop	r22
 a14:	5f 91       	pop	r21
 a16:	4f 91       	pop	r20
 a18:	3f 91       	pop	r19
 a1a:	2f 91       	pop	r18
 a1c:	0f 90       	pop	r0
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	0f 90       	pop	r0
 a22:	1f 90       	pop	r1
 a24:	18 95       	reti

00000a26 <_exit>:
 a26:	f8 94       	cli

00000a28 <__stop_program>:
 a28:	ff cf       	rjmp	.-2      	; 0xa28 <__stop_program>
