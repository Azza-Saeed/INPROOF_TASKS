
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000076e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbc  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000421  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a7  00000000  00000000  00002cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	4d c3       	rjmp	.+1690   	; 0x6b4 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ed       	ldi	r30, 0xDA	; 218
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	51 d2       	rcall	.+1186   	; 0x4fc <main>
  5a:	3d c3       	rjmp	.+1658   	; 0x6d6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  5e:	81 30       	cpi	r24, 0x01	; 1
  60:	31 f1       	breq	.+76     	; 0xae <dio_vidConfigChannel+0x50>
  62:	81 30       	cpi	r24, 0x01	; 1
  64:	38 f0       	brcs	.+14     	; 0x74 <dio_vidConfigChannel+0x16>
  66:	82 30       	cpi	r24, 0x02	; 2
  68:	09 f4       	brne	.+2      	; 0x6c <dio_vidConfigChannel+0xe>
  6a:	3e c0       	rjmp	.+124    	; 0xe8 <dio_vidConfigChannel+0x8a>
  6c:	83 30       	cpi	r24, 0x03	; 3
  6e:	09 f0       	breq	.+2      	; 0x72 <dio_vidConfigChannel+0x14>
  70:	74 c0       	rjmp	.+232    	; 0x15a <dio_vidConfigChannel+0xfc>
  72:	57 c0       	rjmp	.+174    	; 0x122 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  74:	41 30       	cpi	r20, 0x01	; 1
  76:	69 f4       	brne	.+26     	; 0x92 <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  78:	2a b3       	in	r18, 0x1a	; 26
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	ac 01       	movw	r20, r24
  80:	02 c0       	rjmp	.+4      	; 0x86 <dio_vidConfigChannel+0x28>
  82:	44 0f       	add	r20, r20
  84:	55 1f       	adc	r21, r21
  86:	6a 95       	dec	r22
  88:	e2 f7       	brpl	.-8      	; 0x82 <dio_vidConfigChannel+0x24>
  8a:	ba 01       	movw	r22, r20
  8c:	62 2b       	or	r22, r18
  8e:	6a bb       	out	0x1a, r22	; 26
  90:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	ac 01       	movw	r20, r24
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <dio_vidConfigChannel+0x42>
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <dio_vidConfigChannel+0x3e>
  a4:	ba 01       	movw	r22, r20
  a6:	60 95       	com	r22
  a8:	62 23       	and	r22, r18
  aa:	6a bb       	out	0x1a, r22	; 26
  ac:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  ae:	41 30       	cpi	r20, 0x01	; 1
  b0:	69 f4       	brne	.+26     	; 0xcc <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	ac 01       	movw	r20, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_vidConfigChannel+0x62>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_vidConfigChannel+0x5e>
  c4:	ba 01       	movw	r22, r20
  c6:	62 2b       	or	r22, r18
  c8:	67 bb       	out	0x17, r22	; 23
  ca:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  cc:	27 b3       	in	r18, 0x17	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	ac 01       	movw	r20, r24
  d4:	02 c0       	rjmp	.+4      	; 0xda <dio_vidConfigChannel+0x7c>
  d6:	44 0f       	add	r20, r20
  d8:	55 1f       	adc	r21, r21
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <dio_vidConfigChannel+0x78>
  de:	ba 01       	movw	r22, r20
  e0:	60 95       	com	r22
  e2:	62 23       	and	r22, r18
  e4:	67 bb       	out	0x17, r22	; 23
  e6:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  ec:	24 b3       	in	r18, 0x14	; 20
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	ac 01       	movw	r20, r24
  f4:	02 c0       	rjmp	.+4      	; 0xfa <dio_vidConfigChannel+0x9c>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <dio_vidConfigChannel+0x98>
  fe:	ba 01       	movw	r22, r20
 100:	62 2b       	or	r22, r18
 102:	64 bb       	out	0x14, r22	; 20
 104:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 106:	24 b3       	in	r18, 0x14	; 20
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	ac 01       	movw	r20, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <dio_vidConfigChannel+0xb6>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <dio_vidConfigChannel+0xb2>
 118:	ba 01       	movw	r22, r20
 11a:	60 95       	com	r22
 11c:	62 23       	and	r22, r18
 11e:	64 bb       	out	0x14, r22	; 20
 120:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	69 f4       	brne	.+26     	; 0x140 <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 126:	21 b3       	in	r18, 0x11	; 17
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	ac 01       	movw	r20, r24
 12e:	02 c0       	rjmp	.+4      	; 0x134 <dio_vidConfigChannel+0xd6>
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <dio_vidConfigChannel+0xd2>
 138:	ba 01       	movw	r22, r20
 13a:	62 2b       	or	r22, r18
 13c:	61 bb       	out	0x11, r22	; 17
 13e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	ac 01       	movw	r20, r24
 148:	02 c0       	rjmp	.+4      	; 0x14e <dio_vidConfigChannel+0xf0>
 14a:	44 0f       	add	r20, r20
 14c:	55 1f       	adc	r21, r21
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <dio_vidConfigChannel+0xec>
 152:	ba 01       	movw	r22, r20
 154:	60 95       	com	r22
 156:	62 23       	and	r22, r18
 158:	61 bb       	out	0x11, r22	; 17
 15a:	08 95       	ret

0000015c <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	49 f0       	breq	.+18     	; 0x172 <dio_vidConfigPort+0x16>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	28 f0       	brcs	.+10     	; 0x16e <dio_vidConfigPort+0x12>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	39 f0       	breq	.+14     	; 0x176 <dio_vidConfigPort+0x1a>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	41 f4       	brne	.+16     	; 0x17c <dio_vidConfigPort+0x20>
 16c:	06 c0       	rjmp	.+12     	; 0x17a <dio_vidConfigPort+0x1e>
	{
		case DIO_PORTA: DIO_DDRA_REG = direction;	break;
 16e:	6a bb       	out	0x1a, r22	; 26
 170:	08 95       	ret
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 172:	67 bb       	out	0x17, r22	; 23
 174:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 17a:	61 bb       	out	0x11, r22	; 17
 17c:	08 95       	ret

0000017e <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	49 f0       	breq	.+18     	; 0x194 <dio_vidSetPortValue+0x16>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	28 f0       	brcs	.+10     	; 0x190 <dio_vidSetPortValue+0x12>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	39 f0       	breq	.+14     	; 0x198 <dio_vidSetPortValue+0x1a>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	41 f4       	brne	.+16     	; 0x19e <dio_vidSetPortValue+0x20>
 18e:	06 c0       	rjmp	.+12     	; 0x19c <dio_vidSetPortValue+0x1e>
	{
		case DIO_PORTA: DIO_PORTA_REG = value;	break;
 190:	6b bb       	out	0x1b, r22	; 27
 192:	08 95       	ret
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 194:	68 bb       	out	0x18, r22	; 24
 196:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 198:	65 bb       	out	0x15, r22	; 21
 19a:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 19c:	62 bb       	out	0x12, r22	; 18
 19e:	08 95       	ret

000001a0 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	31 f1       	breq	.+76     	; 0x1f0 <dio_vidWriteChannel+0x50>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	38 f0       	brcs	.+14     	; 0x1b6 <dio_vidWriteChannel+0x16>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	09 f4       	brne	.+2      	; 0x1ae <dio_vidWriteChannel+0xe>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <dio_vidWriteChannel+0x8a>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <dio_vidWriteChannel+0x14>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <dio_vidWriteChannel+0xfc>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 1b6:	44 23       	and	r20, r20
 1b8:	71 f4       	brne	.+28     	; 0x1d6 <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <dio_vidWriteChannel+0x28>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <dio_vidWriteChannel+0x24>
 1cc:	ba 01       	movw	r22, r20
 1ce:	60 95       	com	r22
 1d0:	62 23       	and	r22, r18
 1d2:	6b bb       	out	0x1b, r22	; 27
 1d4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 1d6:	2b b3       	in	r18, 0x1b	; 27
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ac 01       	movw	r20, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <dio_vidWriteChannel+0x44>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <dio_vidWriteChannel+0x40>
 1e8:	ba 01       	movw	r22, r20
 1ea:	62 2b       	or	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 1f0:	44 23       	and	r20, r20
 1f2:	71 f4       	brne	.+28     	; 0x210 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <dio_vidWriteChannel+0x62>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <dio_vidWriteChannel+0x5e>
 206:	ba 01       	movw	r22, r20
 208:	60 95       	com	r22
 20a:	62 23       	and	r22, r18
 20c:	68 bb       	out	0x18, r22	; 24
 20e:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 210:	28 b3       	in	r18, 0x18	; 24
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	ac 01       	movw	r20, r24
 218:	02 c0       	rjmp	.+4      	; 0x21e <dio_vidWriteChannel+0x7e>
 21a:	44 0f       	add	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <dio_vidWriteChannel+0x7a>
 222:	ba 01       	movw	r22, r20
 224:	62 2b       	or	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 22a:	44 23       	and	r20, r20
 22c:	71 f4       	brne	.+28     	; 0x24a <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <dio_vidWriteChannel+0x9c>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <dio_vidWriteChannel+0x98>
 240:	ba 01       	movw	r22, r20
 242:	60 95       	com	r22
 244:	62 23       	and	r22, r18
 246:	65 bb       	out	0x15, r22	; 21
 248:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 24a:	25 b3       	in	r18, 0x15	; 21
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	ac 01       	movw	r20, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <dio_vidWriteChannel+0xb8>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <dio_vidWriteChannel+0xb4>
 25c:	ba 01       	movw	r22, r20
 25e:	62 2b       	or	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 264:	44 23       	and	r20, r20
 266:	71 f4       	brne	.+28     	; 0x284 <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <dio_vidWriteChannel+0xd6>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <dio_vidWriteChannel+0xd2>
 27a:	ba 01       	movw	r22, r20
 27c:	60 95       	com	r22
 27e:	62 23       	and	r22, r18
 280:	62 bb       	out	0x12, r22	; 18
 282:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	ac 01       	movw	r20, r24
 28c:	02 c0       	rjmp	.+4      	; 0x292 <dio_vidWriteChannel+0xf2>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <dio_vidWriteChannel+0xee>
 296:	ba 01       	movw	r22, r20
 298:	62 2b       	or	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	c1 f0       	breq	.+48     	; 0x2d2 <dio_vidWriteChannelGroup+0x34>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	30 f0       	brcs	.+12     	; 0x2b2 <dio_vidWriteChannelGroup+0x14>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	19 f1       	breq	.+70     	; 0x2f0 <dio_vidWriteChannelGroup+0x52>
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <dio_vidWriteChannelGroup+0x12>
 2ae:	3e c0       	rjmp	.+124    	; 0x32c <dio_vidWriteChannelGroup+0x8e>
 2b0:	2e c0       	rjmp	.+92     	; 0x30e <dio_vidWriteChannelGroup+0x70>
	{
		case DIO_PORTA:
			DIO_PORTA_REG &= ~mask;
 2b2:	8b b3       	in	r24, 0x1b	; 27
 2b4:	94 2f       	mov	r25, r20
 2b6:	90 95       	com	r25
 2b8:	89 23       	and	r24, r25
 2ba:	8b bb       	out	0x1b, r24	; 27
			DIO_PORTA_REG = (value<<pos) & mask;
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	cb 01       	movw	r24, r22
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_vidWriteChannelGroup+0x28>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	2a 95       	dec	r18
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_vidWriteChannelGroup+0x24>
 2ca:	9c 01       	movw	r18, r24
 2cc:	24 23       	and	r18, r20
 2ce:	2b bb       	out	0x1b, r18	; 27
		break;
 2d0:	08 95       	ret

		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 2d2:	88 b3       	in	r24, 0x18	; 24
 2d4:	94 2f       	mov	r25, r20
 2d6:	90 95       	com	r25
 2d8:	89 23       	and	r24, r25
 2da:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	fb 01       	movw	r30, r22
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <dio_vidWriteChannelGroup+0x48>
 2e2:	ee 0f       	add	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	2a 95       	dec	r18
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <dio_vidWriteChannelGroup+0x44>
 2ea:	e4 23       	and	r30, r20
 2ec:	e8 bb       	out	0x18, r30	; 24
		break;
 2ee:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	94 2f       	mov	r25, r20
 2f4:	90 95       	com	r25
 2f6:	89 23       	and	r24, r25
 2f8:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	cb 01       	movw	r24, r22
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <dio_vidWriteChannelGroup+0x66>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	2a 95       	dec	r18
 306:	e2 f7       	brpl	.-8      	; 0x300 <dio_vidWriteChannelGroup+0x62>
 308:	84 23       	and	r24, r20
 30a:	85 bb       	out	0x15, r24	; 21
		break;
 30c:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 30e:	82 b3       	in	r24, 0x12	; 18
 310:	94 2f       	mov	r25, r20
 312:	90 95       	com	r25
 314:	89 23       	and	r24, r25
 316:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	cb 01       	movw	r24, r22
 31c:	02 c0       	rjmp	.+4      	; 0x322 <dio_vidWriteChannelGroup+0x84>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	2a 95       	dec	r18
 324:	e2 f7       	brpl	.-8      	; 0x31e <dio_vidWriteChannelGroup+0x80>
 326:	9c 01       	movw	r18, r24
 328:	24 23       	and	r18, r20
 32a:	22 bb       	out	0x12, r18	; 18
 32c:	08 95       	ret

0000032e <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 32e:	68 23       	and	r22, r24
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	cb 01       	movw	r24, r22
 334:	02 c0       	rjmp	.+4      	; 0x33a <dio_vidReadChannelGroup+0xc>
 336:	95 95       	asr	r25
 338:	87 95       	ror	r24
 33a:	4a 95       	dec	r20
 33c:	e2 f7       	brpl	.-8      	; 0x336 <dio_vidReadChannelGroup+0x8>
}
 33e:	08 95       	ret

00000340 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	a1 f0       	breq	.+40     	; 0x36c <dio_vidFlipChannel+0x2c>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	28 f0       	brcs	.+10     	; 0x352 <dio_vidFlipChannel+0x12>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	e9 f0       	breq	.+58     	; 0x386 <dio_vidFlipChannel+0x46>
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	a1 f5       	brne	.+104    	; 0x3b8 <dio_vidFlipChannel+0x78>
 350:	27 c0       	rjmp	.+78     	; 0x3a0 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 352:	2b b3       	in	r18, 0x1b	; 27
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	ac 01       	movw	r20, r24
 35a:	02 c0       	rjmp	.+4      	; 0x360 <dio_vidFlipChannel+0x20>
 35c:	44 0f       	add	r20, r20
 35e:	55 1f       	adc	r21, r21
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <dio_vidFlipChannel+0x1c>
 364:	ba 01       	movw	r22, r20
 366:	62 27       	eor	r22, r18
 368:	6b bb       	out	0x1b, r22	; 27
		break;
 36a:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 36c:	28 b3       	in	r18, 0x18	; 24
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	ac 01       	movw	r20, r24
 374:	02 c0       	rjmp	.+4      	; 0x37a <dio_vidFlipChannel+0x3a>
 376:	44 0f       	add	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <dio_vidFlipChannel+0x36>
 37e:	ba 01       	movw	r22, r20
 380:	62 27       	eor	r22, r18
 382:	68 bb       	out	0x18, r22	; 24
		break;
 384:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 386:	25 b3       	in	r18, 0x15	; 21
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ac 01       	movw	r20, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <dio_vidFlipChannel+0x54>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <dio_vidFlipChannel+0x50>
 398:	ba 01       	movw	r22, r20
 39a:	62 27       	eor	r22, r18
 39c:	65 bb       	out	0x15, r22	; 21
		break;
 39e:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 3a0:	22 b3       	in	r18, 0x12	; 18
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	ac 01       	movw	r20, r24
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <dio_vidFlipChannel+0x6e>
 3aa:	44 0f       	add	r20, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <dio_vidFlipChannel+0x6a>
 3b2:	ba 01       	movw	r22, r20
 3b4:	62 27       	eor	r22, r18
 3b6:	62 bb       	out	0x12, r22	; 18
 3b8:	08 95       	ret

000003ba <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	89 f0       	breq	.+34     	; 0x3e0 <dio_dioLevelReadChannel+0x26>
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	28 f0       	brcs	.+10     	; 0x3cc <dio_dioLevelReadChannel+0x12>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	b9 f0       	breq	.+46     	; 0x3f4 <dio_dioLevelReadChannel+0x3a>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	49 f5       	brne	.+82     	; 0x41c <dio_dioLevelReadChannel+0x62>
 3ca:	1e c0       	rjmp	.+60     	; 0x408 <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 3cc:	29 b3       	in	r18, 0x19	; 25
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	c9 01       	movw	r24, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <dio_dioLevelReadChannel+0x1e>
 3d4:	95 95       	asr	r25
 3d6:	87 95       	ror	r24
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <dio_dioLevelReadChannel+0x1a>
 3dc:	81 70       	andi	r24, 0x01	; 1
		break;
 3de:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 3e0:	26 b3       	in	r18, 0x16	; 22
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	c9 01       	movw	r24, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <dio_dioLevelReadChannel+0x32>
 3e8:	95 95       	asr	r25
 3ea:	87 95       	ror	r24
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <dio_dioLevelReadChannel+0x2e>
 3f0:	81 70       	andi	r24, 0x01	; 1
		break;
 3f2:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 3f4:	23 b3       	in	r18, 0x13	; 19
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	c9 01       	movw	r24, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <dio_dioLevelReadChannel+0x46>
 3fc:	95 95       	asr	r25
 3fe:	87 95       	ror	r24
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <dio_dioLevelReadChannel+0x42>
 404:	81 70       	andi	r24, 0x01	; 1
		break;
 406:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 408:	20 b3       	in	r18, 0x10	; 16
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	c9 01       	movw	r24, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <dio_dioLevelReadChannel+0x5a>
 410:	95 95       	asr	r25
 412:	87 95       	ror	r24
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <dio_dioLevelReadChannel+0x56>
 418:	81 70       	andi	r24, 0x01	; 1
		break;
 41a:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 41c:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 41e:	08 95       	ret

00000420 <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	f9 f0       	breq	.+62     	; 0x462 <__stack+0x3>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	30 f0       	brcs	.+12     	; 0x434 <dio_vidEnablePullUp+0x14>
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	91 f1       	breq	.+100    	; 0x490 <__stack+0x31>
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	09 f0       	breq	.+2      	; 0x432 <dio_vidEnablePullUp+0x12>
 430:	5c c0       	rjmp	.+184    	; 0x4ea <__stack+0x8b>
 432:	45 c0       	rjmp	.+138    	; 0x4be <__stack+0x5f>
	{
		case DIO_PORTA:
		if(CHECK_BIT(DIO_DDRA_REG,channel) == INPUT)
 434:	8a b3       	in	r24, 0x1a	; 26
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	06 2e       	mov	r0, r22
 43a:	02 c0       	rjmp	.+4      	; 0x440 <dio_vidEnablePullUp+0x20>
 43c:	95 95       	asr	r25
 43e:	87 95       	ror	r24
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <dio_vidEnablePullUp+0x1c>
 444:	80 fd       	sbrc	r24, 0
 446:	51 c0       	rjmp	.+162    	; 0x4ea <__stack+0x8b>
		{
			SET_BIT(DIO_PORTA_REG,channel);	
 448:	2b b3       	in	r18, 0x1b	; 27
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	ac 01       	movw	r20, r24
 450:	02 c0       	rjmp	.+4      	; 0x456 <dio_vidEnablePullUp+0x36>
 452:	44 0f       	add	r20, r20
 454:	55 1f       	adc	r21, r21
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <dio_vidEnablePullUp+0x32>
 45a:	ba 01       	movw	r22, r20
 45c:	62 2b       	or	r22, r18
 45e:	6b bb       	out	0x1b, r22	; 27
 460:	08 95       	ret
		}
		break;

		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 462:	87 b3       	in	r24, 0x17	; 23
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	06 2e       	mov	r0, r22
 468:	02 c0       	rjmp	.+4      	; 0x46e <__stack+0xf>
 46a:	95 95       	asr	r25
 46c:	87 95       	ror	r24
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <__stack+0xb>
 472:	80 fd       	sbrc	r24, 0
 474:	3a c0       	rjmp	.+116    	; 0x4ea <__stack+0x8b>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 476:	28 b3       	in	r18, 0x18	; 24
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	ac 01       	movw	r20, r24
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__stack+0x25>
 480:	44 0f       	add	r20, r20
 482:	55 1f       	adc	r21, r21
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__stack+0x21>
 488:	ba 01       	movw	r22, r20
 48a:	62 2b       	or	r22, r18
 48c:	68 bb       	out	0x18, r22	; 24
 48e:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 490:	84 b3       	in	r24, 0x14	; 20
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	06 2e       	mov	r0, r22
 496:	02 c0       	rjmp	.+4      	; 0x49c <__stack+0x3d>
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__stack+0x39>
 4a0:	80 fd       	sbrc	r24, 0
 4a2:	23 c0       	rjmp	.+70     	; 0x4ea <__stack+0x8b>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 4a4:	25 b3       	in	r18, 0x15	; 21
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	ac 01       	movw	r20, r24
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	44 0f       	add	r20, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__stack+0x4f>
 4b6:	ba 01       	movw	r22, r20
 4b8:	62 2b       	or	r22, r18
 4ba:	65 bb       	out	0x15, r22	; 21
 4bc:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 4be:	81 b3       	in	r24, 0x11	; 17
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	06 2e       	mov	r0, r22
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__stack+0x6b>
 4c6:	95 95       	asr	r25
 4c8:	87 95       	ror	r24
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__stack+0x67>
 4ce:	80 fd       	sbrc	r24, 0
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <__stack+0x8b>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 4d2:	22 b3       	in	r18, 0x12	; 18
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	ac 01       	movw	r20, r24
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__stack+0x81>
 4dc:	44 0f       	add	r20, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__stack+0x7d>
 4e4:	ba 01       	movw	r22, r20
 4e6:	62 2b       	or	r22, r18
 4e8:	62 bb       	out	0x12, r22	; 18
 4ea:	08 95       	ret

000004ec <GIE_voidGlobalInterruptEnable>:

#define SREG    *((volatile u8*)0x5F)

void GIE_voidGlobalInterruptEnable(void)
{
	SET_BIT(SREG,7);
 4ec:	8f b7       	in	r24, 0x3f	; 63
 4ee:	80 68       	ori	r24, 0x80	; 128
 4f0:	8f bf       	out	0x3f, r24	; 63
}
 4f2:	08 95       	ret

000004f4 <GIE_voidGlobalInterruptDisable>:

void GIE_voidGlobalInterruptDisable(void)
{
	CLEAR_BIT(SREG,7);
 4f4:	8f b7       	in	r24, 0x3f	; 63
 4f6:	8f 77       	andi	r24, 0x7F	; 127
 4f8:	8f bf       	out	0x3f, r24	; 63
}
 4fa:	08 95       	ret

000004fc <main>:
#include "GIE.h"
#include "SPI.h"


int main(void)
{
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	00 d0       	rcall	.+0      	; 0x502 <main+0x6>
 502:	00 d0       	rcall	.+0      	; 0x504 <main+0x8>
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
	u8 u8Copy_Data=0xFa;
	u8 recieved_data=0;
	
	SPI Slave_Obj={ SPI_SLAVE,SPI_SAMPLE_RISING,SPI_PRESCALE_128,SPI_DATAORDER_LSB};
 508:	19 82       	std	Y+1, r1	; 0x01
 50a:	1a 82       	std	Y+2, r1	; 0x02
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	8b 83       	std	Y+3, r24	; 0x03
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	8c 83       	std	Y+4, r24	; 0x04
		
		SPI_VoidInit(&Slave_Obj);
 514:	ce 01       	movw	r24, r28
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	5b d0       	rcall	.+182    	; 0x5d0 <SPI_VoidInit>
		//SPI_voidInterruptEnable();
		//GIE_voidGlobalInterruptEnable();
		dio_vidConfigChannel(DIO_PORTC,DIO_PIN0,OUTPUT);
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	9e dd       	rcall	.-1220   	; 0x5e <dio_vidConfigChannel>
		
    while(1)
    {
        recieved_data = SPI_u8SendRecData(u8Copy_Data);
 522:	8a ef       	ldi	r24, 0xFA	; 250
 524:	a8 d0       	rcall	.+336    	; 0x676 <SPI_u8SendRecData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	31 ee       	ldi	r19, 0xE1	; 225
 52a:	44 e0       	ldi	r20, 0x04	; 4
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	30 40       	sbci	r19, 0x00	; 0
 530:	40 40       	sbci	r20, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <main+0x30>
 534:	00 c0       	rjmp	.+0      	; 0x536 <main+0x3a>
 536:	00 00       	nop
		_delay_ms(100);
		
		if( recieved_data == 0xDF )
 538:	8f 3d       	cpi	r24, 0xDF	; 223
 53a:	99 f7       	brne	.-26     	; 0x522 <main+0x26>
		{
			dio_vidFlipChannel(DIO_PORTC,DIO_PIN0);
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	ff de       	rcall	.-514    	; 0x340 <dio_vidFlipChannel>
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	99 e6       	ldi	r25, 0x69	; 105
 546:	a8 e1       	ldi	r26, 0x18	; 24
 548:	81 50       	subi	r24, 0x01	; 1
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	a0 40       	sbci	r26, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <main+0x4c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <main+0x56>
 552:	00 00       	nop
 554:	e6 cf       	rjmp	.-52     	; 0x522 <main+0x26>

00000556 <SPI_u8Enable>:
}


u8 SPI_u8Enable()
{
	SET_BIT(SPCR, SPCR_SPE);
 556:	6e 9a       	sbi	0x0d, 6	; 13

	return 0;
}
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	08 95       	ret

0000055c <SPI_u8Disable>:

u8 SPI_u8Disable()
{
	CLEAR_BIT(SPCR, SPCR_SPE);
 55c:	6e 98       	cbi	0x0d, 6	; 13
	return 0;
}
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret

00000562 <SPI_u8MasterSlaveSelect>:

u8 SPI_u8MasterSlaveSelect(u8 Copy_u8Select)
{
	if(Copy_u8Select == SPI_MASTER)
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	11 f4       	brne	.+4      	; 0x56a <SPI_u8MasterSlaveSelect+0x8>
	{
		SET_BIT(SPCR, SPCR_MSTR);
 566:	6c 9a       	sbi	0x0d, 4	; 13
 568:	03 c0       	rjmp	.+6      	; 0x570 <SPI_u8MasterSlaveSelect+0xe>
	}
	else if(Copy_u8Select == SPI_SLAVE)
 56a:	88 23       	and	r24, r24
 56c:	09 f4       	brne	.+2      	; 0x570 <SPI_u8MasterSlaveSelect+0xe>
	{
		CLEAR_BIT(SPCR, SPCR_MSTR);
 56e:	6c 98       	cbi	0x0d, 4	; 13
	}

	return 0;
}
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	08 95       	ret

00000574 <SPI_u8CLKPolPhase>:

u8 SPI_u8CLKPolPhase(u8 Copy_u8PolPhase)
{
	switch(Copy_u8PolPhase)
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	51 f0       	breq	.+20     	; 0x58c <SPI_u8CLKPolPhase+0x18>
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	28 f0       	brcs	.+10     	; 0x586 <SPI_u8CLKPolPhase+0x12>
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	49 f0       	breq	.+18     	; 0x592 <SPI_u8CLKPolPhase+0x1e>
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	61 f4       	brne	.+24     	; 0x59c <SPI_u8CLKPolPhase+0x28>
 584:	09 c0       	rjmp	.+18     	; 0x598 <SPI_u8CLKPolPhase+0x24>
	{
		case SPI_SAMPLE_RISING:		CLEAR_BIT(SPCR, SPCR_CPOL);	CLEAR_BIT(SPCR, SPCR_CPHA);	break;
 586:	6b 98       	cbi	0x0d, 3	; 13
 588:	6a 98       	cbi	0x0d, 2	; 13
 58a:	08 c0       	rjmp	.+16     	; 0x59c <SPI_u8CLKPolPhase+0x28>
		case SPI_SETUP_RISING:		CLEAR_BIT(SPCR, SPCR_CPOL);	SET_BIT(SPCR, SPCR_CPHA);	break;
 58c:	6b 98       	cbi	0x0d, 3	; 13
 58e:	6a 9a       	sbi	0x0d, 2	; 13
 590:	05 c0       	rjmp	.+10     	; 0x59c <SPI_u8CLKPolPhase+0x28>
		case SPI_SAMPLE_FALLING:	SET_BIT(SPCR, SPCR_CPOL);	CLEAR_BIT(SPCR, SPCR_CPHA);	break;
 592:	6b 9a       	sbi	0x0d, 3	; 13
 594:	6a 98       	cbi	0x0d, 2	; 13
 596:	02 c0       	rjmp	.+4      	; 0x59c <SPI_u8CLKPolPhase+0x28>
		case SPI_SETUP_FALLING:		SET_BIT(SPCR, SPCR_CPOL);	SET_BIT(SPCR, SPCR_CPHA);	break;
 598:	6b 9a       	sbi	0x0d, 3	; 13
 59a:	6a 9a       	sbi	0x0d, 2	; 13
	}
	return 0;
}
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	08 95       	ret

000005a0 <SPI_u8PreScaler>:

u8 SPI_u8PreScaler(u8 Copy_u8Scale)
{
	//initialize clock rate bits with 0
	SPCR &= SPI_PRESCAL_MASK;
 5a0:	9d b1       	in	r25, 0x0d	; 13
 5a2:	9c 7f       	andi	r25, 0xFC	; 252
 5a4:	9d b9       	out	0x0d, r25	; 13
	//check for clock rate bits only (bit 1:0)
	SPCR|= (Copy_u8Scale<<6)>>6;
 5a6:	9d b1       	in	r25, 0x0d	; 13
 5a8:	98 2b       	or	r25, r24
 5aa:	9d b9       	out	0x0d, r25	; 13

	//enable double speed mode if needed
	if(CHECK_BIT(Copy_u8Scale, 2) == 0)	//(for 4, 16, 64, 128)
 5ac:	86 95       	lsr	r24
 5ae:	86 95       	lsr	r24
 5b0:	80 fd       	sbrc	r24, 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <SPI_u8PreScaler+0x18>
	{
		CLEAR_BIT(SPSR, SPSR_SPI2X);
 5b4:	70 98       	cbi	0x0e, 0	; 14
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <SPI_u8PreScaler+0x1a>
	}
	else if(CHECK_BIT(Copy_u8Scale, 2) == 1)	//(for 2, 8, 32)
	{
		SET_BIT(SPSR, SPSR_SPI2X);
 5b8:	70 9a       	sbi	0x0e, 0	; 14
	}
	return 0;
}
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	08 95       	ret

000005be <SPI_u8DataOrder>:


u8 SPI_u8DataOrder(u8 Copy_u8Dataorder)
{
	if(Copy_u8Dataorder == SPI_DATAORDER_LSB)
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <SPI_u8DataOrder+0x8>
	{
		SET_BIT(SPCR, SPCR_DORD);
 5c2:	6d 9a       	sbi	0x0d, 5	; 13
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <SPI_u8DataOrder+0xe>
	}
	else if(Copy_u8Dataorder == SPI_DATAORDER_MSB)
 5c6:	88 23       	and	r24, r24
 5c8:	09 f4       	brne	.+2      	; 0x5cc <SPI_u8DataOrder+0xe>
	{
		CLEAR_BIT(SPCR, SPCR_DORD);
 5ca:	6d 98       	cbi	0x0d, 5	; 13
	}
	return 0;
}
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <SPI_VoidInit>:




void SPI_VoidInit(SPI* Copy_spi)
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	ec 01       	movw	r28, r24
	// Select Master or slave
	SPI_u8MasterSlaveSelect(Copy_spi->role);
 5d6:	88 81       	ld	r24, Y
 5d8:	c4 df       	rcall	.-120    	; 0x562 <SPI_u8MasterSlaveSelect>
	if(Copy_spi->role == SPI_MASTER)
 5da:	88 81       	ld	r24, Y
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	a9 f4       	brne	.+42     	; 0x60a <SPI_VoidInit+0x3a>
	{
		dio_vidConfigChannel(DIO_PORTB, DIO_PIN5, OUTPUT);	//MOSI
 5e0:	65 e0       	ldi	r22, 0x05	; 5
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	3c dd       	rcall	.-1416   	; 0x5e <dio_vidConfigChannel>
		dio_vidConfigChannel(DIO_PORTB, DIO_PIN6, INPUT);	//MISO
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	66 e0       	ldi	r22, 0x06	; 6
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	38 dd       	rcall	.-1424   	; 0x5e <dio_vidConfigChannel>
		dio_vidConfigChannel(DIO_PORTB, DIO_PIN7, OUTPUT);	//SCLK
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	67 e0       	ldi	r22, 0x07	; 7
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	34 dd       	rcall	.-1432   	; 0x5e <dio_vidConfigChannel>
		dio_vidConfigChannel(DIO_PORTB, DIO_PIN4, INPUT);	//SS'
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	64 e0       	ldi	r22, 0x04	; 4
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	30 dd       	rcall	.-1440   	; 0x5e <dio_vidConfigChannel>

		dio_vidEnablePullUp(DIO_PORTB, DIO_PIN4);
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	64 e0       	ldi	r22, 0x04	; 4
 602:	0e df       	rcall	.-484    	; 0x420 <dio_vidEnablePullUp>
		//select CLK rate
		SPI_u8PreScaler(Copy_spi -> Prescaler);
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	cc df       	rcall	.-104    	; 0x5a0 <SPI_u8PreScaler>
 608:	12 c0       	rjmp	.+36     	; 0x62e <SPI_VoidInit+0x5e>
	}
	else if(Copy_spi->role == SPI_SLAVE)
 60a:	88 23       	and	r24, r24
 60c:	81 f4       	brne	.+32     	; 0x62e <SPI_VoidInit+0x5e>
	{

		dio_vidConfigChannel(DIO_PORTB, DIO_PIN5, INPUT);	//MOSI
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	65 e0       	ldi	r22, 0x05	; 5
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	24 dd       	rcall	.-1464   	; 0x5e <dio_vidConfigChannel>

		dio_vidConfigChannel(DIO_PORTB, DIO_PIN6, OUTPUT);	//MISO
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	66 e0       	ldi	r22, 0x06	; 6
 61a:	41 e0       	ldi	r20, 0x01	; 1
 61c:	20 dd       	rcall	.-1472   	; 0x5e <dio_vidConfigChannel>
		dio_vidConfigChannel(DIO_PORTB, DIO_PIN7, INPUT);	//SCLK
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	67 e0       	ldi	r22, 0x07	; 7
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	1c dd       	rcall	.-1480   	; 0x5e <dio_vidConfigChannel>
		dio_vidConfigChannel(DIO_PORTB, DIO_PIN4, INPUT);	//SS'
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	64 e0       	ldi	r22, 0x04	; 4
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	18 dd       	rcall	.-1488   	; 0x5e <dio_vidConfigChannel>
		//DIO_u8ActivatePinPullup(DIO_u8PORTB, DIO_u8PIN4);
	}

	//select CLK polarity and phase
	SPI_u8CLKPolPhase(Copy_spi -> CLKPolPhase);
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	a1 df       	rcall	.-190    	; 0x574 <SPI_u8CLKPolPhase>

	//select Data order
	SPI_u8DataOrder(Copy_spi -> DataOrder);
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	c4 df       	rcall	.-120    	; 0x5be <SPI_u8DataOrder>

	SPI_u8Enable();
 636:	8f df       	rcall	.-226    	; 0x556 <SPI_u8Enable>

}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret

0000063e <SPI_u8SelectSlave>:
	}
	return 0;
}

u8 SPI_u8SelectSlave(u8 Coy_u8Port, u8 Copy_u8Pin)
{
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	d8 2f       	mov	r29, r24
 644:	c6 2f       	mov	r28, r22
	dio_vidConfigChannel(Coy_u8Port, Copy_u8Pin, OUTPUT);
 646:	41 e0       	ldi	r20, 0x01	; 1
 648:	0a dd       	rcall	.-1516   	; 0x5e <dio_vidConfigChannel>
	dio_vidWriteChannel(Coy_u8Port, Copy_u8Pin, STD_LOW);
 64a:	8d 2f       	mov	r24, r29
 64c:	6c 2f       	mov	r22, r28
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	a7 dd       	rcall	.-1202   	; 0x1a0 <dio_vidWriteChannel>
	return 0;
}
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <SPI_u8ReleaseSlave>:

u8 SPI_u8ReleaseSlave(u8 Coy_u8Port, u8 Copy_u8Pin)
{
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	d8 2f       	mov	r29, r24
 660:	c6 2f       	mov	r28, r22
	dio_vidConfigChannel(Coy_u8Port, Copy_u8Pin, OUTPUT);
 662:	41 e0       	ldi	r20, 0x01	; 1
 664:	fc dc       	rcall	.-1544   	; 0x5e <dio_vidConfigChannel>
	dio_vidWriteChannel(Coy_u8Port, Copy_u8Pin, STD_HIGH);
 666:	8d 2f       	mov	r24, r29
 668:	6c 2f       	mov	r22, r28
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	99 dd       	rcall	.-1230   	; 0x1a0 <dio_vidWriteChannel>

	return 0;
}
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <SPI_u8SendRecData>:

u8 SPI_u8SendRecData(u8 Copy_u8Data)
{
	/* Write Data Byte */
	u8 Local_temp = SPDR;
 676:	9f b1       	in	r25, 0x0f	; 15
	SPDR = Copy_u8Data;
 678:	8f b9       	out	0x0f, r24	; 15
	/* wait until transmission is completed */
	while( (CHECK_BIT(SPSR,SPSR_SPIF) == 0));
 67a:	77 9b       	sbis	0x0e, 7	; 14
 67c:	fe cf       	rjmp	.-4      	; 0x67a <SPI_u8SendRecData+0x4>
	if (CHECK_BIT(SPSR,SPSR_WCOL) == 1) 
 67e:	8e b1       	in	r24, 0x0e	; 14
 680:	82 95       	swap	r24
 682:	86 95       	lsr	r24
 684:	86 95       	lsr	r24
 686:	83 70       	andi	r24, 0x03	; 3
 688:	80 fd       	sbrc	r24, 0
	{
		Copy_u8Data = SPSR; 
 68a:	8e b1       	in	r24, 0x0e	; 14
	}
	Copy_u8Data = SPDR;
 68c:	8f b1       	in	r24, 0x0f	; 15
	return Copy_u8Data;

}
 68e:	08 95       	ret

00000690 <SPI_u8RecDataSlave>:

u8 SPI_u8RecDataSlave()
{

	/* wait until transmission is completed */
	while( (CHECK_BIT(SPSR,SPSR_SPIF) == 0) || (CHECK_BIT(SPSR,SPSR_WCOL) == 1) );
 690:	77 9b       	sbis	0x0e, 7	; 14
 692:	fe cf       	rjmp	.-4      	; 0x690 <SPI_u8RecDataSlave>
 694:	8e b1       	in	r24, 0x0e	; 14
 696:	86 fd       	sbrc	r24, 6
 698:	fb cf       	rjmp	.-10     	; 0x690 <SPI_u8RecDataSlave>
	return SPDR;
 69a:	8f b1       	in	r24, 0x0f	; 15

}
 69c:	08 95       	ret

0000069e <SPI_voidInterruptEnable>:

void SPI_voidInterruptEnable()
{
	SET_BIT(SPCR, SPCR_SPIE);
 69e:	6f 9a       	sbi	0x0d, 7	; 13
}
 6a0:	08 95       	ret

000006a2 <SPI_u8SendRecDataInterrupt>:
u8 SPI_Data = 0;
u8 SPI_DATA_RECIVED_FLAG = 0;

void SPI_u8SendRecDataInterrupt(u8 Copy_u8Data)
{
	if(SPI_DATA_RECIVED_FLAG == 0)
 6a2:	90 91 60 00 	lds	r25, 0x0060
 6a6:	99 23       	and	r25, r25
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <SPI_u8SendRecDataInterrupt+0x10>
	{
		SPDR = Copy_u8Data;
 6aa:	8f b9       	out	0x0f, r24	; 15
		SPI_DATA_RECIVED_FLAG=1;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 60 00 	sts	0x0060, r24
 6b2:	08 95       	ret

000006b4 <__vector_12>:
}


//#include "LED.h"
void __vector_12(void)
{
 6b4:	1f 92       	push	r1
 6b6:	0f 92       	push	r0
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	0f 92       	push	r0
 6bc:	11 24       	eor	r1, r1
 6be:	8f 93       	push	r24
	//LED_ON(GREEN);
	SPI_Data = SPDR;
 6c0:	8f b1       	in	r24, 0x0f	; 15
 6c2:	80 93 61 00 	sts	0x0061, r24
	SPI_DATA_RECIVED_FLAG = 0;
 6c6:	10 92 60 00 	sts	0x0060, r1
}
 6ca:	8f 91       	pop	r24
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
