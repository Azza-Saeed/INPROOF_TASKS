
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000594  00000628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000594  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000628  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b96  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000408  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bd  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000606  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	dc c1       	rjmp	.+952    	; 0x3d2 <__vector_12>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 e9       	ldi	r30, 0x94	; 148
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 30       	cpi	r26, 0x03	; 3
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	6c d2       	rcall	.+1240   	; 0x540 <main>
  68:	93 c2       	rjmp	.+1318   	; 0x590 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	19 f1       	breq	.+70     	; 0xb6 <dio_vidConfigChannel+0x4a>
  70:	83 30       	cpi	r24, 0x03	; 3
  72:	09 f4       	brne	.+2      	; 0x76 <dio_vidConfigChannel+0xa>
  74:	3d c0       	rjmp	.+122    	; 0xf0 <dio_vidConfigChannel+0x84>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	09 f0       	breq	.+2      	; 0x7c <dio_vidConfigChannel+0x10>
  7a:	56 c0       	rjmp	.+172    	; 0x128 <dio_vidConfigChannel+0xbc>
	{
	case DIO_PORTB:
		if (direction == OUTPUT)
  7c:	41 30       	cpi	r20, 0x01	; 1
  7e:	69 f4       	brne	.+26     	; 0x9a <dio_vidConfigChannel+0x2e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  80:	27 b3       	in	r18, 0x17	; 23
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	ac 01       	movw	r20, r24
  88:	02 c0       	rjmp	.+4      	; 0x8e <dio_vidConfigChannel+0x22>
  8a:	44 0f       	add	r20, r20
  8c:	55 1f       	adc	r21, r21
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <dio_vidConfigChannel+0x1e>
  92:	ba 01       	movw	r22, r20
  94:	62 2b       	or	r22, r18
  96:	67 bb       	out	0x17, r22	; 23
  98:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  9a:	27 b3       	in	r18, 0x17	; 23
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	ac 01       	movw	r20, r24
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <dio_vidConfigChannel+0x3c>
  a4:	44 0f       	add	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <dio_vidConfigChannel+0x38>
  ac:	ba 01       	movw	r22, r20
  ae:	60 95       	com	r22
  b0:	62 23       	and	r22, r18
  b2:	67 bb       	out	0x17, r22	; 23
  b4:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	69 f4       	brne	.+26     	; 0xd4 <dio_vidConfigChannel+0x68>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  ba:	24 b3       	in	r18, 0x14	; 20
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	ac 01       	movw	r20, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <dio_vidConfigChannel+0x5c>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <dio_vidConfigChannel+0x58>
  cc:	ba 01       	movw	r22, r20
  ce:	62 2b       	or	r22, r18
  d0:	64 bb       	out	0x14, r22	; 20
  d2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
  d4:	24 b3       	in	r18, 0x14	; 20
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	ac 01       	movw	r20, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <dio_vidConfigChannel+0x76>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <dio_vidConfigChannel+0x72>
  e6:	ba 01       	movw	r22, r20
  e8:	60 95       	com	r22
  ea:	62 23       	and	r22, r18
  ec:	64 bb       	out	0x14, r22	; 20
  ee:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	69 f4       	brne	.+26     	; 0x10e <dio_vidConfigChannel+0xa2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	ac 01       	movw	r20, r24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <dio_vidConfigChannel+0x96>
  fe:	44 0f       	add	r20, r20
 100:	55 1f       	adc	r21, r21
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <dio_vidConfigChannel+0x92>
 106:	ba 01       	movw	r22, r20
 108:	62 2b       	or	r22, r18
 10a:	61 bb       	out	0x11, r22	; 17
 10c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 10e:	21 b3       	in	r18, 0x11	; 17
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <dio_vidConfigChannel+0xb0>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <dio_vidConfigChannel+0xac>
 120:	ba 01       	movw	r22, r20
 122:	60 95       	com	r22
 124:	62 23       	and	r22, r18
 126:	61 bb       	out	0x11, r22	; 17
 128:	08 95       	ret

0000012a <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	31 f0       	breq	.+12     	; 0x13a <dio_vidConfigPort+0x10>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	31 f0       	breq	.+12     	; 0x13e <dio_vidConfigPort+0x14>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	29 f4       	brne	.+10     	; 0x140 <dio_vidConfigPort+0x16>
	{
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 136:	67 bb       	out	0x17, r22	; 23
 138:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 13a:	64 bb       	out	0x14, r22	; 20
 13c:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 13e:	61 bb       	out	0x11, r22	; 17
 140:	08 95       	ret

00000142 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	31 f0       	breq	.+12     	; 0x152 <dio_vidSetPortValue+0x10>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	31 f0       	breq	.+12     	; 0x156 <dio_vidSetPortValue+0x14>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	29 f4       	brne	.+10     	; 0x158 <dio_vidSetPortValue+0x16>
	{
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 14e:	68 bb       	out	0x18, r22	; 24
 150:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 152:	65 bb       	out	0x15, r22	; 21
 154:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 156:	62 bb       	out	0x12, r22	; 18
 158:	08 95       	ret

0000015a <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	19 f1       	breq	.+70     	; 0x1a4 <dio_vidWriteChannel+0x4a>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	09 f4       	brne	.+2      	; 0x164 <dio_vidWriteChannel+0xa>
 162:	3d c0       	rjmp	.+122    	; 0x1de <dio_vidWriteChannel+0x84>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	09 f0       	breq	.+2      	; 0x16a <dio_vidWriteChannel+0x10>
 168:	56 c0       	rjmp	.+172    	; 0x216 <dio_vidWriteChannel+0xbc>
	{
	case DIO_PORTB:
		if (level == STD_LOW)
 16a:	44 23       	and	r20, r20
 16c:	71 f4       	brne	.+28     	; 0x18a <dio_vidWriteChannel+0x30>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 16e:	28 b3       	in	r18, 0x18	; 24
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac 01       	movw	r20, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <dio_vidWriteChannel+0x22>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <dio_vidWriteChannel+0x1e>
 180:	ba 01       	movw	r22, r20
 182:	60 95       	com	r22
 184:	62 23       	and	r22, r18
 186:	68 bb       	out	0x18, r22	; 24
 188:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 18a:	28 b3       	in	r18, 0x18	; 24
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	ac 01       	movw	r20, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <dio_vidWriteChannel+0x3e>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <dio_vidWriteChannel+0x3a>
 19c:	ba 01       	movw	r22, r20
 19e:	62 2b       	or	r22, r18
 1a0:	68 bb       	out	0x18, r22	; 24
 1a2:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 1a4:	44 23       	and	r20, r20
 1a6:	71 f4       	brne	.+28     	; 0x1c4 <dio_vidWriteChannel+0x6a>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 1a8:	25 b3       	in	r18, 0x15	; 21
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <dio_vidWriteChannel+0x5c>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <dio_vidWriteChannel+0x58>
 1ba:	ba 01       	movw	r22, r20
 1bc:	60 95       	com	r22
 1be:	62 23       	and	r22, r18
 1c0:	65 bb       	out	0x15, r22	; 21
 1c2:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1c4:	25 b3       	in	r18, 0x15	; 21
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	ac 01       	movw	r20, r24
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <dio_vidWriteChannel+0x78>
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <dio_vidWriteChannel+0x74>
 1d6:	ba 01       	movw	r22, r20
 1d8:	62 2b       	or	r22, r18
 1da:	65 bb       	out	0x15, r22	; 21
 1dc:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 1de:	44 23       	and	r20, r20
 1e0:	71 f4       	brne	.+28     	; 0x1fe <dio_vidWriteChannel+0xa4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 1e2:	22 b3       	in	r18, 0x12	; 18
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <dio_vidWriteChannel+0x96>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <dio_vidWriteChannel+0x92>
 1f4:	ba 01       	movw	r22, r20
 1f6:	60 95       	com	r22
 1f8:	62 23       	and	r22, r18
 1fa:	62 bb       	out	0x12, r22	; 18
 1fc:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 1fe:	22 b3       	in	r18, 0x12	; 18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	ac 01       	movw	r20, r24
 206:	02 c0       	rjmp	.+4      	; 0x20c <dio_vidWriteChannel+0xb2>
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <dio_vidWriteChannel+0xae>
 210:	ba 01       	movw	r22, r20
 212:	62 2b       	or	r22, r18
 214:	62 bb       	out	0x12, r22	; 18
 216:	08 95       	ret

00000218 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	a1 f0       	breq	.+40     	; 0x244 <dio_vidWriteChannelGroup+0x2c>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	09 f1       	breq	.+66     	; 0x262 <dio_vidWriteChannelGroup+0x4a>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	71 f5       	brne	.+92     	; 0x280 <dio_vidWriteChannelGroup+0x68>
	{
		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 224:	88 b3       	in	r24, 0x18	; 24
 226:	94 2f       	mov	r25, r20
 228:	90 95       	com	r25
 22a:	89 23       	and	r24, r25
 22c:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 22e:	e6 2f       	mov	r30, r22
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	bf 01       	movw	r22, r30
 234:	02 c0       	rjmp	.+4      	; 0x23a <dio_vidWriteChannelGroup+0x22>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	2a 95       	dec	r18
 23c:	e2 f7       	brpl	.-8      	; 0x236 <dio_vidWriteChannelGroup+0x1e>
 23e:	64 23       	and	r22, r20
 240:	68 bb       	out	0x18, r22	; 24
		break;
 242:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 244:	85 b3       	in	r24, 0x15	; 21
 246:	94 2f       	mov	r25, r20
 248:	90 95       	com	r25
 24a:	89 23       	and	r24, r25
 24c:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	cb 01       	movw	r24, r22
 252:	02 c0       	rjmp	.+4      	; 0x258 <dio_vidWriteChannelGroup+0x40>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	2a 95       	dec	r18
 25a:	e2 f7       	brpl	.-8      	; 0x254 <dio_vidWriteChannelGroup+0x3c>
 25c:	84 23       	and	r24, r20
 25e:	85 bb       	out	0x15, r24	; 21
		break;
 260:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 262:	82 b3       	in	r24, 0x12	; 18
 264:	94 2f       	mov	r25, r20
 266:	90 95       	com	r25
 268:	89 23       	and	r24, r25
 26a:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	cb 01       	movw	r24, r22
 270:	02 c0       	rjmp	.+4      	; 0x276 <dio_vidWriteChannelGroup+0x5e>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	2a 95       	dec	r18
 278:	e2 f7       	brpl	.-8      	; 0x272 <dio_vidWriteChannelGroup+0x5a>
 27a:	9c 01       	movw	r18, r24
 27c:	24 23       	and	r18, r20
 27e:	22 bb       	out	0x12, r18	; 18
 280:	08 95       	ret

00000282 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 282:	68 23       	and	r22, r24
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	cb 01       	movw	r24, r22
 288:	02 c0       	rjmp	.+4      	; 0x28e <dio_vidReadChannelGroup+0xc>
 28a:	95 95       	asr	r25
 28c:	87 95       	ror	r24
 28e:	4a 95       	dec	r20
 290:	e2 f7       	brpl	.-8      	; 0x28a <dio_vidReadChannelGroup+0x8>
}
 292:	08 95       	ret

00000294 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	89 f0       	breq	.+34     	; 0x2ba <dio_vidFlipChannel+0x26>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	e1 f0       	breq	.+56     	; 0x2d4 <dio_vidFlipChannel+0x40>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	31 f5       	brne	.+76     	; 0x2ec <dio_vidFlipChannel+0x58>
	{
	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 2a0:	28 b3       	in	r18, 0x18	; 24
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <dio_vidFlipChannel+0x1a>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <dio_vidFlipChannel+0x16>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 27       	eor	r22, r18
 2b6:	68 bb       	out	0x18, r22	; 24
		break;
 2b8:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <dio_vidFlipChannel+0x34>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <dio_vidFlipChannel+0x30>
 2cc:	ba 01       	movw	r22, r20
 2ce:	62 27       	eor	r22, r18
 2d0:	65 bb       	out	0x15, r22	; 21
		break;
 2d2:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 2d4:	22 b3       	in	r18, 0x12	; 18
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <dio_vidFlipChannel+0x4e>
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <dio_vidFlipChannel+0x4a>
 2e6:	ba 01       	movw	r22, r20
 2e8:	62 27       	eor	r22, r18
 2ea:	62 bb       	out	0x12, r22	; 18
 2ec:	08 95       	ret

000002ee <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	71 f0       	breq	.+28     	; 0x30e <dio_dioLevelReadChannel+0x20>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	b1 f0       	breq	.+44     	; 0x322 <dio_dioLevelReadChannel+0x34>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	f1 f4       	brne	.+60     	; 0x336 <dio_dioLevelReadChannel+0x48>
	{
	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 2fa:	26 b3       	in	r18, 0x16	; 22
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	c9 01       	movw	r24, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <dio_dioLevelReadChannel+0x18>
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <dio_dioLevelReadChannel+0x14>
 30a:	81 70       	andi	r24, 0x01	; 1
		break;
 30c:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 30e:	23 b3       	in	r18, 0x13	; 19
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	c9 01       	movw	r24, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <dio_dioLevelReadChannel+0x2c>
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <dio_dioLevelReadChannel+0x28>
 31e:	81 70       	andi	r24, 0x01	; 1
		break;
 320:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 322:	20 b3       	in	r18, 0x10	; 16
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	c9 01       	movw	r24, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <dio_dioLevelReadChannel+0x40>
 32a:	95 95       	asr	r25
 32c:	87 95       	ror	r24
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <dio_dioLevelReadChannel+0x3c>
 332:	81 70       	andi	r24, 0x01	; 1
		break;
 334:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 336:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 338:	08 95       	ret

0000033a <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	e1 f0       	breq	.+56     	; 0x376 <dio_vidEnablePullUp+0x3c>
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	89 f1       	breq	.+98     	; 0x3a4 <dio_vidEnablePullUp+0x6a>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	09 f0       	breq	.+2      	; 0x348 <dio_vidEnablePullUp+0xe>
 346:	44 c0       	rjmp	.+136    	; 0x3d0 <dio_vidEnablePullUp+0x96>
	{
		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 348:	87 b3       	in	r24, 0x17	; 23
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	06 2e       	mov	r0, r22
 34e:	02 c0       	rjmp	.+4      	; 0x354 <dio_vidEnablePullUp+0x1a>
 350:	95 95       	asr	r25
 352:	87 95       	ror	r24
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <dio_vidEnablePullUp+0x16>
 358:	80 fd       	sbrc	r24, 0
 35a:	3a c0       	rjmp	.+116    	; 0x3d0 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 35c:	28 b3       	in	r18, 0x18	; 24
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <dio_vidEnablePullUp+0x30>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <dio_vidEnablePullUp+0x2c>
 36e:	ba 01       	movw	r22, r20
 370:	62 2b       	or	r22, r18
 372:	68 bb       	out	0x18, r22	; 24
 374:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 376:	84 b3       	in	r24, 0x14	; 20
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	06 2e       	mov	r0, r22
 37c:	02 c0       	rjmp	.+4      	; 0x382 <dio_vidEnablePullUp+0x48>
 37e:	95 95       	asr	r25
 380:	87 95       	ror	r24
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <dio_vidEnablePullUp+0x44>
 386:	80 fd       	sbrc	r24, 0
 388:	23 c0       	rjmp	.+70     	; 0x3d0 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 38a:	25 b3       	in	r18, 0x15	; 21
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	ac 01       	movw	r20, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <dio_vidEnablePullUp+0x5e>
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <dio_vidEnablePullUp+0x5a>
 39c:	ba 01       	movw	r22, r20
 39e:	62 2b       	or	r22, r18
 3a0:	65 bb       	out	0x15, r22	; 21
 3a2:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 3a4:	81 b3       	in	r24, 0x11	; 17
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	06 2e       	mov	r0, r22
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <dio_vidEnablePullUp+0x76>
 3ac:	95 95       	asr	r25
 3ae:	87 95       	ror	r24
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <dio_vidEnablePullUp+0x72>
 3b4:	80 fd       	sbrc	r24, 0
 3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 3b8:	22 b3       	in	r18, 0x12	; 18
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	ac 01       	movw	r20, r24
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <dio_vidEnablePullUp+0x8c>
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <dio_vidEnablePullUp+0x88>
 3ca:	ba 01       	movw	r22, r20
 3cc:	62 2b       	or	r22, r18
 3ce:	62 bb       	out	0x12, r22	; 18
 3d0:	08 95       	ret

000003d2 <__vector_12>:
 */


#include "SPI_Interface.h"

ISR(VECTOR(12)) {
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
 3f2:	ff 93       	push	r31
	ptr_func();
 3f4:	e0 91 00 01 	lds	r30, 0x0100
 3f8:	f0 91 01 01 	lds	r31, 0x0101
 3fc:	09 95       	icall
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <SPI_Init_Master>:


void SPI_Init_Master(Master_Config *My_Config) {
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	66 e0       	ldi	r22, 0x06	; 6
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	1f de       	rcall	.-962    	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	65 e0       	ldi	r22, 0x05	; 5
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	1b de       	rcall	.-970    	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	67 e0       	ldi	r22, 0x07	; 7
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	17 de       	rcall	.-978    	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	13 de       	rcall	.-986    	; 0x6c <dio_vidConfigChannel>

	SPCR |= (1 << SPE)
 446:	4d b1       	in	r20, 0x0d	; 13
 448:	40 65       	ori	r20, 0x50	; 80
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	83 70       	andi	r24, 0x03	; 3
 44e:	48 2b       	or	r20, r24
			| (My_Config->Int_Enable << SPIE)
 450:	38 81       	ld	r19, Y
 452:	37 95       	ror	r19
 454:	33 27       	eor	r19, r19
 456:	37 95       	ror	r19
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 458:	34 2b       	or	r19, r20
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
 45a:	29 81       	ldd	r18, Y+1	; 0x01
 45c:	22 95       	swap	r18
 45e:	22 0f       	add	r18, r18
 460:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 462:	23 2b       	or	r18, r19
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 464:	9a 81       	ldd	r25, Y+2	; 0x02
 466:	99 0f       	add	r25, r25
 468:	99 0f       	add	r25, r25
 46a:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 46c:	92 2b       	or	r25, r18
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 46e:	8b 81       	ldd	r24, Y+3	; 0x03
 470:	88 0f       	add	r24, r24
 472:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 474:	89 2b       	or	r24, r25
 476:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
			| (My_Config->Prescaler & 0x3);

	SPSR |= (My_Config->Prescaler >> 2);
 478:	9e b1       	in	r25, 0x0e	; 14
 47a:	8c 81       	ldd	r24, Y+4	; 0x04
 47c:	86 95       	lsr	r24
 47e:	86 95       	lsr	r24
 480:	89 2b       	or	r24, r25
 482:	8e b9       	out	0x0e, r24	; 14
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <SPI_Init_Slave>:

void SPI_Init_Slave(Slave_Config *My_Config) {
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, OUTPUT);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	66 e0       	ldi	r22, 0x06	; 6
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	ea dd       	rcall	.-1068   	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	65 e0       	ldi	r22, 0x05	; 5
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	e6 dd       	rcall	.-1076   	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	67 e0       	ldi	r22, 0x07	; 7
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	e2 dd       	rcall	.-1084   	; 0x6c <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	64 e0       	ldi	r22, 0x04	; 4
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	de dd       	rcall	.-1092   	; 0x6c <dio_vidConfigChannel>

	SPCR = 0;
 4b0:	1d b8       	out	0x0d, r1	; 13
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 4b2:	4d b1       	in	r20, 0x0d	; 13
 4b4:	40 64       	ori	r20, 0x40	; 64
 4b6:	38 81       	ld	r19, Y
 4b8:	37 95       	ror	r19
 4ba:	33 27       	eor	r19, r19
 4bc:	37 95       	ror	r19
 4be:	34 2b       	or	r19, r20
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 4c0:	29 81       	ldd	r18, Y+1	; 0x01
 4c2:	22 95       	swap	r18
 4c4:	22 0f       	add	r18, r18
 4c6:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 4c8:	23 2b       	or	r18, r19
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	99 0f       	add	r25, r25
 4ce:	99 0f       	add	r25, r25
 4d0:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 4d2:	92 2b       	or	r25, r18
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	88 0f       	add	r24, r24
 4d8:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 4da:	89 2b       	or	r24, r25
 4dc:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <SPI_Send_Receive_Synch_Byte>:

void SPI_Send_Receive_Synch_Byte(u8 byte, u8 *received) {
	SPDR = byte;
 4e4:	8f b9       	out	0x0f, r24	; 15

	while (!CHECK_BIT(SPSR, SPIF));
 4e6:	77 9b       	sbis	0x0e, 7	; 14
 4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <SPI_Send_Receive_Synch_Byte+0x2>
	*received = SPDR;
 4ea:	8f b1       	in	r24, 0x0f	; 15
 4ec:	fb 01       	movw	r30, r22
 4ee:	80 83       	st	Z, r24
}
 4f0:	08 95       	ret

000004f2 <SPI_Send_ASynch_Byte>:

void SPI_Send_ASynch_Byte(u8 byte) {
	SPDR = byte;
 4f2:	8f b9       	out	0x0f, r24	; 15

	while (!CHECK_BIT(SPSR, SPIF));
 4f4:	77 9b       	sbis	0x0e, 7	; 14
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <SPI_Send_ASynch_Byte+0x2>
}
 4f8:	08 95       	ret

000004fa <SPI_Read_Data>:

void SPI_Read_Data(u8 *var) {
	*var = SPDR;
 4fa:	2f b1       	in	r18, 0x0f	; 15
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
}
 500:	08 95       	ret

00000502 <SPI_Set_CallBack>:

void SPI_Set_CallBack(void (*func)(void)) {
	ptr_func = func;
 502:	90 93 01 01 	sts	0x0101, r25
 506:	80 93 00 01 	sts	0x0100, r24
}
 50a:	08 95       	ret

0000050c <Global_Interrupt_Enable>:

void Global_Interrupt_Enable() {
	SREG |= (1 << 7);
 50c:	8f b7       	in	r24, 0x3f	; 63
 50e:	80 68       	ori	r24, 0x80	; 128
 510:	8f bf       	out	0x3f, r24	; 63
}
 512:	08 95       	ret

00000514 <Master_Send>:
void Master_Send(u8 data){
	SPI_Send_ASynch_Byte(data);
 514:	ee df       	rcall	.-36     	; 0x4f2 <SPI_Send_ASynch_Byte>
}
 516:	08 95       	ret

00000518 <Master_Receive>:

u8 Master_Receive(){
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	0f 92       	push	r0
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
	u8 received=0;
 522:	19 82       	std	Y+1, r1	; 0x01
	SPI_Send_Receive_Synch_Byte(DUMMY_DATA,&received);
 524:	8e ef       	ldi	r24, 0xFE	; 254
 526:	be 01       	movw	r22, r28
 528:	6f 5f       	subi	r22, 0xFF	; 255
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	db df       	rcall	.-74     	; 0x4e4 <SPI_Send_Receive_Synch_Byte>
	return received;
}
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	0f 90       	pop	r0
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <SPI_Callback_Recieve>:
	}	
}

void SPI_Callback_Recieve(void)
{
	SPI_Read_Data(&Recieve_Data);
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	de df       	rcall	.-68     	; 0x4fa <SPI_Read_Data>
 53e:	08 95       	ret

00000540 <main>:
u8 Recieve_Data;

void SPI_Callback_Recieve(void);

int main(void)
{
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	00 d0       	rcall	.+0      	; 0x546 <main+0x6>
 546:	00 d0       	rcall	.+0      	; 0x548 <main+0x8>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
	/* SPI Initialization */
	Slave_Config Slave_Obj={ SPI_INTERRUPT_ENABLE,SPI_LSB,SPI_RISING_LEADING,SPI_SAMPLE_LEADING};
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	89 83       	std	Y+1, r24	; 0x01
 550:	8a 83       	std	Y+2, r24	; 0x02
 552:	1b 82       	std	Y+3, r1	; 0x03
 554:	1c 82       	std	Y+4, r1	; 0x04
		
	SPI_Init_Slave(&Slave_Obj);
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	97 df       	rcall	.-210    	; 0x48a <SPI_Init_Slave>
	Global_Interrupt_Enable();
 55c:	d7 df       	rcall	.-82     	; 0x50c <Global_Interrupt_Enable>
	SPI_Set_CallBack(SPI_Callback_Recieve);
 55e:	8c e9       	ldi	r24, 0x9C	; 156
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	cf df       	rcall	.-98     	; 0x502 <SPI_Set_CallBack>
	dio_vidConfigChannel(DIO_PORTC,DIO_PIN7,OUTPUT);
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	67 e0       	ldi	r22, 0x07	; 7
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	80 dd       	rcall	.-1280   	; 0x6c <dio_vidConfigChannel>
	
    while(1)
    {
		if( Recieve_Data == 0xFE)
 56c:	80 91 02 01 	lds	r24, 0x0102
 570:	8e 3f       	cpi	r24, 0xFE	; 254
 572:	69 f4       	brne	.+26     	; 0x58e <main+0x4e>
		{
			dio_vidFlipChannel(DIO_PORTC,DIO_PIN7);
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	67 e0       	ldi	r22, 0x07	; 7
 578:	8d de       	rcall	.-742    	; 0x294 <dio_vidFlipChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	8f e9       	ldi	r24, 0x9F	; 159
 57c:	96 e8       	ldi	r25, 0x86	; 134
 57e:	a1 e0       	ldi	r26, 0x01	; 1
 580:	81 50       	subi	r24, 0x01	; 1
 582:	90 40       	sbci	r25, 0x00	; 0
 584:	a0 40       	sbci	r26, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <main+0x40>
 588:	00 c0       	rjmp	.+0      	; 0x58a <main+0x4a>
 58a:	00 00       	nop
 58c:	ef cf       	rjmp	.-34     	; 0x56c <main+0x2c>
 58e:	ff cf       	rjmp	.-2      	; 0x58e <main+0x4e>

00000590 <_exit>:
 590:	f8 94       	cli

00000592 <__stop_program>:
 592:	ff cf       	rjmp	.-2      	; 0x592 <__stop_program>
