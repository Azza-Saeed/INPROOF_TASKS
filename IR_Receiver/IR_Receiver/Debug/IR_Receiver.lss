
IR_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008c6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d2  00800060  00800060  0000095a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000010b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdf  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e3  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047d  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000734  00000000  00000000  00002e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_4>
  14:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 33       	cpi	r26, 0x32	; 50
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <main>
  8a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	31 f1       	breq	.+76     	; 0xe2 <dio_vidConfigChannel+0x50>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	38 f0       	brcs	.+14     	; 0xa8 <dio_vidConfigChannel+0x16>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <dio_vidConfigChannel+0xe>
  9e:	3e c0       	rjmp	.+124    	; 0x11c <dio_vidConfigChannel+0x8a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f0       	breq	.+2      	; 0xa6 <dio_vidConfigChannel+0x14>
  a4:	74 c0       	rjmp	.+232    	; 0x18e <dio_vidConfigChannel+0xfc>
  a6:	57 c0       	rjmp	.+174    	; 0x156 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x28>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x24>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x42>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x3e>
  d8:	ba 01       	movw	r22, r20
  da:	60 95       	com	r22
  dc:	62 23       	and	r22, r18
  de:	6a bb       	out	0x1a, r22	; 26
  e0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dio_vidConfigChannel+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <dio_vidConfigChannel+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	67 bb       	out	0x17, r22	; 23
  fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <dio_vidConfigChannel+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <dio_vidConfigChannel+0x78>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	67 bb       	out	0x17, r22	; 23
 11a:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	ac 01       	movw	r20, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <dio_vidConfigChannel+0x9c>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <dio_vidConfigChannel+0x98>
 132:	ba 01       	movw	r22, r20
 134:	62 2b       	or	r22, r18
 136:	64 bb       	out	0x14, r22	; 20
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <dio_vidConfigChannel+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <dio_vidConfigChannel+0xb2>
 14c:	ba 01       	movw	r22, r20
 14e:	60 95       	com	r22
 150:	62 23       	and	r22, r18
 152:	64 bb       	out	0x14, r22	; 20
 154:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <dio_vidConfigChannel+0xd6>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <dio_vidConfigChannel+0xd2>
 16c:	ba 01       	movw	r22, r20
 16e:	62 2b       	or	r22, r18
 170:	61 bb       	out	0x11, r22	; 17
 172:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <dio_vidConfigChannel+0xf0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <dio_vidConfigChannel+0xec>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	61 bb       	out	0x11, r22	; 17
 18e:	08 95       	ret

00000190 <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	49 f0       	breq	.+18     	; 0x1a6 <dio_vidConfigPort+0x16>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	28 f0       	brcs	.+10     	; 0x1a2 <dio_vidConfigPort+0x12>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	39 f0       	breq	.+14     	; 0x1aa <dio_vidConfigPort+0x1a>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	41 f4       	brne	.+16     	; 0x1b0 <dio_vidConfigPort+0x20>
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <dio_vidConfigPort+0x1e>
	{
		case DIO_PORTA: DIO_DDRA_REG = direction;	break;
 1a2:	6a bb       	out	0x1a, r22	; 26
 1a4:	08 95       	ret
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 1a6:	67 bb       	out	0x17, r22	; 23
 1a8:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 1aa:	64 bb       	out	0x14, r22	; 20
 1ac:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 1ae:	61 bb       	out	0x11, r22	; 17
 1b0:	08 95       	ret

000001b2 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <dio_vidSetPortValue+0x16>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <dio_vidSetPortValue+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	39 f0       	breq	.+14     	; 0x1cc <dio_vidSetPortValue+0x1a>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	41 f4       	brne	.+16     	; 0x1d2 <dio_vidSetPortValue+0x20>
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <dio_vidSetPortValue+0x1e>
	{
		case DIO_PORTA: DIO_PORTA_REG = value;	break;
 1c4:	6b bb       	out	0x1b, r22	; 27
 1c6:	08 95       	ret
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 1c8:	68 bb       	out	0x18, r22	; 24
 1ca:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 1cc:	65 bb       	out	0x15, r22	; 21
 1ce:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 1d0:	62 bb       	out	0x12, r22	; 18
 1d2:	08 95       	ret

000001d4 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f1       	breq	.+76     	; 0x224 <dio_vidWriteChannel+0x50>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	38 f0       	brcs	.+14     	; 0x1ea <dio_vidWriteChannel+0x16>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	09 f4       	brne	.+2      	; 0x1e2 <dio_vidWriteChannel+0xe>
 1e0:	3e c0       	rjmp	.+124    	; 0x25e <dio_vidWriteChannel+0x8a>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <dio_vidWriteChannel+0x14>
 1e6:	74 c0       	rjmp	.+232    	; 0x2d0 <dio_vidWriteChannel+0xfc>
 1e8:	57 c0       	rjmp	.+174    	; 0x298 <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 1ea:	44 23       	and	r20, r20
 1ec:	71 f4       	brne	.+28     	; 0x20a <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	ac 01       	movw	r20, r24
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dio_vidWriteChannel+0x28>
 1f8:	44 0f       	add	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <dio_vidWriteChannel+0x24>
 200:	ba 01       	movw	r22, r20
 202:	60 95       	com	r22
 204:	62 23       	and	r22, r18
 206:	6b bb       	out	0x1b, r22	; 27
 208:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <dio_vidWriteChannel+0x44>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <dio_vidWriteChannel+0x40>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	6b bb       	out	0x1b, r22	; 27
 222:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 224:	44 23       	and	r20, r20
 226:	71 f4       	brne	.+28     	; 0x244 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <dio_vidWriteChannel+0x62>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <dio_vidWriteChannel+0x5e>
 23a:	ba 01       	movw	r22, r20
 23c:	60 95       	com	r22
 23e:	62 23       	and	r22, r18
 240:	68 bb       	out	0x18, r22	; 24
 242:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	ac 01       	movw	r20, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <dio_vidWriteChannel+0x7e>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <dio_vidWriteChannel+0x7a>
 256:	ba 01       	movw	r22, r20
 258:	62 2b       	or	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
 25c:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 25e:	44 23       	and	r20, r20
 260:	71 f4       	brne	.+28     	; 0x27e <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 262:	25 b3       	in	r18, 0x15	; 21
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	ac 01       	movw	r20, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <dio_vidWriteChannel+0x9c>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <dio_vidWriteChannel+0x98>
 274:	ba 01       	movw	r22, r20
 276:	60 95       	com	r22
 278:	62 23       	and	r22, r18
 27a:	65 bb       	out	0x15, r22	; 21
 27c:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_vidWriteChannel+0xb8>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_vidWriteChannel+0xb4>
 290:	ba 01       	movw	r22, r20
 292:	62 2b       	or	r22, r18
 294:	65 bb       	out	0x15, r22	; 21
 296:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 298:	44 23       	and	r20, r20
 29a:	71 f4       	brne	.+28     	; 0x2b8 <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 29c:	22 b3       	in	r18, 0x12	; 18
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <dio_vidWriteChannel+0xd6>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <dio_vidWriteChannel+0xd2>
 2ae:	ba 01       	movw	r22, r20
 2b0:	60 95       	com	r22
 2b2:	62 23       	and	r22, r18
 2b4:	62 bb       	out	0x12, r22	; 18
 2b6:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_vidWriteChannel+0xf2>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_vidWriteChannel+0xee>
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 2b       	or	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret

000002d2 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	c1 f0       	breq	.+48     	; 0x306 <dio_vidWriteChannelGroup+0x34>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	30 f0       	brcs	.+12     	; 0x2e6 <dio_vidWriteChannelGroup+0x14>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	19 f1       	breq	.+70     	; 0x324 <dio_vidWriteChannelGroup+0x52>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <dio_vidWriteChannelGroup+0x12>
 2e2:	3e c0       	rjmp	.+124    	; 0x360 <dio_vidWriteChannelGroup+0x8e>
 2e4:	2e c0       	rjmp	.+92     	; 0x342 <dio_vidWriteChannelGroup+0x70>
	{
		case DIO_PORTA:
			DIO_PORTA_REG &= ~mask;
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	94 2f       	mov	r25, r20
 2ea:	90 95       	com	r25
 2ec:	89 23       	and	r24, r25
 2ee:	8b bb       	out	0x1b, r24	; 27
			DIO_PORTA_REG = (value<<pos) & mask;
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	cb 01       	movw	r24, r22
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <dio_vidWriteChannelGroup+0x28>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	2a 95       	dec	r18
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <dio_vidWriteChannelGroup+0x24>
 2fe:	9c 01       	movw	r18, r24
 300:	24 23       	and	r18, r20
 302:	2b bb       	out	0x1b, r18	; 27
		break;
 304:	08 95       	ret

		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 306:	88 b3       	in	r24, 0x18	; 24
 308:	94 2f       	mov	r25, r20
 30a:	90 95       	com	r25
 30c:	89 23       	and	r24, r25
 30e:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	fb 01       	movw	r30, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <dio_vidWriteChannelGroup+0x48>
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	2a 95       	dec	r18
 31c:	e2 f7       	brpl	.-8      	; 0x316 <dio_vidWriteChannelGroup+0x44>
 31e:	e4 23       	and	r30, r20
 320:	e8 bb       	out	0x18, r30	; 24
		break;
 322:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 324:	85 b3       	in	r24, 0x15	; 21
 326:	94 2f       	mov	r25, r20
 328:	90 95       	com	r25
 32a:	89 23       	and	r24, r25
 32c:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	cb 01       	movw	r24, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <dio_vidWriteChannelGroup+0x66>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	2a 95       	dec	r18
 33a:	e2 f7       	brpl	.-8      	; 0x334 <dio_vidWriteChannelGroup+0x62>
 33c:	84 23       	and	r24, r20
 33e:	85 bb       	out	0x15, r24	; 21
		break;
 340:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 342:	82 b3       	in	r24, 0x12	; 18
 344:	94 2f       	mov	r25, r20
 346:	90 95       	com	r25
 348:	89 23       	and	r24, r25
 34a:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	cb 01       	movw	r24, r22
 350:	02 c0       	rjmp	.+4      	; 0x356 <dio_vidWriteChannelGroup+0x84>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	e2 f7       	brpl	.-8      	; 0x352 <dio_vidWriteChannelGroup+0x80>
 35a:	9c 01       	movw	r18, r24
 35c:	24 23       	and	r18, r20
 35e:	22 bb       	out	0x12, r18	; 18
 360:	08 95       	ret

00000362 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 362:	68 23       	and	r22, r24
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	cb 01       	movw	r24, r22
 368:	02 c0       	rjmp	.+4      	; 0x36e <dio_vidReadChannelGroup+0xc>
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	4a 95       	dec	r20
 370:	e2 f7       	brpl	.-8      	; 0x36a <dio_vidReadChannelGroup+0x8>
}
 372:	08 95       	ret

00000374 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	a1 f0       	breq	.+40     	; 0x3a0 <dio_vidFlipChannel+0x2c>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	28 f0       	brcs	.+10     	; 0x386 <dio_vidFlipChannel+0x12>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	e9 f0       	breq	.+58     	; 0x3ba <dio_vidFlipChannel+0x46>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	a1 f5       	brne	.+104    	; 0x3ec <dio_vidFlipChannel+0x78>
 384:	27 c0       	rjmp	.+78     	; 0x3d4 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 386:	2b b3       	in	r18, 0x1b	; 27
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ac 01       	movw	r20, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <dio_vidFlipChannel+0x20>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <dio_vidFlipChannel+0x1c>
 398:	ba 01       	movw	r22, r20
 39a:	62 27       	eor	r22, r18
 39c:	6b bb       	out	0x1b, r22	; 27
		break;
 39e:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 3a0:	28 b3       	in	r18, 0x18	; 24
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	ac 01       	movw	r20, r24
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <dio_vidFlipChannel+0x3a>
 3aa:	44 0f       	add	r20, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <dio_vidFlipChannel+0x36>
 3b2:	ba 01       	movw	r22, r20
 3b4:	62 27       	eor	r22, r18
 3b6:	68 bb       	out	0x18, r22	; 24
		break;
 3b8:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 3ba:	25 b3       	in	r18, 0x15	; 21
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	ac 01       	movw	r20, r24
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <dio_vidFlipChannel+0x54>
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <dio_vidFlipChannel+0x50>
 3cc:	ba 01       	movw	r22, r20
 3ce:	62 27       	eor	r22, r18
 3d0:	65 bb       	out	0x15, r22	; 21
		break;
 3d2:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	ac 01       	movw	r20, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <dio_vidFlipChannel+0x6e>
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <dio_vidFlipChannel+0x6a>
 3e6:	ba 01       	movw	r22, r20
 3e8:	62 27       	eor	r22, r18
 3ea:	62 bb       	out	0x12, r22	; 18
 3ec:	08 95       	ret

000003ee <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	89 f0       	breq	.+34     	; 0x414 <dio_dioLevelReadChannel+0x26>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	28 f0       	brcs	.+10     	; 0x400 <dio_dioLevelReadChannel+0x12>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	b9 f0       	breq	.+46     	; 0x428 <dio_dioLevelReadChannel+0x3a>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	49 f5       	brne	.+82     	; 0x450 <dio_dioLevelReadChannel+0x62>
 3fe:	1e c0       	rjmp	.+60     	; 0x43c <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 400:	29 b3       	in	r18, 0x19	; 25
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	c9 01       	movw	r24, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <dio_dioLevelReadChannel+0x1e>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <dio_dioLevelReadChannel+0x1a>
 410:	81 70       	andi	r24, 0x01	; 1
		break;
 412:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 414:	26 b3       	in	r18, 0x16	; 22
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	c9 01       	movw	r24, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <dio_dioLevelReadChannel+0x32>
 41c:	95 95       	asr	r25
 41e:	87 95       	ror	r24
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <dio_dioLevelReadChannel+0x2e>
 424:	81 70       	andi	r24, 0x01	; 1
		break;
 426:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 428:	23 b3       	in	r18, 0x13	; 19
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	c9 01       	movw	r24, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <dio_dioLevelReadChannel+0x46>
 430:	95 95       	asr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <dio_dioLevelReadChannel+0x42>
 438:	81 70       	andi	r24, 0x01	; 1
		break;
 43a:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 43c:	20 b3       	in	r18, 0x10	; 16
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	c9 01       	movw	r24, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <dio_dioLevelReadChannel+0x5a>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <dio_dioLevelReadChannel+0x56>
 44c:	81 70       	andi	r24, 0x01	; 1
		break;
 44e:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 450:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 452:	08 95       	ret

00000454 <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	f9 f0       	breq	.+62     	; 0x496 <dio_vidEnablePullUp+0x42>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	30 f0       	brcs	.+12     	; 0x468 <dio_vidEnablePullUp+0x14>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	91 f1       	breq	.+100    	; 0x4c4 <dio_vidEnablePullUp+0x70>
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	09 f0       	breq	.+2      	; 0x466 <dio_vidEnablePullUp+0x12>
 464:	5c c0       	rjmp	.+184    	; 0x51e <dio_vidEnablePullUp+0xca>
 466:	45 c0       	rjmp	.+138    	; 0x4f2 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if(CHECK_BIT(DIO_DDRA_REG,channel) == INPUT)
 468:	8a b3       	in	r24, 0x1a	; 26
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	06 2e       	mov	r0, r22
 46e:	02 c0       	rjmp	.+4      	; 0x474 <dio_vidEnablePullUp+0x20>
 470:	95 95       	asr	r25
 472:	87 95       	ror	r24
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <dio_vidEnablePullUp+0x1c>
 478:	80 fd       	sbrc	r24, 0
 47a:	51 c0       	rjmp	.+162    	; 0x51e <dio_vidEnablePullUp+0xca>
		{
			SET_BIT(DIO_PORTA_REG,channel);	
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	ac 01       	movw	r20, r24
 484:	02 c0       	rjmp	.+4      	; 0x48a <dio_vidEnablePullUp+0x36>
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <dio_vidEnablePullUp+0x32>
 48e:	ba 01       	movw	r22, r20
 490:	62 2b       	or	r22, r18
 492:	6b bb       	out	0x1b, r22	; 27
 494:	08 95       	ret
		}
		break;

		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 496:	87 b3       	in	r24, 0x17	; 23
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	06 2e       	mov	r0, r22
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <dio_vidEnablePullUp+0x4e>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <dio_vidEnablePullUp+0x4a>
 4a6:	80 fd       	sbrc	r24, 0
 4a8:	3a c0       	rjmp	.+116    	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 4aa:	28 b3       	in	r18, 0x18	; 24
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	ac 01       	movw	r20, r24
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <dio_vidEnablePullUp+0x64>
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <dio_vidEnablePullUp+0x60>
 4bc:	ba 01       	movw	r22, r20
 4be:	62 2b       	or	r22, r18
 4c0:	68 bb       	out	0x18, r22	; 24
 4c2:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 4c4:	84 b3       	in	r24, 0x14	; 20
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	06 2e       	mov	r0, r22
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <dio_vidEnablePullUp+0x7c>
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <dio_vidEnablePullUp+0x78>
 4d4:	80 fd       	sbrc	r24, 0
 4d6:	23 c0       	rjmp	.+70     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	ac 01       	movw	r20, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <dio_vidEnablePullUp+0x92>
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <dio_vidEnablePullUp+0x8e>
 4ea:	ba 01       	movw	r22, r20
 4ec:	62 2b       	or	r22, r18
 4ee:	65 bb       	out	0x15, r22	; 21
 4f0:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 4f2:	81 b3       	in	r24, 0x11	; 17
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	06 2e       	mov	r0, r22
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <dio_vidEnablePullUp+0xaa>
 4fa:	95 95       	asr	r25
 4fc:	87 95       	ror	r24
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <dio_vidEnablePullUp+0xa6>
 502:	80 fd       	sbrc	r24, 0
 504:	0c c0       	rjmp	.+24     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 506:	22 b3       	in	r18, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	ac 01       	movw	r20, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <dio_vidEnablePullUp+0xc0>
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <dio_vidEnablePullUp+0xbc>
 518:	ba 01       	movw	r22, r20
 51a:	62 2b       	or	r22, r18
 51c:	62 bb       	out	0x12, r22	; 18
 51e:	08 95       	ret

00000520 <EXT0_voidInit>:
	#elif EXT0_SENSE_MODE == RISING
	SET_BIT(MCUCR , 0);
	SET_BIT(MCUCR , 1);
	
	#elif EXT0_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 0);
 520:	85 b7       	in	r24, 0x35	; 53
 522:	8e 7f       	andi	r24, 0xFE	; 254
 524:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR , 1);
 526:	85 b7       	in	r24, 0x35	; 53
 528:	82 60       	ori	r24, 0x02	; 2
 52a:	85 bf       	out	0x35, r24	; 53
	/* End ( if ) condition for Macros */

	
/** disable EXT0 in initialization function  **/
/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 6 );
 52c:	8b b7       	in	r24, 0x3b	; 59
 52e:	8f 7b       	andi	r24, 0xBF	; 191
 530:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GIFR , 6 ) ;
 532:	8a b7       	in	r24, 0x3a	; 58
 534:	80 64       	ori	r24, 0x40	; 64
 536:	8a bf       	out	0x3a, r24	; 58
	
	
}
 538:	08 95       	ret

0000053a <EXT0_voidEnable>:
/****************************************************************/

void EXT0_voidEnable()
{
	
	SET_BIT( GICR , 6 );
 53a:	8b b7       	in	r24, 0x3b	; 59
 53c:	80 64       	ori	r24, 0x40	; 64
 53e:	8b bf       	out	0x3b, r24	; 59
	
}
 540:	08 95       	ret

00000542 <EXT0_voidDisable>:
/****************************************************************/

void EXT0_voidDisable()
{
	
	CLEAR_BIT( GICR , 6 );
 542:	8b b7       	in	r24, 0x3b	; 59
 544:	8f 7b       	andi	r24, 0xBF	; 191
 546:	8b bf       	out	0x3b, r24	; 59
	
}
 548:	08 95       	ret

0000054a <EXT0_voidCallBack>:
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidCallBack( volatile void (*addresscpy) (void) )
{
	if(addresscpy != NULL)
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	21 f0       	breq	.+8      	; 0x556 <EXT0_voidCallBack+0xc>
	{
		x = addresscpy;
 54e:	90 93 61 00 	sts	0x0061, r25
 552:	80 93 60 00 	sts	0x0060, r24
 556:	08 95       	ret

00000558 <EXT0_voidSetSignalch>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/
void EXT0_voidSetSignalch(u8 SenseCpy)
{
	if( SenseCpy == IOC)
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	39 f4       	brne	.+14     	; 0x56a <EXT0_voidSetSignalch+0x12>
	{
		SET_BIT(MCUCR , 2);
 55c:	85 b7       	in	r24, 0x35	; 53
 55e:	84 60       	ori	r24, 0x04	; 4
 560:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR , 3);
 562:	85 b7       	in	r24, 0x35	; 53
 564:	87 7f       	andi	r24, 0xF7	; 247
 566:	85 bf       	out	0x35, r24	; 53
 568:	08 95       	ret
	}

	else if( SenseCpy == RISING)
 56a:	87 30       	cpi	r24, 0x07	; 7
 56c:	39 f4       	brne	.+14     	; 0x57c <EXT0_voidSetSignalch+0x24>
	{
		SET_BIT(MCUCR , 2);
 56e:	85 b7       	in	r24, 0x35	; 53
 570:	84 60       	ori	r24, 0x04	; 4
 572:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR , 3);
 574:	85 b7       	in	r24, 0x35	; 53
 576:	88 60       	ori	r24, 0x08	; 8
 578:	85 bf       	out	0x35, r24	; 53
 57a:	08 95       	ret

	}


	else if( SenseCpy == FALLING)
 57c:	84 30       	cpi	r24, 0x04	; 4
 57e:	39 f4       	brne	.+14     	; 0x58e <EXT0_voidSetSignalch+0x36>
	{
		CLEAR_BIT(MCUCR , 2);
 580:	85 b7       	in	r24, 0x35	; 53
 582:	8b 7f       	andi	r24, 0xFB	; 251
 584:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR , 3);
 586:	85 b7       	in	r24, 0x35	; 53
 588:	88 60       	ori	r24, 0x08	; 8
 58a:	85 bf       	out	0x35, r24	; 53
 58c:	08 95       	ret

	}


	else if( SenseCpy == LOW_LEVEL)
 58e:	8a 30       	cpi	r24, 0x0A	; 10
 590:	31 f4       	brne	.+12     	; 0x59e <EXT0_voidSetSignalch+0x46>
	{
		CLEAR_BIT(MCUCR , 2);
 592:	85 b7       	in	r24, 0x35	; 53
 594:	8b 7f       	andi	r24, 0xFB	; 251
 596:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR , 3);
 598:	85 b7       	in	r24, 0x35	; 53
 59a:	87 7f       	andi	r24, 0xF7	; 247
 59c:	85 bf       	out	0x35, r24	; 53
 59e:	08 95       	ret

000005a0 <__vector_1>:
/** Linker Problem solved */
void __vector_1(void) __attribute__(( signal , used ));


void __vector_1(void)
{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	2f 93       	push	r18
 5ac:	3f 93       	push	r19
 5ae:	4f 93       	push	r20
 5b0:	5f 93       	push	r21
 5b2:	6f 93       	push	r22
 5b4:	7f 93       	push	r23
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
 5be:	ef 93       	push	r30
 5c0:	ff 93       	push	r31
	x();
 5c2:	e0 91 60 00 	lds	r30, 0x0060
 5c6:	f0 91 61 00 	lds	r31, 0x0061
 5ca:	09 95       	icall
	
}
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <GIE_voidGlobalInterruptEnable>:

#define SREG    *((volatile u8*)0x5F)

void GIE_voidGlobalInterruptEnable(void)
{
	SET_BIT(SREG,7);
 5ee:	8f b7       	in	r24, 0x3f	; 63
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	8f bf       	out	0x3f, r24	; 63
}
 5f4:	08 95       	ret

000005f6 <GIE_voidGlobalInterruptDisable>:

void GIE_voidGlobalInterruptDisable(void)
{
	CLEAR_BIT(SREG,7);
 5f6:	8f b7       	in	r24, 0x3f	; 63
 5f8:	8f 77       	andi	r24, 0x7F	; 127
 5fa:	8f bf       	out	0x3f, r24	; 63
}
 5fc:	08 95       	ret

000005fe <voidISRTimer>:
	u8EdgeCounter	= 0;
}
	
void voidISRTimer(void)
{
	u8TimerCounter++;
 5fe:	80 91 62 00 	lds	r24, 0x0062
 602:	8f 5f       	subi	r24, 0xFF	; 255
 604:	80 93 62 00 	sts	0x0062, r24
 608:	08 95       	ret

0000060a <IR_voidGetFrame>:
	GIE_voidGlobalInterruptEnable();
	TIMER2_void_SetCTCCallBack(voidISRTimer);
}

void IR_voidGetFrame(void)
{
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
	u8 u8DataCounter=0;
	
	if ( 0 == u8StartFlag )
 612:	80 91 2d 01 	lds	r24, 0x012D
 616:	88 23       	and	r24, r24
 618:	31 f4       	brne	.+12     	; 0x626 <IR_voidGetFrame+0x1c>
	{
		/* Start Timer */
		TIMER2_void_EnableCTCInt();
 61a:	0e 94 01 04 	call	0x802	; 0x802 <TIMER2_void_EnableCTCInt>
		u8StartFlag = 1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 2d 01 	sts	0x012D, r24
 624:	16 c0       	rjmp	.+44     	; 0x652 <IR_voidGetFrame+0x48>
	}
	else
	{   /* Save Time in this array */
		u32FrameData[u8EdgeCounter] = TCNT2;
 626:	e0 91 64 00 	lds	r30, 0x0064
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	84 b5       	in	r24, 0x24	; 36
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	a0 e0       	ldi	r26, 0x00	; 0
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	ee 0f       	add	r30, r30
 636:	ff 1f       	adc	r31, r31
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	eb 59       	subi	r30, 0x9B	; 155
 63e:	ff 4f       	sbci	r31, 0xFF	; 255
 640:	80 83       	st	Z, r24
 642:	91 83       	std	Z+1, r25	; 0x01
 644:	a2 83       	std	Z+2, r26	; 0x02
 646:	b3 83       	std	Z+3, r27	; 0x03
		TCNT2 = 0;
 648:	14 bc       	out	0x24, r1	; 36
		TIMER2_void_DisableCTCInt();
 64a:	0e 94 05 04 	call	0x80a	; 0x80a <TIMER2_void_DisableCTCInt>
		TIMER2_void_EnableCTCInt();
 64e:	0e 94 01 04 	call	0x802	; 0x802 <TIMER2_void_EnableCTCInt>
	}

	if( ( u32FrameData[0] >= 10000 ) && (u32FrameData[0] <= 14000 ))
 652:	80 91 65 00 	lds	r24, 0x0065
 656:	90 91 66 00 	lds	r25, 0x0066
 65a:	a0 91 67 00 	lds	r26, 0x0067
 65e:	b0 91 68 00 	lds	r27, 0x0068
 662:	80 31       	cpi	r24, 0x10	; 16
 664:	27 e2       	ldi	r18, 0x27	; 39
 666:	92 07       	cpc	r25, r18
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	a2 07       	cpc	r26, r18
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	b2 07       	cpc	r27, r18
 670:	08 f4       	brcc	.+2      	; 0x674 <IR_voidGetFrame+0x6a>
 672:	62 c0       	rjmp	.+196    	; 0x738 <IR_voidGetFrame+0x12e>
 674:	80 91 65 00 	lds	r24, 0x0065
 678:	90 91 66 00 	lds	r25, 0x0066
 67c:	a0 91 67 00 	lds	r26, 0x0067
 680:	b0 91 68 00 	lds	r27, 0x0068
 684:	81 3b       	cpi	r24, 0xB1	; 177
 686:	46 e3       	ldi	r20, 0x36	; 54
 688:	94 07       	cpc	r25, r20
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	a4 07       	cpc	r26, r20
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	b4 07       	cpc	r27, r20
 692:	08 f0       	brcs	.+2      	; 0x696 <IR_voidGetFrame+0x8c>
 694:	51 c0       	rjmp	.+162    	; 0x738 <IR_voidGetFrame+0x12e>
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(u8DataCounter=0;u8DataCounter<8;u8DataCounter++)
		{
			if( ( u32FrameData[17+u8DataCounter] >= 2000 ) && ( u32FrameData[17+u8DataCounter] <= 2300 ) )
 69a:	c5 e6       	ldi	r28, 0x65	; 101
 69c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				SET_BIT(u8Data,u8DataCounter);
			}
			else
			{
				CLEAR_BIT(u8Data,u8DataCounter);
 69e:	01 e0       	ldi	r16, 0x01	; 1
 6a0:	10 e0       	ldi	r17, 0x00	; 0

	if( ( u32FrameData[0] >= 10000 ) && (u32FrameData[0] <= 14000 ))
	{
		for(u8DataCounter=0;u8DataCounter<8;u8DataCounter++)
		{
			if( ( u32FrameData[17+u8DataCounter] >= 2000 ) && ( u32FrameData[17+u8DataCounter] <= 2300 ) )
 6a2:	62 2f       	mov	r22, r18
	TIMER2_void_SetCompareVal(COMPARE_MATCH_VAL);
	GIE_voidGlobalInterruptEnable();
	TIMER2_void_SetCTCCallBack(voidISRTimer);
}

void IR_voidGetFrame(void)
 6a4:	a9 01       	movw	r20, r18
 6a6:	4f 5e       	subi	r20, 0xEF	; 239
 6a8:	5f 4f       	sbci	r21, 0xFF	; 255

	if( ( u32FrameData[0] >= 10000 ) && (u32FrameData[0] <= 14000 ))
	{
		for(u8DataCounter=0;u8DataCounter<8;u8DataCounter++)
		{
			if( ( u32FrameData[17+u8DataCounter] >= 2000 ) && ( u32FrameData[17+u8DataCounter] <= 2300 ) )
 6aa:	fa 01       	movw	r30, r20
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	ec 0f       	add	r30, r28
 6b6:	fd 1f       	adc	r31, r29
 6b8:	80 81       	ld	r24, Z
 6ba:	91 81       	ldd	r25, Z+1	; 0x01
 6bc:	a2 81       	ldd	r26, Z+2	; 0x02
 6be:	b3 81       	ldd	r27, Z+3	; 0x03
 6c0:	80 3d       	cpi	r24, 0xD0	; 208
 6c2:	77 e0       	ldi	r23, 0x07	; 7
 6c4:	97 07       	cpc	r25, r23
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	a7 07       	cpc	r26, r23
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	b7 07       	cpc	r27, r23
 6ce:	08 f1       	brcs	.+66     	; 0x712 <IR_voidGetFrame+0x108>
 6d0:	fa 01       	movw	r30, r20
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	ec 0f       	add	r30, r28
 6dc:	fd 1f       	adc	r31, r29
 6de:	80 81       	ld	r24, Z
 6e0:	91 81       	ldd	r25, Z+1	; 0x01
 6e2:	a2 81       	ldd	r26, Z+2	; 0x02
 6e4:	b3 81       	ldd	r27, Z+3	; 0x03
 6e6:	8d 3f       	cpi	r24, 0xFD	; 253
 6e8:	48 e0       	ldi	r20, 0x08	; 8
 6ea:	94 07       	cpc	r25, r20
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	a4 07       	cpc	r26, r20
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	b4 07       	cpc	r27, r20
 6f4:	70 f4       	brcc	.+28     	; 0x712 <IR_voidGetFrame+0x108>
			{
				SET_BIT(u8Data,u8DataCounter);
 6f6:	80 91 63 00 	lds	r24, 0x0063
 6fa:	a8 01       	movw	r20, r16
 6fc:	02 2e       	mov	r0, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <IR_voidGetFrame+0xfa>
 700:	44 0f       	add	r20, r20
 702:	55 1f       	adc	r21, r21
 704:	0a 94       	dec	r0
 706:	e2 f7       	brpl	.-8      	; 0x700 <IR_voidGetFrame+0xf6>
 708:	ba 01       	movw	r22, r20
 70a:	68 2b       	or	r22, r24
 70c:	60 93 63 00 	sts	0x0063, r22
 710:	0d c0       	rjmp	.+26     	; 0x72c <IR_voidGetFrame+0x122>
			}
			else
			{
				CLEAR_BIT(u8Data,u8DataCounter);
 712:	80 91 63 00 	lds	r24, 0x0063
 716:	a8 01       	movw	r20, r16
 718:	02 c0       	rjmp	.+4      	; 0x71e <IR_voidGetFrame+0x114>
 71a:	44 0f       	add	r20, r20
 71c:	55 1f       	adc	r21, r21
 71e:	6a 95       	dec	r22
 720:	e2 f7       	brpl	.-8      	; 0x71a <IR_voidGetFrame+0x110>
 722:	ba 01       	movw	r22, r20
 724:	60 95       	com	r22
 726:	68 23       	and	r22, r24
 728:	60 93 63 00 	sts	0x0063, r22
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
		TIMER2_void_EnableCTCInt();
	}

	if( ( u32FrameData[0] >= 10000 ) && (u32FrameData[0] <= 14000 ))
	{
		for(u8DataCounter=0;u8DataCounter<8;u8DataCounter++)
 730:	28 30       	cpi	r18, 0x08	; 8
 732:	31 05       	cpc	r19, r1
 734:	09 f0       	breq	.+2      	; 0x738 <IR_voidGetFrame+0x12e>
 736:	b5 cf       	rjmp	.-150    	; 0x6a2 <IR_voidGetFrame+0x98>
	}
	else
	{
		/* Invalid Frame */
	}
	u8StartFlag		= 0;
 738:	10 92 2d 01 	sts	0x012D, r1
	u32FrameData[0] = 0;
 73c:	10 92 65 00 	sts	0x0065, r1
 740:	10 92 66 00 	sts	0x0066, r1
 744:	10 92 67 00 	sts	0x0067, r1
 748:	10 92 68 00 	sts	0x0068, r1
	u8EdgeCounter	= 0;
 74c:	10 92 64 00 	sts	0x0064, r1
}
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	08 95       	ret

0000075a <IR_voidInit>:
volatile u8 u8TimerCounter    = 0;
 
void IR_voidInit(void)
{
	/* IO initialization */
	dio_vidConfigChannel(DIO_PORTA,0,INPUT);
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTC,1,OUTPUT);
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTC,2,OUTPUT);
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	62 e0       	ldi	r22, 0x02	; 2
 772:	41 e0       	ldi	r20, 0x01	; 1
 774:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	
	/* EXTI0 Initialization */
	EXT0_voidCallBack(IR_voidGetFrame);
 778:	85 e0       	ldi	r24, 0x05	; 5
 77a:	93 e0       	ldi	r25, 0x03	; 3
 77c:	0e 94 a5 02 	call	0x54a	; 0x54a <EXT0_voidCallBack>
	EXT0_voidInit();
 780:	0e 94 90 02 	call	0x520	; 0x520 <EXT0_voidInit>
	EXT0_voidEnable();
 784:	0e 94 9d 02 	call	0x53a	; 0x53a <EXT0_voidEnable>
	
	/* TIMER2 Initialization every 1 micro second */
	TIMER2_void_Init();
 788:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <TIMER2_void_Init>
	TIMER2_void_SetCompareVal(COMPARE_MATCH_VAL);
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TIMER2_void_SetCompareVal>
	GIE_voidGlobalInterruptEnable();
 792:	0e 94 f7 02 	call	0x5ee	; 0x5ee <GIE_voidGlobalInterruptEnable>
	TIMER2_void_SetCTCCallBack(voidISRTimer);
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	92 e0       	ldi	r25, 0x02	; 2
 79a:	0e 94 0e 04 	call	0x81c	; 0x81c <TIMER2_void_SetCTCCallBack>
}
 79e:	08 95       	ret

000007a0 <main>:




int main(void)
{
 7a0:	ff cf       	rjmp	.-2      	; 0x7a0 <main>

000007a2 <TIMER2_void_Init>:
void (*TIMER2_CTC_CallBack) (void) ;

void TIMER2_void_Init(void)
{
	#if(TIMER2_MODE == TIMER2_NORMAL)
		CLEAR_BIT(TCCR2 , 6);
 7a2:	85 b5       	in	r24, 0x25	; 37
 7a4:	8f 7b       	andi	r24, 0xBF	; 191
 7a6:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 3);
 7a8:	85 b5       	in	r24, 0x25	; 37
 7aa:	87 7f       	andi	r24, 0xF7	; 247
 7ac:	85 bd       	out	0x25, r24	; 37
	#elif(TIMER2_PRESCALER == TIMER2_DIV_BY_256 )
		CLEAR_BIT(TCCR2 , 0);
		SET_BIT(TCCR2 , 1);
		SET_BIT(TCCR2 , 2);
	#elif(TIMER2_PRESCALER == TIMER2_DIV_BY_1024 )
		SET_BIT(TCCR2 , 0);
 7ae:	85 b5       	in	r24, 0x25	; 37
 7b0:	81 60       	ori	r24, 0x01	; 1
 7b2:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 1);
 7b4:	85 b5       	in	r24, 0x25	; 37
 7b6:	82 60       	ori	r24, 0x02	; 2
 7b8:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 2);
 7ba:	85 b5       	in	r24, 0x25	; 37
 7bc:	84 60       	ori	r24, 0x04	; 4
 7be:	85 bd       	out	0x25, r24	; 37
		
	#endif
	
	#if(TIMER2_COM_EVENT == TIMER2_NO_ACTION)
		CLEAR_BIT(TCCR2 , 4);
 7c0:	85 b5       	in	r24, 0x25	; 37
 7c2:	8f 7e       	andi	r24, 0xEF	; 239
 7c4:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 5);
 7c6:	85 b5       	in	r24, 0x25	; 37
 7c8:	8f 7d       	andi	r24, 0xDF	; 223
 7ca:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 5);

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);	
 7cc:	89 b7       	in	r24, 0x39	; 57
 7ce:	8e 7f       	andi	r24, 0xFE	; 254
 7d0:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 7d2:	89 b7       	in	r24, 0x39	; 57
 7d4:	8d 7f       	andi	r24, 0xFD	; 253
 7d6:	89 bf       	out	0x39, r24	; 57
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);	
 7d8:	88 b7       	in	r24, 0x38	; 56
 7da:	81 60       	ori	r24, 0x01	; 1
 7dc:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 7de:	88 b7       	in	r24, 0x38	; 56
 7e0:	82 60       	ori	r24, 0x02	; 2
 7e2:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT2 = 0 ;
 7e4:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0 ;
 7e6:	13 bc       	out	0x23, r1	; 35
	
	
}
 7e8:	08 95       	ret

000007ea <TIMER2_void_SetTimerReg>:

void TIMER2_void_SetTimerReg(u8 Copy_uint8Val)
{
	TCNT2 = Copy_uint8Val ;
 7ea:	84 bd       	out	0x24, r24	; 36
}
 7ec:	08 95       	ret

000007ee <TIMER2_void_SetCompareVal>:

void TIMER2_void_SetCompareVal(u8 Copy_uint8Val)
{
	OCR2 = Copy_uint8Val ;
 7ee:	83 bd       	out	0x23, r24	; 35
}
 7f0:	08 95       	ret

000007f2 <TIMER2_void_EnableOVInt>:

void TIMER2_void_EnableOVInt(void)
{
	SET_BIT(TIMSK , 6);
 7f2:	89 b7       	in	r24, 0x39	; 57
 7f4:	80 64       	ori	r24, 0x40	; 64
 7f6:	89 bf       	out	0x39, r24	; 57
}
 7f8:	08 95       	ret

000007fa <TIMER2_void_DisableOVInt>:

void TIMER2_void_DisableOVInt(void)
{
	CLEAR_BIT(TIMSK , 6);
 7fa:	89 b7       	in	r24, 0x39	; 57
 7fc:	8f 7b       	andi	r24, 0xBF	; 191
 7fe:	89 bf       	out	0x39, r24	; 57
}
 800:	08 95       	ret

00000802 <TIMER2_void_EnableCTCInt>:

void TIMER2_void_EnableCTCInt(void)
{
	SET_BIT(TIMSK , 7);
 802:	89 b7       	in	r24, 0x39	; 57
 804:	80 68       	ori	r24, 0x80	; 128
 806:	89 bf       	out	0x39, r24	; 57
}
 808:	08 95       	ret

0000080a <TIMER2_void_DisableCTCInt>:

void TIMER2_void_DisableCTCInt(void)
{
	CLEAR_BIT(TIMSK , 7);
 80a:	89 b7       	in	r24, 0x39	; 57
 80c:	8f 77       	andi	r24, 0x7F	; 127
 80e:	89 bf       	out	0x39, r24	; 57
}
 810:	08 95       	ret

00000812 <TIMER2_void_SetOVCallBack>:

void TIMER2_void_SetOVCallBack(void (*Copy_ptr) (void) )
{
	TIMER2_OV_CallBack = Copy_ptr ;
 812:	90 93 31 01 	sts	0x0131, r25
 816:	80 93 30 01 	sts	0x0130, r24
}
 81a:	08 95       	ret

0000081c <TIMER2_void_SetCTCCallBack>:

void TIMER2_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
	TIMER2_CTC_CallBack = Copy_ptr ;
 81c:	90 93 2f 01 	sts	0x012F, r25
 820:	80 93 2e 01 	sts	0x012E, r24
	
}
 824:	08 95       	ret

00000826 <__vector_5>:

void __vector_5(void) __attribute__((signal , used));
void __vector_5(void)
{
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	2f 93       	push	r18
 832:	3f 93       	push	r19
 834:	4f 93       	push	r20
 836:	5f 93       	push	r21
 838:	6f 93       	push	r22
 83a:	7f 93       	push	r23
 83c:	8f 93       	push	r24
 83e:	9f 93       	push	r25
 840:	af 93       	push	r26
 842:	bf 93       	push	r27
 844:	ef 93       	push	r30
 846:	ff 93       	push	r31
	
	TIMER2_OV_CallBack();
 848:	e0 91 30 01 	lds	r30, 0x0130
 84c:	f0 91 31 01 	lds	r31, 0x0131
 850:	09 95       	icall
}
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <__vector_4>:

void __vector_4(void) __attribute__((signal , used));
void __vector_4(void)
{
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	2f 93       	push	r18
 880:	3f 93       	push	r19
 882:	4f 93       	push	r20
 884:	5f 93       	push	r21
 886:	6f 93       	push	r22
 888:	7f 93       	push	r23
 88a:	8f 93       	push	r24
 88c:	9f 93       	push	r25
 88e:	af 93       	push	r26
 890:	bf 93       	push	r27
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31
	
	TIMER2_CTC_CallBack();
 896:	e0 91 2e 01 	lds	r30, 0x012E
 89a:	f0 91 2f 01 	lds	r31, 0x012F
 89e:	09 95       	icall
}
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
