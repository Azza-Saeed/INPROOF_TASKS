
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000440  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000440  000004b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f7  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025b  00000000  00000000  0000149f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002dc  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000383  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  8a:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	19 f1       	breq	.+70     	; 0xdc <dio_vidConfigChannel+0x4a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <dio_vidConfigChannel+0xa>
  9a:	3d c0       	rjmp	.+122    	; 0x116 <dio_vidConfigChannel+0x84>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	09 f0       	breq	.+2      	; 0xa2 <dio_vidConfigChannel+0x10>
  a0:	56 c0       	rjmp	.+172    	; 0x14e <dio_vidConfigChannel+0xbc>
	{
	case DIO_PORTB:
		if (direction == OUTPUT)
  a2:	41 30       	cpi	r20, 0x01	; 1
  a4:	69 f4       	brne	.+26     	; 0xc0 <dio_vidConfigChannel+0x2e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  a6:	27 b3       	in	r18, 0x17	; 23
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	ac 01       	movw	r20, r24
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <dio_vidConfigChannel+0x22>
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <dio_vidConfigChannel+0x1e>
  b8:	ba 01       	movw	r22, r20
  ba:	62 2b       	or	r22, r18
  bc:	67 bb       	out	0x17, r22	; 23
  be:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  c0:	27 b3       	in	r18, 0x17	; 23
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	ac 01       	movw	r20, r24
  c8:	02 c0       	rjmp	.+4      	; 0xce <dio_vidConfigChannel+0x3c>
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <dio_vidConfigChannel+0x38>
  d2:	ba 01       	movw	r22, r20
  d4:	60 95       	com	r22
  d6:	62 23       	and	r22, r18
  d8:	67 bb       	out	0x17, r22	; 23
  da:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	69 f4       	brne	.+26     	; 0xfa <dio_vidConfigChannel+0x68>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  e0:	24 b3       	in	r18, 0x14	; 20
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	ac 01       	movw	r20, r24
  e8:	02 c0       	rjmp	.+4      	; 0xee <dio_vidConfigChannel+0x5c>
  ea:	44 0f       	add	r20, r20
  ec:	55 1f       	adc	r21, r21
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <dio_vidConfigChannel+0x58>
  f2:	ba 01       	movw	r22, r20
  f4:	62 2b       	or	r22, r18
  f6:	64 bb       	out	0x14, r22	; 20
  f8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
  fa:	24 b3       	in	r18, 0x14	; 20
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	ac 01       	movw	r20, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <dio_vidConfigChannel+0x76>
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <dio_vidConfigChannel+0x72>
 10c:	ba 01       	movw	r22, r20
 10e:	60 95       	com	r22
 110:	62 23       	and	r22, r18
 112:	64 bb       	out	0x14, r22	; 20
 114:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	69 f4       	brne	.+26     	; 0x134 <dio_vidConfigChannel+0xa2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 11a:	21 b3       	in	r18, 0x11	; 17
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	ac 01       	movw	r20, r24
 122:	02 c0       	rjmp	.+4      	; 0x128 <dio_vidConfigChannel+0x96>
 124:	44 0f       	add	r20, r20
 126:	55 1f       	adc	r21, r21
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <dio_vidConfigChannel+0x92>
 12c:	ba 01       	movw	r22, r20
 12e:	62 2b       	or	r22, r18
 130:	61 bb       	out	0x11, r22	; 17
 132:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ac 01       	movw	r20, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <dio_vidConfigChannel+0xb0>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <dio_vidConfigChannel+0xac>
 146:	ba 01       	movw	r22, r20
 148:	60 95       	com	r22
 14a:	62 23       	and	r22, r18
 14c:	61 bb       	out	0x11, r22	; 17
 14e:	08 95       	ret

00000150 <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	31 f0       	breq	.+12     	; 0x160 <dio_vidConfigPort+0x10>
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	31 f0       	breq	.+12     	; 0x164 <dio_vidConfigPort+0x14>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	29 f4       	brne	.+10     	; 0x166 <dio_vidConfigPort+0x16>
	{
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 15c:	67 bb       	out	0x17, r22	; 23
 15e:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 160:	64 bb       	out	0x14, r22	; 20
 162:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 164:	61 bb       	out	0x11, r22	; 17
 166:	08 95       	ret

00000168 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	31 f0       	breq	.+12     	; 0x178 <dio_vidSetPortValue+0x10>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	31 f0       	breq	.+12     	; 0x17c <dio_vidSetPortValue+0x14>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	29 f4       	brne	.+10     	; 0x17e <dio_vidSetPortValue+0x16>
	{
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 174:	68 bb       	out	0x18, r22	; 24
 176:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 178:	65 bb       	out	0x15, r22	; 21
 17a:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 17c:	62 bb       	out	0x12, r22	; 18
 17e:	08 95       	ret

00000180 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	19 f1       	breq	.+70     	; 0x1ca <dio_vidWriteChannel+0x4a>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	09 f4       	brne	.+2      	; 0x18a <dio_vidWriteChannel+0xa>
 188:	3d c0       	rjmp	.+122    	; 0x204 <dio_vidWriteChannel+0x84>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	09 f0       	breq	.+2      	; 0x190 <dio_vidWriteChannel+0x10>
 18e:	56 c0       	rjmp	.+172    	; 0x23c <dio_vidWriteChannel+0xbc>
	{
	case DIO_PORTB:
		if (level == STD_LOW)
 190:	44 23       	and	r20, r20
 192:	71 f4       	brne	.+28     	; 0x1b0 <dio_vidWriteChannel+0x30>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	ac 01       	movw	r20, r24
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <dio_vidWriteChannel+0x22>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <dio_vidWriteChannel+0x1e>
 1a6:	ba 01       	movw	r22, r20
 1a8:	60 95       	com	r22
 1aa:	62 23       	and	r22, r18
 1ac:	68 bb       	out	0x18, r22	; 24
 1ae:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	ac 01       	movw	r20, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <dio_vidWriteChannel+0x3e>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <dio_vidWriteChannel+0x3a>
 1c2:	ba 01       	movw	r22, r20
 1c4:	62 2b       	or	r22, r18
 1c6:	68 bb       	out	0x18, r22	; 24
 1c8:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 1ca:	44 23       	and	r20, r20
 1cc:	71 f4       	brne	.+28     	; 0x1ea <dio_vidWriteChannel+0x6a>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 1ce:	25 b3       	in	r18, 0x15	; 21
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	ac 01       	movw	r20, r24
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <dio_vidWriteChannel+0x5c>
 1d8:	44 0f       	add	r20, r20
 1da:	55 1f       	adc	r21, r21
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <dio_vidWriteChannel+0x58>
 1e0:	ba 01       	movw	r22, r20
 1e2:	60 95       	com	r22
 1e4:	62 23       	and	r22, r18
 1e6:	65 bb       	out	0x15, r22	; 21
 1e8:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1ea:	25 b3       	in	r18, 0x15	; 21
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	ac 01       	movw	r20, r24
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <dio_vidWriteChannel+0x78>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <dio_vidWriteChannel+0x74>
 1fc:	ba 01       	movw	r22, r20
 1fe:	62 2b       	or	r22, r18
 200:	65 bb       	out	0x15, r22	; 21
 202:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 204:	44 23       	and	r20, r20
 206:	71 f4       	brne	.+28     	; 0x224 <dio_vidWriteChannel+0xa4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 208:	22 b3       	in	r18, 0x12	; 18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	ac 01       	movw	r20, r24
 210:	02 c0       	rjmp	.+4      	; 0x216 <dio_vidWriteChannel+0x96>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <dio_vidWriteChannel+0x92>
 21a:	ba 01       	movw	r22, r20
 21c:	60 95       	com	r22
 21e:	62 23       	and	r22, r18
 220:	62 bb       	out	0x12, r22	; 18
 222:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ac 01       	movw	r20, r24
 22c:	02 c0       	rjmp	.+4      	; 0x232 <dio_vidWriteChannel+0xb2>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <dio_vidWriteChannel+0xae>
 236:	ba 01       	movw	r22, r20
 238:	62 2b       	or	r22, r18
 23a:	62 bb       	out	0x12, r22	; 18
 23c:	08 95       	ret

0000023e <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	a1 f0       	breq	.+40     	; 0x26a <dio_vidWriteChannelGroup+0x2c>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	09 f1       	breq	.+66     	; 0x288 <dio_vidWriteChannelGroup+0x4a>
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	71 f5       	brne	.+92     	; 0x2a6 <dio_vidWriteChannelGroup+0x68>
	{
		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	94 2f       	mov	r25, r20
 24e:	90 95       	com	r25
 250:	89 23       	and	r24, r25
 252:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 254:	e6 2f       	mov	r30, r22
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	bf 01       	movw	r22, r30
 25a:	02 c0       	rjmp	.+4      	; 0x260 <dio_vidWriteChannelGroup+0x22>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	2a 95       	dec	r18
 262:	e2 f7       	brpl	.-8      	; 0x25c <dio_vidWriteChannelGroup+0x1e>
 264:	64 23       	and	r22, r20
 266:	68 bb       	out	0x18, r22	; 24
		break;
 268:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 26a:	85 b3       	in	r24, 0x15	; 21
 26c:	94 2f       	mov	r25, r20
 26e:	90 95       	com	r25
 270:	89 23       	and	r24, r25
 272:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	cb 01       	movw	r24, r22
 278:	02 c0       	rjmp	.+4      	; 0x27e <dio_vidWriteChannelGroup+0x40>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	2a 95       	dec	r18
 280:	e2 f7       	brpl	.-8      	; 0x27a <dio_vidWriteChannelGroup+0x3c>
 282:	84 23       	and	r24, r20
 284:	85 bb       	out	0x15, r24	; 21
		break;
 286:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 288:	82 b3       	in	r24, 0x12	; 18
 28a:	94 2f       	mov	r25, r20
 28c:	90 95       	com	r25
 28e:	89 23       	and	r24, r25
 290:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	cb 01       	movw	r24, r22
 296:	02 c0       	rjmp	.+4      	; 0x29c <dio_vidWriteChannelGroup+0x5e>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	2a 95       	dec	r18
 29e:	e2 f7       	brpl	.-8      	; 0x298 <dio_vidWriteChannelGroup+0x5a>
 2a0:	9c 01       	movw	r18, r24
 2a2:	24 23       	and	r18, r20
 2a4:	22 bb       	out	0x12, r18	; 18
 2a6:	08 95       	ret

000002a8 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 2a8:	68 23       	and	r22, r24
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	cb 01       	movw	r24, r22
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <dio_vidReadChannelGroup+0xc>
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	4a 95       	dec	r20
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <dio_vidReadChannelGroup+0x8>
}
 2b8:	08 95       	ret

000002ba <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	89 f0       	breq	.+34     	; 0x2e0 <dio_vidFlipChannel+0x26>
 2be:	83 30       	cpi	r24, 0x03	; 3
 2c0:	e1 f0       	breq	.+56     	; 0x2fa <dio_vidFlipChannel+0x40>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	31 f5       	brne	.+76     	; 0x312 <dio_vidFlipChannel+0x58>
	{
	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <dio_vidFlipChannel+0x1a>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <dio_vidFlipChannel+0x16>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 27       	eor	r22, r18
 2dc:	68 bb       	out	0x18, r22	; 24
		break;
 2de:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	ac 01       	movw	r20, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <dio_vidFlipChannel+0x34>
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <dio_vidFlipChannel+0x30>
 2f2:	ba 01       	movw	r22, r20
 2f4:	62 27       	eor	r22, r18
 2f6:	65 bb       	out	0x15, r22	; 21
		break;
 2f8:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 2fa:	22 b3       	in	r18, 0x12	; 18
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	ac 01       	movw	r20, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <dio_vidFlipChannel+0x4e>
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <dio_vidFlipChannel+0x4a>
 30c:	ba 01       	movw	r22, r20
 30e:	62 27       	eor	r22, r18
 310:	62 bb       	out	0x12, r22	; 18
 312:	08 95       	ret

00000314 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	71 f0       	breq	.+28     	; 0x334 <dio_dioLevelReadChannel+0x20>
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	b1 f0       	breq	.+44     	; 0x348 <dio_dioLevelReadChannel+0x34>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	f1 f4       	brne	.+60     	; 0x35c <dio_dioLevelReadChannel+0x48>
	{
	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 320:	26 b3       	in	r18, 0x16	; 22
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	c9 01       	movw	r24, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <dio_dioLevelReadChannel+0x18>
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <dio_dioLevelReadChannel+0x14>
 330:	81 70       	andi	r24, 0x01	; 1
		break;
 332:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 334:	23 b3       	in	r18, 0x13	; 19
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	c9 01       	movw	r24, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <dio_dioLevelReadChannel+0x2c>
 33c:	95 95       	asr	r25
 33e:	87 95       	ror	r24
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <dio_dioLevelReadChannel+0x28>
 344:	81 70       	andi	r24, 0x01	; 1
		break;
 346:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 348:	20 b3       	in	r18, 0x10	; 16
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	c9 01       	movw	r24, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <dio_dioLevelReadChannel+0x40>
 350:	95 95       	asr	r25
 352:	87 95       	ror	r24
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <dio_dioLevelReadChannel+0x3c>
 358:	81 70       	andi	r24, 0x01	; 1
		break;
 35a:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 35c:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 35e:	08 95       	ret

00000360 <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	e1 f0       	breq	.+56     	; 0x39c <dio_vidEnablePullUp+0x3c>
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	89 f1       	breq	.+98     	; 0x3ca <dio_vidEnablePullUp+0x6a>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <dio_vidEnablePullUp+0xe>
 36c:	44 c0       	rjmp	.+136    	; 0x3f6 <dio_vidEnablePullUp+0x96>
	{
		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 36e:	87 b3       	in	r24, 0x17	; 23
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	06 2e       	mov	r0, r22
 374:	02 c0       	rjmp	.+4      	; 0x37a <dio_vidEnablePullUp+0x1a>
 376:	95 95       	asr	r25
 378:	87 95       	ror	r24
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <dio_vidEnablePullUp+0x16>
 37e:	80 fd       	sbrc	r24, 0
 380:	3a c0       	rjmp	.+116    	; 0x3f6 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 382:	28 b3       	in	r18, 0x18	; 24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <dio_vidEnablePullUp+0x30>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <dio_vidEnablePullUp+0x2c>
 394:	ba 01       	movw	r22, r20
 396:	62 2b       	or	r22, r18
 398:	68 bb       	out	0x18, r22	; 24
 39a:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 39c:	84 b3       	in	r24, 0x14	; 20
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	06 2e       	mov	r0, r22
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <dio_vidEnablePullUp+0x48>
 3a4:	95 95       	asr	r25
 3a6:	87 95       	ror	r24
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <dio_vidEnablePullUp+0x44>
 3ac:	80 fd       	sbrc	r24, 0
 3ae:	23 c0       	rjmp	.+70     	; 0x3f6 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 3b0:	25 b3       	in	r18, 0x15	; 21
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	ac 01       	movw	r20, r24
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <dio_vidEnablePullUp+0x5e>
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <dio_vidEnablePullUp+0x5a>
 3c2:	ba 01       	movw	r22, r20
 3c4:	62 2b       	or	r22, r18
 3c6:	65 bb       	out	0x15, r22	; 21
 3c8:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 3ca:	81 b3       	in	r24, 0x11	; 17
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	06 2e       	mov	r0, r22
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <dio_vidEnablePullUp+0x76>
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <dio_vidEnablePullUp+0x72>
 3da:	80 fd       	sbrc	r24, 0
 3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 3de:	22 b3       	in	r18, 0x12	; 18
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	ac 01       	movw	r20, r24
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <dio_vidEnablePullUp+0x8c>
 3e8:	44 0f       	add	r20, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <dio_vidEnablePullUp+0x88>
 3f0:	ba 01       	movw	r22, r20
 3f2:	62 2b       	or	r22, r18
 3f4:	62 bb       	out	0x12, r22	; 18
 3f6:	08 95       	ret

000003f8 <main>:
	/*Slave_Config Slave_Obj={ SPI_INTERRUPT_DISABLE,SPI_LSB,SPI_RISING_LEADING,SPI_SAMPLE_LEADING};
	u8 u8Copy_data=0x44;
	u8 * Ptr_Received=0;
	
	SPI_Init_Slave(&Slave_Obj);*/
	dio_vidConfigChannel(DIO_PORTB,DIO_PIN0,OUTPUT);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	 		dio_vidFlipChannel(DIO_PORTD,DIO_PIN0);
	 		_delay_ms(500);
 		}
 		_delay_ms(200);*/
		 
      		dio_vidWriteChannel(DIO_PORTB,DIO_PIN0, STD_HIGH);
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	0e 94 c0 00 	call	0x180	; 0x180 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	8f e9       	ldi	r24, 0x9F	; 159
 40e:	96 e8       	ldi	r25, 0x86	; 134
 410:	a1 e0       	ldi	r26, 0x01	; 1
 412:	81 50       	subi	r24, 0x01	; 1
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	a0 40       	sbci	r26, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <main+0x1a>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <main+0x24>
 41c:	00 00       	nop
      		_delay_ms(500);
      		dio_vidWriteChannel(DIO_PORTB,DIO_PIN0, STD_LOW);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	0e 94 c0 00 	call	0x180	; 0x180 <dio_vidWriteChannel>
 428:	8f e9       	ldi	r24, 0x9F	; 159
 42a:	96 e8       	ldi	r25, 0x86	; 134
 42c:	a1 e0       	ldi	r26, 0x01	; 1
 42e:	81 50       	subi	r24, 0x01	; 1
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	a0 40       	sbci	r26, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <main+0x36>
 436:	00 c0       	rjmp	.+0      	; 0x438 <main+0x40>
 438:	00 00       	nop
 43a:	e3 cf       	rjmp	.-58     	; 0x402 <main+0xa>

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
