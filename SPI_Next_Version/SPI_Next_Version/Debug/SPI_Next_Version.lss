
SPI_Next_Version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000638  000006cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000006cc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf1  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035e  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045a  00000000  00000000  00001e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000022ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003be  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000724  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  8a:	0c 94 1a 03 	jmp	0x634	; 0x634 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BLUE_LED_Initializ>:

#include "BLUE_LED_Interface.h"

ERROR_STATE BLUE_LED_Initializ(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Direction(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_OUTPUT);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>
	return state_error;
}
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	08 95       	ret

000000a0 <BLUE_LED_ON>:
ERROR_STATE BLUE_LED_ON(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_HIGH);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	65 e0       	ldi	r22, 0x05	; 5
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_SetPin_Value>
	return state_error;
}
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	08 95       	ret

000000ae <BLUE_LED_OFF>:
ERROR_STATE BLUE_LED_OFF(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_LOW);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	65 e0       	ldi	r22, 0x05	; 5
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_SetPin_Value>
	return state_error;
}
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	08 95       	ret

000000bc <BLUE_LED_TGL>:
ERROR_STATE BLUE_LED_TGL(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_TglPin_Value(BLUE_LED_PORT,BLUE_LED_PIN);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	65 e0       	ldi	r22, 0x05	; 5
  c0:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_TglPin_Value>
	return state_error;
}
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	08 95       	ret

000000c8 <DIO_SetPin_Direction>:
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
	switch (state)
  c8:	44 23       	and	r20, r20
  ca:	21 f0       	breq	.+8      	; 0xd4 <DIO_SetPin_Direction+0xc>
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_SetPin_Direction+0xa>
  d0:	89 c0       	rjmp	.+274    	; 0x1e4 <DIO_SetPin_Direction+0x11c>
  d2:	46 c0       	rjmp	.+140    	; 0x160 <DIO_SetPin_Direction+0x98>
	{
		case DIO_INPUT:
		switch(port)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	b9 f0       	breq	.+46     	; 0x106 <DIO_SetPin_Direction+0x3e>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	30 f0       	brcs	.+12     	; 0xe8 <DIO_SetPin_Direction+0x20>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	11 f1       	breq	.+68     	; 0x124 <DIO_SetPin_Direction+0x5c>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	09 f0       	breq	.+2      	; 0xe6 <DIO_SetPin_Direction+0x1e>
  e4:	81 c0       	rjmp	.+258    	; 0x1e8 <DIO_SetPin_Direction+0x120>
  e6:	2d c0       	rjmp	.+90     	; 0x142 <DIO_SetPin_Direction+0x7a>
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  e8:	2a b3       	in	r18, 0x1a	; 26
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	ac 01       	movw	r20, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_SetPin_Direction+0x2e>
  f2:	44 0f       	add	r20, r20
  f4:	55 1f       	adc	r21, r21
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_SetPin_Direction+0x2a>
  fa:	ba 01       	movw	r22, r20
  fc:	60 95       	com	r22
  fe:	62 23       	and	r22, r18
 100:	6a bb       	out	0x1a, r22	; 26
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 102:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_INPUT:
		switch(port)
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
			break;
 104:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	ac 01       	movw	r20, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPin_Direction+0x4c>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPin_Direction+0x48>
 118:	ba 01       	movw	r22, r20
 11a:	60 95       	com	r22
 11c:	62 23       	and	r22, r18
 11e:	67 bb       	out	0x17, r22	; 23
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 120:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
			break;
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
			break;
 122:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SetPin_Direction+0x6a>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SetPin_Direction+0x66>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	64 bb       	out	0x14, r22	; 20
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 13e:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
			break;
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
			break;
 140:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 142:	21 b3       	in	r18, 0x11	; 17
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPin_Direction+0x88>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPin_Direction+0x84>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	61 bb       	out	0x11, r22	; 17
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 15c:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
			break;
 15e:	08 95       	ret
			state_error = FAIL;
			break;
		}
		break;
		case DIO_OUTPUT:
		switch(port)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	b1 f0       	breq	.+44     	; 0x190 <DIO_SetPin_Direction+0xc8>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	30 f0       	brcs	.+12     	; 0x174 <DIO_SetPin_Direction+0xac>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	01 f1       	breq	.+64     	; 0x1ac <DIO_SetPin_Direction+0xe4>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	09 f0       	breq	.+2      	; 0x172 <DIO_SetPin_Direction+0xaa>
 170:	3d c0       	rjmp	.+122    	; 0x1ec <DIO_SetPin_Direction+0x124>
 172:	2a c0       	rjmp	.+84     	; 0x1c8 <DIO_SetPin_Direction+0x100>
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 174:	2a b3       	in	r18, 0x1a	; 26
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPin_Direction+0xba>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPin_Direction+0xb6>
 186:	ba 01       	movw	r22, r20
 188:	62 2b       	or	r22, r18
 18a:	6a bb       	out	0x1a, r22	; 26
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 18c:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_OUTPUT:
		switch(port)
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
			break;
 18e:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 190:	27 b3       	in	r18, 0x17	; 23
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_SetPin_Direction+0xd6>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_SetPin_Direction+0xd2>
 1a2:	ba 01       	movw	r22, r20
 1a4:	62 2b       	or	r22, r18
 1a6:	67 bb       	out	0x17, r22	; 23
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
			break;
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
			break;
 1aa:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 1ac:	24 b3       	in	r18, 0x14	; 20
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPin_Direction+0xf2>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPin_Direction+0xee>
 1be:	ba 01       	movw	r22, r20
 1c0:	62 2b       	or	r22, r18
 1c2:	64 bb       	out	0x14, r22	; 20
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
			break;
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
			break;
 1c6:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	ac 01       	movw	r20, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPin_Direction+0x10e>
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPin_Direction+0x10a>
 1da:	ba 01       	movw	r22, r20
 1dc:	62 2b       	or	r22, r18
 1de:	61 bb       	out	0x11, r22	; 17
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
			break;
 1e2:	08 95       	ret
#include "DIO_Private.h"
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	08 95       	ret
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
			break;
			default:
			state_error = FAIL;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret
			break;
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
			break;
			default:
			state_error = FAIL;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		break;
	}
	return state_error;
}
 1ee:	08 95       	ret

000001f0 <DIO_SetPin_Value>:

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
	switch (status)
 1f0:	44 23       	and	r20, r20
 1f2:	21 f0       	breq	.+8      	; 0x1fc <DIO_SetPin_Value+0xc>
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_SetPin_Value+0xa>
 1f8:	89 c0       	rjmp	.+274    	; 0x30c <DIO_SetPin_Value+0x11c>
 1fa:	46 c0       	rjmp	.+140    	; 0x288 <DIO_SetPin_Value+0x98>
	{
		case DIO_LOW:
		switch(port)
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	b9 f0       	breq	.+46     	; 0x22e <DIO_SetPin_Value+0x3e>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	30 f0       	brcs	.+12     	; 0x210 <DIO_SetPin_Value+0x20>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	11 f1       	breq	.+68     	; 0x24c <DIO_SetPin_Value+0x5c>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	09 f0       	breq	.+2      	; 0x20e <DIO_SetPin_Value+0x1e>
 20c:	81 c0       	rjmp	.+258    	; 0x310 <DIO_SetPin_Value+0x120>
 20e:	2d c0       	rjmp	.+90     	; 0x26a <DIO_SetPin_Value+0x7a>
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	ac 01       	movw	r20, r24
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_SetPin_Value+0x2e>
 21a:	44 0f       	add	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_SetPin_Value+0x2a>
 222:	ba 01       	movw	r22, r20
 224:	60 95       	com	r22
 226:	62 23       	and	r22, r18
 228:	6b bb       	out	0x1b, r22	; 27
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 22a:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_LOW:
		switch(port)
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
			break;
 22c:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 22e:	28 b3       	in	r18, 0x18	; 24
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPin_Value+0x4c>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPin_Value+0x48>
 240:	ba 01       	movw	r22, r20
 242:	60 95       	com	r22
 244:	62 23       	and	r22, r18
 246:	68 bb       	out	0x18, r22	; 24
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 248:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
			break;
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
			break;
 24a:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 24c:	25 b3       	in	r18, 0x15	; 21
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	ac 01       	movw	r20, r24
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPin_Value+0x6a>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPin_Value+0x66>
 25e:	ba 01       	movw	r22, r20
 260:	60 95       	com	r22
 262:	62 23       	and	r22, r18
 264:	65 bb       	out	0x15, r22	; 21
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 266:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
			break;
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
			break;
 268:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 26a:	22 b3       	in	r18, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	ac 01       	movw	r20, r24
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_SetPin_Value+0x88>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_SetPin_Value+0x84>
 27c:	ba 01       	movw	r22, r20
 27e:	60 95       	com	r22
 280:	62 23       	and	r22, r18
 282:	62 bb       	out	0x12, r22	; 18
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 284:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
			break;
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
			break;
 286:	08 95       	ret
			state_error = FAIL;
			break;
		}
		break;
		case DIO_HIGH:
		switch(port)
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	b1 f0       	breq	.+44     	; 0x2b8 <DIO_SetPin_Value+0xc8>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	30 f0       	brcs	.+12     	; 0x29c <DIO_SetPin_Value+0xac>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	01 f1       	breq	.+64     	; 0x2d4 <DIO_SetPin_Value+0xe4>
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	09 f0       	breq	.+2      	; 0x29a <DIO_SetPin_Value+0xaa>
 298:	3d c0       	rjmp	.+122    	; 0x314 <DIO_SetPin_Value+0x124>
 29a:	2a c0       	rjmp	.+84     	; 0x2f0 <DIO_SetPin_Value+0x100>
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 29c:	2b b3       	in	r18, 0x1b	; 27
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPin_Value+0xba>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPin_Value+0xb6>
 2ae:	ba 01       	movw	r22, r20
 2b0:	62 2b       	or	r22, r18
 2b2:	6b bb       	out	0x1b, r22	; 27
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_HIGH:
		switch(port)
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
			break;
 2b6:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 2b8:	28 b3       	in	r18, 0x18	; 24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_SetPin_Value+0xd6>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_SetPin_Value+0xd2>
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 2b       	or	r22, r18
 2ce:	68 bb       	out	0x18, r22	; 24
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
			break;
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
			break;
 2d2:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 2d4:	25 b3       	in	r18, 0x15	; 21
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_SetPin_Value+0xf2>
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_SetPin_Value+0xee>
 2e6:	ba 01       	movw	r22, r20
 2e8:	62 2b       	or	r22, r18
 2ea:	65 bb       	out	0x15, r22	; 21
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
			break;
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
			break;
 2ee:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 2f0:	22 b3       	in	r18, 0x12	; 18
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ac 01       	movw	r20, r24
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_SetPin_Value+0x10e>
 2fa:	44 0f       	add	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_SetPin_Value+0x10a>
 302:	ba 01       	movw	r22, r20
 304:	62 2b       	or	r22, r18
 306:	62 bb       	out	0x12, r22	; 18
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 308:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
			break;
 30a:	08 95       	ret
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	08 95       	ret
			break;
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
			break;
			default:
			state_error = FAIL;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
			break;
			default:
			state_error = FAIL;
 314:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		break;
	}
	return state_error;
}
 316:	08 95       	ret

00000318 <DIO_TglPin_Value>:

ERROR_STATE DIO_TglPin_Value(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
	switch(port)
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	a9 f0       	breq	.+42     	; 0x346 <DIO_TglPin_Value+0x2e>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	28 f0       	brcs	.+10     	; 0x32a <DIO_TglPin_Value+0x12>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	f9 f0       	breq	.+62     	; 0x362 <DIO_TglPin_Value+0x4a>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	c9 f5       	brne	.+114    	; 0x39a <DIO_TglPin_Value+0x82>
 328:	2a c0       	rjmp	.+84     	; 0x37e <DIO_TglPin_Value+0x66>
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 32a:	2b b3       	in	r18, 0x1b	; 27
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	ac 01       	movw	r20, r24
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_TglPin_Value+0x20>
 334:	44 0f       	add	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_TglPin_Value+0x1c>
 33c:	ba 01       	movw	r22, r20
 33e:	62 27       	eor	r22, r18
 340:	6b bb       	out	0x1b, r22	; 27
	return state_error;
}

ERROR_STATE DIO_TglPin_Value(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 342:	81 e0       	ldi	r24, 0x01	; 1
	switch(port)
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
		break;
 344:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 346:	28 b3       	in	r18, 0x18	; 24
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ac 01       	movw	r20, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_TglPin_Value+0x3c>
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_TglPin_Value+0x38>
 358:	ba 01       	movw	r22, r20
 35a:	62 27       	eor	r22, r18
 35c:	68 bb       	out	0x18, r22	; 24
	return state_error;
}

ERROR_STATE DIO_TglPin_Value(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 35e:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
		break;
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
		break;
 360:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 362:	25 b3       	in	r18, 0x15	; 21
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_TglPin_Value+0x58>
 36c:	44 0f       	add	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_TglPin_Value+0x54>
 374:	ba 01       	movw	r22, r20
 376:	62 27       	eor	r22, r18
 378:	65 bb       	out	0x15, r22	; 21
	return state_error;
}

ERROR_STATE DIO_TglPin_Value(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 37a:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
 37c:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 37e:	22 b3       	in	r18, 0x12	; 18
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	ac 01       	movw	r20, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_TglPin_Value+0x74>
 388:	44 0f       	add	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_TglPin_Value+0x70>
 390:	ba 01       	movw	r22, r20
 392:	62 27       	eor	r22, r18
 394:	62 bb       	out	0x12, r22	; 18
	return state_error;
}

ERROR_STATE DIO_TglPin_Value(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 396:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
		break;
 398:	08 95       	ret
		default:
		state_error = FAIL;
 39a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return state_error;
}
 39c:	08 95       	ret

0000039e <DIO_GetPin_Value>:

ERROR_STATE DIO_GetPin_Value(DIO_Port port, DIO_Pin pin,UINT8_t* pin_value)
{
ERROR_STATE state_error = SUCCESS;
	switch (port)
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	a9 f0       	breq	.+42     	; 0x3cc <DIO_GetPin_Value+0x2e>
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	28 f0       	brcs	.+10     	; 0x3b0 <DIO_GetPin_Value+0x12>
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	f9 f0       	breq	.+62     	; 0x3e8 <DIO_GetPin_Value+0x4a>
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	c9 f5       	brne	.+114    	; 0x420 <DIO_GetPin_Value+0x82>
 3ae:	2a c0       	rjmp	.+84     	; 0x404 <DIO_GetPin_Value+0x66>
	{
		case DIO_PORTA:
		*pin_value = GET_BIT(PINA, pin);
 3b0:	89 b3       	in	r24, 0x19	; 25
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9c 01       	movw	r18, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_GetPin_Value+0x1e>
 3b8:	35 95       	asr	r19
 3ba:	27 95       	ror	r18
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_GetPin_Value+0x1a>
 3c0:	b9 01       	movw	r22, r18
 3c2:	61 70       	andi	r22, 0x01	; 1
 3c4:	fa 01       	movw	r30, r20
 3c6:	60 83       	st	Z, r22
	return state_error;
}

ERROR_STATE DIO_GetPin_Value(DIO_Port port, DIO_Pin pin,UINT8_t* pin_value)
{
ERROR_STATE state_error = SUCCESS;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
	switch (port)
	{
		case DIO_PORTA:
		*pin_value = GET_BIT(PINA, pin);
		break;
 3ca:	08 95       	ret
		case DIO_PORTB:
		*pin_value = GET_BIT(PINB, pin);
 3cc:	86 b3       	in	r24, 0x16	; 22
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	9c 01       	movw	r18, r24
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_GetPin_Value+0x3a>
 3d4:	35 95       	asr	r19
 3d6:	27 95       	ror	r18
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_GetPin_Value+0x36>
 3dc:	b9 01       	movw	r22, r18
 3de:	61 70       	andi	r22, 0x01	; 1
 3e0:	fa 01       	movw	r30, r20
 3e2:	60 83       	st	Z, r22
	return state_error;
}

ERROR_STATE DIO_GetPin_Value(DIO_Port port, DIO_Pin pin,UINT8_t* pin_value)
{
ERROR_STATE state_error = SUCCESS;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTA:
		*pin_value = GET_BIT(PINA, pin);
		break;
		case DIO_PORTB:
		*pin_value = GET_BIT(PINB, pin);
		break;
 3e6:	08 95       	ret
		case DIO_PORTC:
		*pin_value = GET_BIT(PINC, pin);
 3e8:	83 b3       	in	r24, 0x13	; 19
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	9c 01       	movw	r18, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_GetPin_Value+0x56>
 3f0:	35 95       	asr	r19
 3f2:	27 95       	ror	r18
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_GetPin_Value+0x52>
 3f8:	b9 01       	movw	r22, r18
 3fa:	61 70       	andi	r22, 0x01	; 1
 3fc:	fa 01       	movw	r30, r20
 3fe:	60 83       	st	Z, r22
	return state_error;
}

ERROR_STATE DIO_GetPin_Value(DIO_Port port, DIO_Pin pin,UINT8_t* pin_value)
{
ERROR_STATE state_error = SUCCESS;
 400:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTB:
		*pin_value = GET_BIT(PINB, pin);
		break;
		case DIO_PORTC:
		*pin_value = GET_BIT(PINC, pin);
		break;
 402:	08 95       	ret
		case DIO_PORTD:
		*pin_value = GET_BIT(PIND, pin);
 404:	80 b3       	in	r24, 0x10	; 16
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	9c 01       	movw	r18, r24
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_GetPin_Value+0x72>
 40c:	35 95       	asr	r19
 40e:	27 95       	ror	r18
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_GetPin_Value+0x6e>
 414:	b9 01       	movw	r22, r18
 416:	61 70       	andi	r22, 0x01	; 1
 418:	fa 01       	movw	r30, r20
 41a:	60 83       	st	Z, r22
	return state_error;
}

ERROR_STATE DIO_GetPin_Value(DIO_Port port, DIO_Pin pin,UINT8_t* pin_value)
{
ERROR_STATE state_error = SUCCESS;
 41c:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTC:
		*pin_value = GET_BIT(PINC, pin);
		break;
		case DIO_PORTD:
		*pin_value = GET_BIT(PIND, pin);
		break;
 41e:	08 95       	ret
		default:
		state_error = FAIL;
 420:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return state_error;
}
 422:	08 95       	ret

00000424 <DIO_SetPin_PULLUP>:

ERROR_STATE DIO_SetPin_PULLUP(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
	switch(port)
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	a9 f0       	breq	.+42     	; 0x452 <DIO_SetPin_PULLUP+0x2e>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	28 f0       	brcs	.+10     	; 0x436 <DIO_SetPin_PULLUP+0x12>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	f9 f0       	breq	.+62     	; 0x46e <DIO_SetPin_PULLUP+0x4a>
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	c9 f5       	brne	.+114    	; 0x4a6 <DIO_SetPin_PULLUP+0x82>
 434:	2a c0       	rjmp	.+84     	; 0x48a <DIO_SetPin_PULLUP+0x66>
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
 436:	2b b3       	in	r18, 0x1b	; 27
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	ac 01       	movw	r20, r24
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_SetPin_PULLUP+0x20>
 440:	44 0f       	add	r20, r20
 442:	55 1f       	adc	r21, r21
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_SetPin_PULLUP+0x1c>
 448:	ba 01       	movw	r22, r20
 44a:	62 2b       	or	r22, r18
 44c:	6b bb       	out	0x1b, r22	; 27
	return state_error;
}

ERROR_STATE DIO_SetPin_PULLUP(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 44e:	81 e0       	ldi	r24, 0x01	; 1
	switch(port)
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
		break;
 450:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
 452:	28 b3       	in	r18, 0x18	; 24
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	ac 01       	movw	r20, r24
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_SetPin_PULLUP+0x3c>
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_SetPin_PULLUP+0x38>
 464:	ba 01       	movw	r22, r20
 466:	62 2b       	or	r22, r18
 468:	68 bb       	out	0x18, r22	; 24
	return state_error;
}

ERROR_STATE DIO_SetPin_PULLUP(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 46a:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
		break;
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
		break;
 46c:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
 46e:	25 b3       	in	r18, 0x15	; 21
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	ac 01       	movw	r20, r24
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_SetPin_PULLUP+0x58>
 478:	44 0f       	add	r20, r20
 47a:	55 1f       	adc	r21, r21
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_SetPin_PULLUP+0x54>
 480:	ba 01       	movw	r22, r20
 482:	62 2b       	or	r22, r18
 484:	65 bb       	out	0x15, r22	; 21
	return state_error;
}

ERROR_STATE DIO_SetPin_PULLUP(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 486:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
		break;
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
		break;
 488:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
 48a:	22 b3       	in	r18, 0x12	; 18
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	ac 01       	movw	r20, r24
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_SetPin_PULLUP+0x74>
 494:	44 0f       	add	r20, r20
 496:	55 1f       	adc	r21, r21
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_SetPin_PULLUP+0x70>
 49c:	ba 01       	movw	r22, r20
 49e:	62 2b       	or	r22, r18
 4a0:	62 bb       	out	0x12, r22	; 18
	return state_error;
}

ERROR_STATE DIO_SetPin_PULLUP(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
		break;
 4a4:	08 95       	ret
		default:
		state_error = FAIL;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return state_error;
}
 4a8:	08 95       	ret

000004aa <main>:
#include "DIO_Interface.h"
#include "BLUE_LED_Interface.h"
#include "SPI_Interface.h"

int main(void)
{
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <main>

000004ac <__vector_12>:
 */


#include "SPI_Interface.h"

ISR(VECTOR(12)) {
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	ptr_func();
 4ce:	e0 91 60 00 	lds	r30, 0x0060
 4d2:	f0 91 61 00 	lds	r31, 0x0061
 4d6:	09 95       	icall
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <SPI_Init_Master>:

ERROR_STATE SPI_Init_Master(Master_Config *My_Config) {
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
	ERROR_STATE error_state = SUCCESS;
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_INPUT);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	66 e0       	ldi	r22, 0x06	; 6
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_OUTPUT);
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	65 e0       	ldi	r22, 0x05	; 5
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_OUTPUT);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	67 e0       	ldi	r22, 0x07	; 7
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_OUTPUT);
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	64 e0       	ldi	r22, 0x04	; 4
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>

	SPCR |= (1 << SPE)
 528:	4d b1       	in	r20, 0x0d	; 13
 52a:	40 65       	ori	r20, 0x50	; 80
 52c:	8c 81       	ldd	r24, Y+4	; 0x04
 52e:	83 70       	andi	r24, 0x03	; 3
 530:	48 2b       	or	r20, r24
			| (My_Config->Int_Enable << SPIE)
 532:	38 81       	ld	r19, Y
 534:	37 95       	ror	r19
 536:	33 27       	eor	r19, r19
 538:	37 95       	ror	r19
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_INPUT);
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_OUTPUT);

	SPCR |= (1 << SPE)
 53a:	34 2b       	or	r19, r20
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
 53c:	29 81       	ldd	r18, Y+1	; 0x01
 53e:	22 95       	swap	r18
 540:	22 0f       	add	r18, r18
 542:	20 7e       	andi	r18, 0xE0	; 224
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_INPUT);
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_OUTPUT);

	SPCR |= (1 << SPE)
 544:	23 2b       	or	r18, r19
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 546:	9a 81       	ldd	r25, Y+2	; 0x02
 548:	99 0f       	add	r25, r25
 54a:	99 0f       	add	r25, r25
 54c:	99 0f       	add	r25, r25
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_INPUT);
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_OUTPUT);

	SPCR |= (1 << SPE)
 54e:	92 2b       	or	r25, r18
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	88 0f       	add	r24, r24
 554:	88 0f       	add	r24, r24
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_INPUT);
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_OUTPUT);
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_OUTPUT);

	SPCR |= (1 << SPE)
 556:	89 2b       	or	r24, r25
 558:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
			| (My_Config->Prescaler & 0x3);

	SPSR |= (My_Config->Prescaler >> 2);
 55a:	9e b1       	in	r25, 0x0e	; 14
 55c:	8c 81       	ldd	r24, Y+4	; 0x04
 55e:	86 95       	lsr	r24
 560:	86 95       	lsr	r24
 562:	89 2b       	or	r24, r25
 564:	8e b9       	out	0x0e, r24	; 14
	return error_state;
}
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <SPI_Init_Slave>:

ERROR_STATE SPI_Init_Slave(Slave_Config *My_Config) {
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	ec 01       	movw	r28, r24
	ERROR_STATE error_state = SUCCESS;
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_OUTPUT);
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	66 e0       	ldi	r22, 0x06	; 6
 578:	41 e0       	ldi	r20, 0x01	; 1
 57a:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_INPUT);
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	65 e0       	ldi	r22, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_INPUT);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	67 e0       	ldi	r22, 0x07	; 7
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_INPUT);
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	64 e0       	ldi	r22, 0x04	; 4
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_SetPin_Direction>

	SPCR = 0;
 59c:	1d b8       	out	0x0d, r1	; 13
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 59e:	4d b1       	in	r20, 0x0d	; 13
 5a0:	40 64       	ori	r20, 0x40	; 64
 5a2:	38 81       	ld	r19, Y
 5a4:	37 95       	ror	r19
 5a6:	33 27       	eor	r19, r19
 5a8:	37 95       	ror	r19
 5aa:	34 2b       	or	r19, r20
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 5ac:	29 81       	ldd	r18, Y+1	; 0x01
 5ae:	22 95       	swap	r18
 5b0:	22 0f       	add	r18, r18
 5b2:	20 7e       	andi	r18, 0xE0	; 224
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_INPUT);
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_INPUT);
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 5b4:	23 2b       	or	r18, r19
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 5b6:	9a 81       	ldd	r25, Y+2	; 0x02
 5b8:	99 0f       	add	r25, r25
 5ba:	99 0f       	add	r25, r25
 5bc:	99 0f       	add	r25, r25
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_INPUT);
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_INPUT);
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 5be:	92 2b       	or	r25, r18
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	88 0f       	add	r24, r24
 5c4:	88 0f       	add	r24, r24
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_INPUT);
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_INPUT);
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 5c6:	89 2b       	or	r24, r25
 5c8:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
	return error_state;
}
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <SPI_Send_Receive_Synch_Byte>:

ERROR_STATE SPI_Send_Receive_Synch_Byte(UINT8_t byte, UINT8_t *received) {
	ERROR_STATE error_state = SUCCESS;
	SPDR = byte;
 5d2:	8f b9       	out	0x0f, r24	; 15

	while (!GET_BIT(SPSR, SPIF));
 5d4:	77 9b       	sbis	0x0e, 7	; 14
 5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <SPI_Send_Receive_Synch_Byte+0x2>
	*received = SPDR;
 5d8:	8f b1       	in	r24, 0x0f	; 15
 5da:	fb 01       	movw	r30, r22
 5dc:	80 83       	st	Z, r24
	return error_state;
}
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	08 95       	ret

000005e2 <SPI_Send_ASynch_Byte>:

ERROR_STATE SPI_Send_ASynch_Byte(UINT8_t byte) {
	ERROR_STATE error_state = SUCCESS;
	SPDR = byte;
 5e2:	8f b9       	out	0x0f, r24	; 15

	while (!GET_BIT(SPSR, SPIF));
 5e4:	77 9b       	sbis	0x0e, 7	; 14
 5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <SPI_Send_ASynch_Byte+0x2>
	return error_state;
}
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	08 95       	ret

000005ec <SPI_Read_Data>:

ERROR_STATE SPI_Read_Data(UINT8_t *var) {
	ERROR_STATE error_state = SUCCESS;
	*var = SPDR;
 5ec:	2f b1       	in	r18, 0x0f	; 15
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 83       	st	Z, r18
	return error_state;
}
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	08 95       	ret

000005f6 <SPI_Set_CallBack>:

ERROR_STATE SPI_Set_CallBack(void (*func)(void)) {
	ERROR_STATE error_state = SUCCESS;
	ptr_func = func;
 5f6:	90 93 61 00 	sts	0x0061, r25
 5fa:	80 93 60 00 	sts	0x0060, r24
	return error_state;
}
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret

00000602 <Global_Interrupt_Enable>:

ERROR_STATE Global_Interrupt_Enable() {
	ERROR_STATE error_state = SUCCESS;
	SREG |= (1 << 7);
 602:	8f b7       	in	r24, 0x3f	; 63
 604:	80 68       	ori	r24, 0x80	; 128
 606:	8f bf       	out	0x3f, r24	; 63
	return error_state;
}
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	08 95       	ret

0000060c <Master_Send>:
void Master_Send(UINT8_t data){
	SPI_Send_ASynch_Byte(data);
 60c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SPI_Send_ASynch_Byte>
}
 610:	08 95       	ret

00000612 <Master_Receive>:

UINT8_t Master_Receive(){
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	0f 92       	push	r0
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
	UINT8_t received=0;
 61c:	19 82       	std	Y+1, r1	; 0x01
	SPI_Send_Receive_Synch_Byte(DUMMY_DATA,&received);
 61e:	8e ef       	ldi	r24, 0xFE	; 254
 620:	be 01       	movw	r22, r28
 622:	6f 5f       	subi	r22, 0xFF	; 255
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <SPI_Send_Receive_Synch_Byte>
	return received;
}
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	0f 90       	pop	r0
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <_exit>:
 634:	f8 94       	cli

00000636 <__stop_program>:
 636:	ff cf       	rjmp	.-2      	; 0x636 <__stop_program>
