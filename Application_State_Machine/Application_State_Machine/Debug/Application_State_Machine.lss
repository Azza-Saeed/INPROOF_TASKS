
Application_State_Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000003dc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000474  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011c  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d9  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000197  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:




int main(void)
{
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <ASM_GatherInputs>:
	// CAll SPI_Manager_Task to Update the spi_value
	/* Update the Inputs Values */
	//RFID1_Value = RIFD1_u8GetValue();
	//u8Uart_Get_RFID2 = UART_u8Get_RFID2_Value();
	//Fire_Value= Get_u8FireValue();
}
  94:	08 95       	ret

00000096 <ASM_PrepareOutputs>:


Struct_Obj_t ASM_PrepareOutputs(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <ASM_PrepareOutputs+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <ASM_PrepareOutputs+0x8>
  9e:	0f 92       	push	r0
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 255 ) && ( Fire_Value == 0 ) )
  a4:	80 91 66 00 	lds	r24, 0x0066
  a8:	88 23       	and	r24, r24
  aa:	c9 f4       	brne	.+50     	; 0xde <ASM_PrepareOutputs+0x48>
  ac:	90 91 68 00 	lds	r25, 0x0068
  b0:	99 23       	and	r25, r25
  b2:	a9 f4       	brne	.+42     	; 0xde <ASM_PrepareOutputs+0x48>
  b4:	80 91 65 00 	lds	r24, 0x0065
  b8:	8f 3f       	cpi	r24, 0xFF	; 255
  ba:	09 f0       	breq	.+2      	; 0xbe <ASM_PrepareOutputs+0x28>
  bc:	75 c0       	rjmp	.+234    	; 0x1a8 <ASM_PrepareOutputs+0x112>
  be:	80 91 67 00 	lds	r24, 0x0067
  c2:	88 23       	and	r24, r24
  c4:	09 f0       	breq	.+2      	; 0xc8 <ASM_PrepareOutputs+0x32>
  c6:	70 c0       	rjmp	.+224    	; 0x1a8 <ASM_PrepareOutputs+0x112>
	{
		/* Actions */	
		outputs.Alarm_State=OFF;
  c8:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=BLUE;
  cc:	10 92 62 00 	sts	0x0062, r1
		outputs.Motor_State=CENTER;
  d0:	10 92 61 00 	sts	0x0061, r1
		outputs.RJB2_State=BLUE;
  d4:	10 92 63 00 	sts	0x0063, r1
		outputs.Uart_state=0;
  d8:	10 92 64 00 	sts	0x0064, r1
  dc:	1b c1       	rjmp	.+566    	; 0x314 <ASM_PrepareOutputs+0x27e>
		//Normal_State();
	}
	else if ( ( RFID1_Value == 1 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 255 ) && ( Fire_Value == 0 ) )
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	09 f0       	breq	.+2      	; 0xe4 <ASM_PrepareOutputs+0x4e>
  e2:	5f c0       	rjmp	.+190    	; 0x1a2 <ASM_PrepareOutputs+0x10c>
  e4:	90 91 68 00 	lds	r25, 0x0068
  e8:	99 23       	and	r25, r25
  ea:	09 f0       	breq	.+2      	; 0xee <ASM_PrepareOutputs+0x58>
  ec:	5a c0       	rjmp	.+180    	; 0x1a2 <ASM_PrepareOutputs+0x10c>
  ee:	80 91 65 00 	lds	r24, 0x0065
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	91 f4       	brne	.+36     	; 0x11a <ASM_PrepareOutputs+0x84>
  f6:	80 91 67 00 	lds	r24, 0x0067
  fa:	88 23       	and	r24, r24
  fc:	71 f4       	brne	.+28     	; 0x11a <ASM_PrepareOutputs+0x84>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
  fe:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=GREEN;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=RIGHT;
 108:	80 93 61 00 	sts	0x0061, r24
		outputs.RJB2_State=RED;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0xF5;
 112:	85 ef       	ldi	r24, 0xF5	; 245
 114:	80 93 64 00 	sts	0x0064, r24
 118:	fd c0       	rjmp	.+506    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 1 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 252 ) && ( Fire_Value == 0 ) )
 11a:	80 91 65 00 	lds	r24, 0x0065
 11e:	8c 3f       	cpi	r24, 0xFC	; 252
 120:	91 f4       	brne	.+36     	; 0x146 <ASM_PrepareOutputs+0xb0>
 122:	80 91 67 00 	lds	r24, 0x0067
 126:	88 23       	and	r24, r24
 128:	71 f4       	brne	.+28     	; 0x146 <ASM_PrepareOutputs+0xb0>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 12a:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=GREEN;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=RIGHT;
 134:	80 93 61 00 	sts	0x0061, r24
		outputs.RJB2_State=RED;
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0xF5;
 13e:	85 ef       	ldi	r24, 0xF5	; 245
 140:	80 93 64 00 	sts	0x0064, r24
 144:	e7 c0       	rjmp	.+462    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 1 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 63 ) && ( Fire_Value == 0 ) )
 146:	80 91 65 00 	lds	r24, 0x0065
 14a:	8f 33       	cpi	r24, 0x3F	; 63
 14c:	91 f4       	brne	.+36     	; 0x172 <ASM_PrepareOutputs+0xdc>
 14e:	80 91 67 00 	lds	r24, 0x0067
 152:	88 23       	and	r24, r24
 154:	71 f4       	brne	.+28     	; 0x172 <ASM_PrepareOutputs+0xdc>
	{
		/* Actions */
		outputs.Alarm_State=ON;
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	90 93 60 00 	sts	0x0060, r25
		outputs.RJB1_State=RED;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=RIGHT;
 162:	90 93 61 00 	sts	0x0061, r25
		outputs.RJB2_State=RED;
 166:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0xF5;
 16a:	85 ef       	ldi	r24, 0xF5	; 245
 16c:	80 93 64 00 	sts	0x0064, r24
 170:	d1 c0       	rjmp	.+418    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 1 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 231 ) && ( Fire_Value == 0 ) )
 172:	80 91 65 00 	lds	r24, 0x0065
 176:	87 3e       	cpi	r24, 0xE7	; 231
 178:	09 f0       	breq	.+2      	; 0x17c <ASM_PrepareOutputs+0xe6>
 17a:	bb c0       	rjmp	.+374    	; 0x2f2 <ASM_PrepareOutputs+0x25c>
 17c:	80 91 67 00 	lds	r24, 0x0067
 180:	88 23       	and	r24, r24
 182:	09 f0       	breq	.+2      	; 0x186 <ASM_PrepareOutputs+0xf0>
 184:	b6 c0       	rjmp	.+364    	; 0x2f2 <ASM_PrepareOutputs+0x25c>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 186:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=RED;
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=RIGHT;
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	90 93 61 00 	sts	0x0061, r25
		outputs.RJB2_State=RED;
 196:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0xF5;
 19a:	85 ef       	ldi	r24, 0xF5	; 245
 19c:	80 93 64 00 	sts	0x0064, r24
 1a0:	b9 c0       	rjmp	.+370    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 252 ) && ( Fire_Value == 0 ) )
 1a2:	88 23       	and	r24, r24
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <ASM_PrepareOutputs+0x112>
 1a6:	a5 c0       	rjmp	.+330    	; 0x2f2 <ASM_PrepareOutputs+0x25c>
 1a8:	80 91 68 00 	lds	r24, 0x0068
 1ac:	88 23       	and	r24, r24
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <ASM_PrepareOutputs+0x11c>
 1b0:	3f c0       	rjmp	.+126    	; 0x230 <ASM_PrepareOutputs+0x19a>
 1b2:	90 91 65 00 	lds	r25, 0x0065
 1b6:	9c 3f       	cpi	r25, 0xFC	; 252
 1b8:	89 f4       	brne	.+34     	; 0x1dc <ASM_PrepareOutputs+0x146>
 1ba:	90 91 67 00 	lds	r25, 0x0067
 1be:	99 23       	and	r25, r25
 1c0:	69 f4       	brne	.+26     	; 0x1dc <ASM_PrepareOutputs+0x146>
	{
		/* Actions */
		outputs.Alarm_State=ON;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 60 00 	sts	0x0060, r24
		outputs.RJB1_State=RED;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=CENTER;
 1ce:	10 92 61 00 	sts	0x0061, r1
		outputs.RJB2_State=RED;
 1d2:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0;
 1d6:	10 92 64 00 	sts	0x0064, r1
 1da:	9c c0       	rjmp	.+312    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value != 255 ) && ( Fire_Value == 0 ) )
 1dc:	90 91 65 00 	lds	r25, 0x0065
 1e0:	9f 3f       	cpi	r25, 0xFF	; 255
 1e2:	89 f0       	breq	.+34     	; 0x206 <ASM_PrepareOutputs+0x170>
 1e4:	90 91 67 00 	lds	r25, 0x0067
 1e8:	99 23       	and	r25, r25
 1ea:	69 f4       	brne	.+26     	; 0x206 <ASM_PrepareOutputs+0x170>
	{
		/* Actions */
		outputs.Alarm_State=ON;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 60 00 	sts	0x0060, r24
		outputs.RJB1_State=RED;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=CENTER;
 1f8:	10 92 61 00 	sts	0x0061, r1
		outputs.RJB2_State=RED;
 1fc:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0;
 200:	10 92 64 00 	sts	0x0064, r1
 204:	87 c0       	rjmp	.+270    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 255 ) && ( Fire_Value == 0 ) )
 206:	90 91 65 00 	lds	r25, 0x0065
 20a:	9f 3f       	cpi	r25, 0xFF	; 255
 20c:	89 f4       	brne	.+34     	; 0x230 <ASM_PrepareOutputs+0x19a>
 20e:	90 91 67 00 	lds	r25, 0x0067
 212:	99 23       	and	r25, r25
 214:	d9 f5       	brne	.+118    	; 0x28c <ASM_PrepareOutputs+0x1f6>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 216:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=BLUE;
 21a:	10 92 62 00 	sts	0x0062, r1
		outputs.Motor_State=RIGHT;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 61 00 	sts	0x0061, r24
		outputs.RJB2_State=BLUE;
 224:	10 92 63 00 	sts	0x0063, r1
		outputs.Uart_state=0xF5;		
 228:	85 ef       	ldi	r24, 0xF5	; 245
 22a:	80 93 64 00 	sts	0x0064, r24
 22e:	72 c0       	rjmp	.+228    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 1 ) && ( SPI_Value == 255 ) && ( Fire_Value == 0 ) )
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	61 f5       	brne	.+88     	; 0x28c <ASM_PrepareOutputs+0x1f6>
 234:	90 91 65 00 	lds	r25, 0x0065
 238:	9f 3f       	cpi	r25, 0xFF	; 255
 23a:	91 f4       	brne	.+36     	; 0x260 <ASM_PrepareOutputs+0x1ca>
 23c:	90 91 67 00 	lds	r25, 0x0067
 240:	99 23       	and	r25, r25
 242:	71 f4       	brne	.+28     	; 0x260 <ASM_PrepareOutputs+0x1ca>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 244:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=RED;
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=LEFT;
 24e:	80 93 61 00 	sts	0x0061, r24
		outputs.RJB2_State=GREEN;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0x5F;
 258:	8f e5       	ldi	r24, 0x5F	; 95
 25a:	80 93 64 00 	sts	0x0064, r24
 25e:	5a c0       	rjmp	.+180    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 1 ) && ( SPI_Value == 63 ) && ( Fire_Value == 0 ) )
 260:	90 91 65 00 	lds	r25, 0x0065
 264:	9f 33       	cpi	r25, 0x3F	; 63
 266:	91 f4       	brne	.+36     	; 0x28c <ASM_PrepareOutputs+0x1f6>
 268:	90 91 67 00 	lds	r25, 0x0067
 26c:	99 23       	and	r25, r25
 26e:	31 f5       	brne	.+76     	; 0x2bc <ASM_PrepareOutputs+0x226>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 270:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=RED;
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=LEFT;
 27a:	80 93 61 00 	sts	0x0061, r24
		outputs.RJB2_State=GREEN;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0x5F;
 284:	8f e5       	ldi	r24, 0x5F	; 95
 286:	80 93 64 00 	sts	0x0064, r24
 28a:	44 c0       	rjmp	.+136    	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 0 ) && ( SPI_Value == 255 ) && ( Fire_Value == 0 ) )
 28c:	88 23       	and	r24, r24
 28e:	b1 f4       	brne	.+44     	; 0x2bc <ASM_PrepareOutputs+0x226>
 290:	90 91 65 00 	lds	r25, 0x0065
 294:	9f 3f       	cpi	r25, 0xFF	; 255
 296:	91 f4       	brne	.+36     	; 0x2bc <ASM_PrepareOutputs+0x226>
 298:	80 91 67 00 	lds	r24, 0x0067
 29c:	88 23       	and	r24, r24
 29e:	49 f5       	brne	.+82     	; 0x2f2 <ASM_PrepareOutputs+0x25c>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 2a0:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=RED;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=LEFT;
 2aa:	80 93 61 00 	sts	0x0061, r24
		outputs.RJB2_State=GREEN;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0x5F;
 2b4:	8f e5       	ldi	r24, 0x5F	; 95
 2b6:	80 93 64 00 	sts	0x0064, r24
 2ba:	2c c0       	rjmp	.+88     	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 1 ) && ( SPI_Value == 252 ) && ( Fire_Value == 0 ) )
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	c9 f4       	brne	.+50     	; 0x2f2 <ASM_PrepareOutputs+0x25c>
 2c0:	80 91 65 00 	lds	r24, 0x0065
 2c4:	8c 3f       	cpi	r24, 0xFC	; 252
 2c6:	89 f4       	brne	.+34     	; 0x2ea <ASM_PrepareOutputs+0x254>
 2c8:	80 91 67 00 	lds	r24, 0x0067
 2cc:	88 23       	and	r24, r24
 2ce:	69 f4       	brne	.+26     	; 0x2ea <ASM_PrepareOutputs+0x254>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 2d0:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=RED;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=LEFT;
 2da:	80 93 61 00 	sts	0x0061, r24
		outputs.RJB2_State=RED;
 2de:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0x5F;
 2e2:	8f e5       	ldi	r24, 0x5F	; 95
 2e4:	80 93 64 00 	sts	0x0064, r24
 2e8:	15 c0       	rjmp	.+42     	; 0x314 <ASM_PrepareOutputs+0x27e>
	}
	else if ( ( ( RFID1_Value == 0 ) && ( u8Uart_Get_RFID2 == 1 ) && ( SPI_Value == 252 ) ) || (Fire_Value == 1  ) )
 2ea:	80 91 65 00 	lds	r24, 0x0065
 2ee:	8c 3f       	cpi	r24, 0xFC	; 252
 2f0:	21 f0       	breq	.+8      	; 0x2fa <ASM_PrepareOutputs+0x264>
 2f2:	80 91 67 00 	lds	r24, 0x0067
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	69 f4       	brne	.+26     	; 0x314 <ASM_PrepareOutputs+0x27e>
	{
		/* Actions */
		outputs.Alarm_State=OFF;
 2fa:	10 92 60 00 	sts	0x0060, r1
		outputs.RJB1_State=RED;
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	80 93 62 00 	sts	0x0062, r24
		outputs.Motor_State=RIGHT;
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	90 93 61 00 	sts	0x0061, r25
		outputs.RJB2_State=RED;
 30a:	80 93 63 00 	sts	0x0063, r24
		outputs.Uart_state=0xF5;
 30e:	85 ef       	ldi	r24, 0xF5	; 245
 310:	80 93 64 00 	sts	0x0064, r24
	}
	else{
		/* Do Nothing */
	}
	return outputs;
 314:	de 01       	movw	r26, r28
 316:	11 96       	adiw	r26, 0x01	; 1
 318:	e0 e6       	ldi	r30, 0x60	; 96
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	01 90       	ld	r0, Z+
 320:	0d 92       	st	X+, r0
 322:	81 50       	subi	r24, 0x01	; 1
 324:	e1 f7       	brne	.-8      	; 0x31e <ASM_PrepareOutputs+0x288>
 326:	29 81       	ldd	r18, Y+1	; 0x01
 328:	3a 81       	ldd	r19, Y+2	; 0x02
 32a:	4b 81       	ldd	r20, Y+3	; 0x03
 32c:	5c 81       	ldd	r21, Y+4	; 0x04
 32e:	6d 81       	ldd	r22, Y+5	; 0x05
}
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
