
Schaduller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000996  00000a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800060  00800060  00000a2a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d7  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b3  00000000  00000000  00002497  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000675  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  000031c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000749  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c7  00000000  00000000  00003d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_10>
  2c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_11>
  30:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <main>
  8a:	0c 94 c9 04 	jmp	0x992	; 0x992 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Func_recieve_data>:
		}
}
void Func_recieve_data( void )
{
	/* Read Data From Master */
	SPI_Read_Data(&u8recieve_buffer);
  92:	8d e7       	ldi	r24, 0x7D	; 125
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 15 04 	call	0x82a	; 0x82a <SPI_Read_Data>
	//u8recieve_buffer = SPDR;
	//u8counter++;
	//u8Recieved_flag=1;// for new recieved data
}
  9a:	08 95       	ret

0000009c <App_voidIit>:
u8 Recieve_Array[5];
u8 u8counter=0;
u8 u8recieve_buffer;

void App_voidIit(void)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	00 d0       	rcall	.+0      	; 0xa2 <App_voidIit+0x6>
  a2:	00 d0       	rcall	.+0      	; 0xa4 <App_voidIit+0x8>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	/* SPI Slave Initialization */
	Slave_Config Slave_Obj={SPI_INTERRUPT_ENABLE,SPI_LSB,SPI_RISING_LEADING,SPI_SAMPLE_LEADING};
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	8a 83       	std	Y+2, r24	; 0x02
  ae:	1b 82       	std	Y+3, r1	; 0x03
  b0:	1c 82       	std	Y+4, r1	; 0x04

	SPI_Init_Slave(&Slave_Obj);
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_Init_Slave>
	/* Function callback of the Spi*/
	SPI_Set_CallBack(Func_recieve_data);
  ba:	89 e4       	ldi	r24, 0x49	; 73
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 19 04 	call	0x832	; 0x832 <SPI_Set_CallBack>
	/* Enable global interrupt */
	Global_Interrupt_Enable();
  c2:	0e 94 1e 04 	call	0x83c	; 0x83c <Global_Interrupt_Enable>
	/* Set Pin as output for check */
	dio_vidConfigChannel(DIO_PORTC,DIO_PIN7,OUTPUT);
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	67 e0       	ldi	r22, 0x07	; 7
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <App_vidMain>:
void App_vidMain(void)
{
		SPI_Send_ASynch_Byte(0xFD);
  de:	8d ef       	ldi	r24, 0xFD	; 253
  e0:	0e 94 13 04 	call	0x826	; 0x826 <SPI_Send_ASynch_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	9c e9       	ldi	r25, 0x9C	; 156
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <App_vidMain+0xa>
  ec:	00 c0       	rjmp	.+0      	; 0xee <App_vidMain+0x10>
  ee:	00 00       	nop
		_delay_ms(10);
		/* Check the correct data */
		if( u8recieve_buffer == 0xFA )
  f0:	80 91 7d 00 	lds	r24, 0x007D
  f4:	8a 3f       	cpi	r24, 0xFA	; 250
  f6:	69 f4       	brne	.+26     	; 0x112 <App_vidMain+0x34>
		{
			/* Toggle channel for check */
			dio_vidFlipChannel(DIO_PORTC,DIO_PIN7);
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <dio_vidFlipChannel>
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	99 e6       	ldi	r25, 0x69	; 105
 104:	a8 e1       	ldi	r26, 0x18	; 24
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	a0 40       	sbci	r26, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <App_vidMain+0x28>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <App_vidMain+0x32>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <dio_vidConfigChannel>:
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	31 f1       	breq	.+76     	; 0x164 <dio_vidConfigChannel+0x50>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	38 f0       	brcs	.+14     	; 0x12a <dio_vidConfigChannel+0x16>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	09 f4       	brne	.+2      	; 0x122 <dio_vidConfigChannel+0xe>
 120:	3e c0       	rjmp	.+124    	; 0x19e <dio_vidConfigChannel+0x8a>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	09 f0       	breq	.+2      	; 0x128 <dio_vidConfigChannel+0x14>
 126:	74 c0       	rjmp	.+232    	; 0x210 <dio_vidConfigChannel+0xfc>
 128:	57 c0       	rjmp	.+174    	; 0x1d8 <dio_vidConfigChannel+0xc4>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <dio_vidConfigChannel+0x34>
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <dio_vidConfigChannel+0x28>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <dio_vidConfigChannel+0x24>
 140:	ba 01       	movw	r22, r20
 142:	62 2b       	or	r22, r18
 144:	6a bb       	out	0x1a, r22	; 26
 146:	08 95       	ret
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <dio_vidConfigChannel+0x42>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <dio_vidConfigChannel+0x3e>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	6a bb       	out	0x1a, r22	; 26
 162:	08 95       	ret
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	69 f4       	brne	.+26     	; 0x182 <dio_vidConfigChannel+0x6e>
 168:	27 b3       	in	r18, 0x17	; 23
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <dio_vidConfigChannel+0x62>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <dio_vidConfigChannel+0x5e>
 17a:	ba 01       	movw	r22, r20
 17c:	62 2b       	or	r22, r18
 17e:	67 bb       	out	0x17, r22	; 23
 180:	08 95       	ret
 182:	27 b3       	in	r18, 0x17	; 23
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <dio_vidConfigChannel+0x7c>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <dio_vidConfigChannel+0x78>
 194:	ba 01       	movw	r22, r20
 196:	60 95       	com	r22
 198:	62 23       	and	r22, r18
 19a:	67 bb       	out	0x17, r22	; 23
 19c:	08 95       	ret
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	69 f4       	brne	.+26     	; 0x1bc <dio_vidConfigChannel+0xa8>
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <dio_vidConfigChannel+0x9c>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <dio_vidConfigChannel+0x98>
 1b4:	ba 01       	movw	r22, r20
 1b6:	62 2b       	or	r22, r18
 1b8:	64 bb       	out	0x14, r22	; 20
 1ba:	08 95       	ret
 1bc:	24 b3       	in	r18, 0x14	; 20
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <dio_vidConfigChannel+0xb6>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <dio_vidConfigChannel+0xb2>
 1ce:	ba 01       	movw	r22, r20
 1d0:	60 95       	com	r22
 1d2:	62 23       	and	r22, r18
 1d4:	64 bb       	out	0x14, r22	; 20
 1d6:	08 95       	ret
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	69 f4       	brne	.+26     	; 0x1f6 <dio_vidConfigChannel+0xe2>
 1dc:	21 b3       	in	r18, 0x11	; 17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	ac 01       	movw	r20, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <dio_vidConfigChannel+0xd6>
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <dio_vidConfigChannel+0xd2>
 1ee:	ba 01       	movw	r22, r20
 1f0:	62 2b       	or	r22, r18
 1f2:	61 bb       	out	0x11, r22	; 17
 1f4:	08 95       	ret
 1f6:	21 b3       	in	r18, 0x11	; 17
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	ac 01       	movw	r20, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <dio_vidConfigChannel+0xf0>
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <dio_vidConfigChannel+0xec>
 208:	ba 01       	movw	r22, r20
 20a:	60 95       	com	r22
 20c:	62 23       	and	r22, r18
 20e:	61 bb       	out	0x11, r22	; 17
 210:	08 95       	ret

00000212 <dio_vidConfigPort>:
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	49 f0       	breq	.+18     	; 0x228 <dio_vidConfigPort+0x16>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	28 f0       	brcs	.+10     	; 0x224 <dio_vidConfigPort+0x12>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	39 f0       	breq	.+14     	; 0x22c <dio_vidConfigPort+0x1a>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	41 f4       	brne	.+16     	; 0x232 <dio_vidConfigPort+0x20>
 222:	06 c0       	rjmp	.+12     	; 0x230 <dio_vidConfigPort+0x1e>
 224:	6a bb       	out	0x1a, r22	; 26
 226:	08 95       	ret
 228:	67 bb       	out	0x17, r22	; 23
 22a:	08 95       	ret
 22c:	64 bb       	out	0x14, r22	; 20
 22e:	08 95       	ret
 230:	61 bb       	out	0x11, r22	; 17
 232:	08 95       	ret

00000234 <dio_vidSetPortValue>:
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	49 f0       	breq	.+18     	; 0x24a <dio_vidSetPortValue+0x16>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	28 f0       	brcs	.+10     	; 0x246 <dio_vidSetPortValue+0x12>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	39 f0       	breq	.+14     	; 0x24e <dio_vidSetPortValue+0x1a>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	41 f4       	brne	.+16     	; 0x254 <dio_vidSetPortValue+0x20>
 244:	06 c0       	rjmp	.+12     	; 0x252 <dio_vidSetPortValue+0x1e>
 246:	6b bb       	out	0x1b, r22	; 27
 248:	08 95       	ret
 24a:	68 bb       	out	0x18, r22	; 24
 24c:	08 95       	ret
 24e:	65 bb       	out	0x15, r22	; 21
 250:	08 95       	ret
 252:	62 bb       	out	0x12, r22	; 18
 254:	08 95       	ret

00000256 <dio_vidWriteChannel>:
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	31 f1       	breq	.+76     	; 0x2a6 <dio_vidWriteChannel+0x50>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	38 f0       	brcs	.+14     	; 0x26c <dio_vidWriteChannel+0x16>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	09 f4       	brne	.+2      	; 0x264 <dio_vidWriteChannel+0xe>
 262:	3e c0       	rjmp	.+124    	; 0x2e0 <dio_vidWriteChannel+0x8a>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	09 f0       	breq	.+2      	; 0x26a <dio_vidWriteChannel+0x14>
 268:	74 c0       	rjmp	.+232    	; 0x352 <dio_vidWriteChannel+0xfc>
 26a:	57 c0       	rjmp	.+174    	; 0x31a <dio_vidWriteChannel+0xc4>
 26c:	44 23       	and	r20, r20
 26e:	71 f4       	brne	.+28     	; 0x28c <dio_vidWriteChannel+0x36>
 270:	2b b3       	in	r18, 0x1b	; 27
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <dio_vidWriteChannel+0x28>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <dio_vidWriteChannel+0x24>
 282:	ba 01       	movw	r22, r20
 284:	60 95       	com	r22
 286:	62 23       	and	r22, r18
 288:	6b bb       	out	0x1b, r22	; 27
 28a:	08 95       	ret
 28c:	2b b3       	in	r18, 0x1b	; 27
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <dio_vidWriteChannel+0x44>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <dio_vidWriteChannel+0x40>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	6b bb       	out	0x1b, r22	; 27
 2a4:	08 95       	ret
 2a6:	44 23       	and	r20, r20
 2a8:	71 f4       	brne	.+28     	; 0x2c6 <dio_vidWriteChannel+0x70>
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <dio_vidWriteChannel+0x62>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <dio_vidWriteChannel+0x5e>
 2bc:	ba 01       	movw	r22, r20
 2be:	60 95       	com	r22
 2c0:	62 23       	and	r22, r18
 2c2:	68 bb       	out	0x18, r22	; 24
 2c4:	08 95       	ret
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <dio_vidWriteChannel+0x7e>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <dio_vidWriteChannel+0x7a>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 2b       	or	r22, r18
 2dc:	68 bb       	out	0x18, r22	; 24
 2de:	08 95       	ret
 2e0:	44 23       	and	r20, r20
 2e2:	71 f4       	brne	.+28     	; 0x300 <dio_vidWriteChannel+0xaa>
 2e4:	25 b3       	in	r18, 0x15	; 21
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <dio_vidWriteChannel+0x9c>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <dio_vidWriteChannel+0x98>
 2f6:	ba 01       	movw	r22, r20
 2f8:	60 95       	com	r22
 2fa:	62 23       	and	r22, r18
 2fc:	65 bb       	out	0x15, r22	; 21
 2fe:	08 95       	ret
 300:	25 b3       	in	r18, 0x15	; 21
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	ac 01       	movw	r20, r24
 308:	02 c0       	rjmp	.+4      	; 0x30e <dio_vidWriteChannel+0xb8>
 30a:	44 0f       	add	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <dio_vidWriteChannel+0xb4>
 312:	ba 01       	movw	r22, r20
 314:	62 2b       	or	r22, r18
 316:	65 bb       	out	0x15, r22	; 21
 318:	08 95       	ret
 31a:	44 23       	and	r20, r20
 31c:	71 f4       	brne	.+28     	; 0x33a <dio_vidWriteChannel+0xe4>
 31e:	22 b3       	in	r18, 0x12	; 18
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	ac 01       	movw	r20, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <dio_vidWriteChannel+0xd6>
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <dio_vidWriteChannel+0xd2>
 330:	ba 01       	movw	r22, r20
 332:	60 95       	com	r22
 334:	62 23       	and	r22, r18
 336:	62 bb       	out	0x12, r22	; 18
 338:	08 95       	ret
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <dio_vidWriteChannel+0xf2>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <dio_vidWriteChannel+0xee>
 34c:	ba 01       	movw	r22, r20
 34e:	62 2b       	or	r22, r18
 350:	62 bb       	out	0x12, r22	; 18
 352:	08 95       	ret

00000354 <dio_vidWriteChannelGroup>:
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	c1 f0       	breq	.+48     	; 0x388 <dio_vidWriteChannelGroup+0x34>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	30 f0       	brcs	.+12     	; 0x368 <dio_vidWriteChannelGroup+0x14>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	19 f1       	breq	.+70     	; 0x3a6 <dio_vidWriteChannelGroup+0x52>
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	09 f0       	breq	.+2      	; 0x366 <dio_vidWriteChannelGroup+0x12>
 364:	3e c0       	rjmp	.+124    	; 0x3e2 <dio_vidWriteChannelGroup+0x8e>
 366:	2e c0       	rjmp	.+92     	; 0x3c4 <dio_vidWriteChannelGroup+0x70>
 368:	8b b3       	in	r24, 0x1b	; 27
 36a:	94 2f       	mov	r25, r20
 36c:	90 95       	com	r25
 36e:	89 23       	and	r24, r25
 370:	8b bb       	out	0x1b, r24	; 27
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	cb 01       	movw	r24, r22
 376:	02 c0       	rjmp	.+4      	; 0x37c <dio_vidWriteChannelGroup+0x28>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	2a 95       	dec	r18
 37e:	e2 f7       	brpl	.-8      	; 0x378 <dio_vidWriteChannelGroup+0x24>
 380:	9c 01       	movw	r18, r24
 382:	24 23       	and	r18, r20
 384:	2b bb       	out	0x1b, r18	; 27
 386:	08 95       	ret
 388:	88 b3       	in	r24, 0x18	; 24
 38a:	94 2f       	mov	r25, r20
 38c:	90 95       	com	r25
 38e:	89 23       	and	r24, r25
 390:	88 bb       	out	0x18, r24	; 24
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	fb 01       	movw	r30, r22
 396:	02 c0       	rjmp	.+4      	; 0x39c <dio_vidWriteChannelGroup+0x48>
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	2a 95       	dec	r18
 39e:	e2 f7       	brpl	.-8      	; 0x398 <dio_vidWriteChannelGroup+0x44>
 3a0:	e4 23       	and	r30, r20
 3a2:	e8 bb       	out	0x18, r30	; 24
 3a4:	08 95       	ret
 3a6:	85 b3       	in	r24, 0x15	; 21
 3a8:	94 2f       	mov	r25, r20
 3aa:	90 95       	com	r25
 3ac:	89 23       	and	r24, r25
 3ae:	85 bb       	out	0x15, r24	; 21
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	cb 01       	movw	r24, r22
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <dio_vidWriteChannelGroup+0x66>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	2a 95       	dec	r18
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <dio_vidWriteChannelGroup+0x62>
 3be:	84 23       	and	r24, r20
 3c0:	85 bb       	out	0x15, r24	; 21
 3c2:	08 95       	ret
 3c4:	82 b3       	in	r24, 0x12	; 18
 3c6:	94 2f       	mov	r25, r20
 3c8:	90 95       	com	r25
 3ca:	89 23       	and	r24, r25
 3cc:	82 bb       	out	0x12, r24	; 18
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	cb 01       	movw	r24, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <dio_vidWriteChannelGroup+0x84>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <dio_vidWriteChannelGroup+0x80>
 3dc:	9c 01       	movw	r18, r24
 3de:	24 23       	and	r18, r20
 3e0:	22 bb       	out	0x12, r18	; 18
 3e2:	08 95       	ret

000003e4 <dio_vidReadChannelGroup>:
 3e4:	68 23       	and	r22, r24
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	cb 01       	movw	r24, r22
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <dio_vidReadChannelGroup+0xc>
 3ec:	95 95       	asr	r25
 3ee:	87 95       	ror	r24
 3f0:	4a 95       	dec	r20
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <dio_vidReadChannelGroup+0x8>
 3f4:	08 95       	ret

000003f6 <dio_vidFlipChannel>:
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	a1 f0       	breq	.+40     	; 0x422 <dio_vidFlipChannel+0x2c>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	28 f0       	brcs	.+10     	; 0x408 <dio_vidFlipChannel+0x12>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	e9 f0       	breq	.+58     	; 0x43c <dio_vidFlipChannel+0x46>
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	a1 f5       	brne	.+104    	; 0x46e <dio_vidFlipChannel+0x78>
 406:	27 c0       	rjmp	.+78     	; 0x456 <dio_vidFlipChannel+0x60>
 408:	2b b3       	in	r18, 0x1b	; 27
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	ac 01       	movw	r20, r24
 410:	02 c0       	rjmp	.+4      	; 0x416 <dio_vidFlipChannel+0x20>
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <dio_vidFlipChannel+0x1c>
 41a:	ba 01       	movw	r22, r20
 41c:	62 27       	eor	r22, r18
 41e:	6b bb       	out	0x1b, r22	; 27
 420:	08 95       	ret
 422:	28 b3       	in	r18, 0x18	; 24
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	ac 01       	movw	r20, r24
 42a:	02 c0       	rjmp	.+4      	; 0x430 <dio_vidFlipChannel+0x3a>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <dio_vidFlipChannel+0x36>
 434:	ba 01       	movw	r22, r20
 436:	62 27       	eor	r22, r18
 438:	68 bb       	out	0x18, r22	; 24
 43a:	08 95       	ret
 43c:	25 b3       	in	r18, 0x15	; 21
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ac 01       	movw	r20, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <dio_vidFlipChannel+0x54>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <dio_vidFlipChannel+0x50>
 44e:	ba 01       	movw	r22, r20
 450:	62 27       	eor	r22, r18
 452:	65 bb       	out	0x15, r22	; 21
 454:	08 95       	ret
 456:	22 b3       	in	r18, 0x12	; 18
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	ac 01       	movw	r20, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <dio_vidFlipChannel+0x6e>
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <dio_vidFlipChannel+0x6a>
 468:	ba 01       	movw	r22, r20
 46a:	62 27       	eor	r22, r18
 46c:	62 bb       	out	0x12, r22	; 18
 46e:	08 95       	ret

00000470 <dio_dioLevelReadChannel>:
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	89 f0       	breq	.+34     	; 0x496 <dio_dioLevelReadChannel+0x26>
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	28 f0       	brcs	.+10     	; 0x482 <dio_dioLevelReadChannel+0x12>
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	b9 f0       	breq	.+46     	; 0x4aa <dio_dioLevelReadChannel+0x3a>
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	49 f5       	brne	.+82     	; 0x4d2 <dio_dioLevelReadChannel+0x62>
 480:	1e c0       	rjmp	.+60     	; 0x4be <dio_dioLevelReadChannel+0x4e>
 482:	29 b3       	in	r18, 0x19	; 25
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	c9 01       	movw	r24, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <dio_dioLevelReadChannel+0x1e>
 48a:	95 95       	asr	r25
 48c:	87 95       	ror	r24
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <dio_dioLevelReadChannel+0x1a>
 492:	81 70       	andi	r24, 0x01	; 1
 494:	08 95       	ret
 496:	26 b3       	in	r18, 0x16	; 22
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	c9 01       	movw	r24, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <dio_dioLevelReadChannel+0x32>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <dio_dioLevelReadChannel+0x2e>
 4a6:	81 70       	andi	r24, 0x01	; 1
 4a8:	08 95       	ret
 4aa:	23 b3       	in	r18, 0x13	; 19
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	c9 01       	movw	r24, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <dio_dioLevelReadChannel+0x46>
 4b2:	95 95       	asr	r25
 4b4:	87 95       	ror	r24
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <dio_dioLevelReadChannel+0x42>
 4ba:	81 70       	andi	r24, 0x01	; 1
 4bc:	08 95       	ret
 4be:	20 b3       	in	r18, 0x10	; 16
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	c9 01       	movw	r24, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <dio_dioLevelReadChannel+0x5a>
 4c6:	95 95       	asr	r25
 4c8:	87 95       	ror	r24
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <dio_dioLevelReadChannel+0x56>
 4ce:	81 70       	andi	r24, 0x01	; 1
 4d0:	08 95       	ret
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret

000004d6 <dio_vidEnablePullUp>:
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	f9 f0       	breq	.+62     	; 0x518 <dio_vidEnablePullUp+0x42>
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	30 f0       	brcs	.+12     	; 0x4ea <dio_vidEnablePullUp+0x14>
 4de:	82 30       	cpi	r24, 0x02	; 2
 4e0:	91 f1       	breq	.+100    	; 0x546 <dio_vidEnablePullUp+0x70>
 4e2:	83 30       	cpi	r24, 0x03	; 3
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <dio_vidEnablePullUp+0x12>
 4e6:	5c c0       	rjmp	.+184    	; 0x5a0 <dio_vidEnablePullUp+0xca>
 4e8:	45 c0       	rjmp	.+138    	; 0x574 <dio_vidEnablePullUp+0x9e>
 4ea:	8a b3       	in	r24, 0x1a	; 26
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	06 2e       	mov	r0, r22
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <dio_vidEnablePullUp+0x20>
 4f2:	95 95       	asr	r25
 4f4:	87 95       	ror	r24
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <dio_vidEnablePullUp+0x1c>
 4fa:	80 fd       	sbrc	r24, 0
 4fc:	51 c0       	rjmp	.+162    	; 0x5a0 <dio_vidEnablePullUp+0xca>
 4fe:	2b b3       	in	r18, 0x1b	; 27
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	ac 01       	movw	r20, r24
 506:	02 c0       	rjmp	.+4      	; 0x50c <dio_vidEnablePullUp+0x36>
 508:	44 0f       	add	r20, r20
 50a:	55 1f       	adc	r21, r21
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <dio_vidEnablePullUp+0x32>
 510:	ba 01       	movw	r22, r20
 512:	62 2b       	or	r22, r18
 514:	6b bb       	out	0x1b, r22	; 27
 516:	08 95       	ret
 518:	87 b3       	in	r24, 0x17	; 23
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	06 2e       	mov	r0, r22
 51e:	02 c0       	rjmp	.+4      	; 0x524 <dio_vidEnablePullUp+0x4e>
 520:	95 95       	asr	r25
 522:	87 95       	ror	r24
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <dio_vidEnablePullUp+0x4a>
 528:	80 fd       	sbrc	r24, 0
 52a:	3a c0       	rjmp	.+116    	; 0x5a0 <dio_vidEnablePullUp+0xca>
 52c:	28 b3       	in	r18, 0x18	; 24
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	ac 01       	movw	r20, r24
 534:	02 c0       	rjmp	.+4      	; 0x53a <dio_vidEnablePullUp+0x64>
 536:	44 0f       	add	r20, r20
 538:	55 1f       	adc	r21, r21
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <dio_vidEnablePullUp+0x60>
 53e:	ba 01       	movw	r22, r20
 540:	62 2b       	or	r22, r18
 542:	68 bb       	out	0x18, r22	; 24
 544:	08 95       	ret
 546:	84 b3       	in	r24, 0x14	; 20
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	06 2e       	mov	r0, r22
 54c:	02 c0       	rjmp	.+4      	; 0x552 <dio_vidEnablePullUp+0x7c>
 54e:	95 95       	asr	r25
 550:	87 95       	ror	r24
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <dio_vidEnablePullUp+0x78>
 556:	80 fd       	sbrc	r24, 0
 558:	23 c0       	rjmp	.+70     	; 0x5a0 <dio_vidEnablePullUp+0xca>
 55a:	25 b3       	in	r18, 0x15	; 21
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	ac 01       	movw	r20, r24
 562:	02 c0       	rjmp	.+4      	; 0x568 <dio_vidEnablePullUp+0x92>
 564:	44 0f       	add	r20, r20
 566:	55 1f       	adc	r21, r21
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <dio_vidEnablePullUp+0x8e>
 56c:	ba 01       	movw	r22, r20
 56e:	62 2b       	or	r22, r18
 570:	65 bb       	out	0x15, r22	; 21
 572:	08 95       	ret
 574:	81 b3       	in	r24, 0x11	; 17
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	06 2e       	mov	r0, r22
 57a:	02 c0       	rjmp	.+4      	; 0x580 <dio_vidEnablePullUp+0xaa>
 57c:	95 95       	asr	r25
 57e:	87 95       	ror	r24
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <dio_vidEnablePullUp+0xa6>
 584:	80 fd       	sbrc	r24, 0
 586:	0c c0       	rjmp	.+24     	; 0x5a0 <dio_vidEnablePullUp+0xca>
 588:	22 b3       	in	r18, 0x12	; 18
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	ac 01       	movw	r20, r24
 590:	02 c0       	rjmp	.+4      	; 0x596 <dio_vidEnablePullUp+0xc0>
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <dio_vidEnablePullUp+0xbc>
 59a:	ba 01       	movw	r22, r20
 59c:	62 2b       	or	r22, r18
 59e:	62 bb       	out	0x12, r22	; 18
 5a0:	08 95       	ret

000005a2 <GIE_voidGlobalInterruptEnable>:
 5a2:	8f b7       	in	r24, 0x3f	; 63
 5a4:	80 68       	ori	r24, 0x80	; 128
 5a6:	8f bf       	out	0x3f, r24	; 63
 5a8:	08 95       	ret

000005aa <GIE_voidGlobalInterruptDisable>:
 5aa:	8f b7       	in	r24, 0x3f	; 63
 5ac:	8f 77       	andi	r24, 0x7F	; 127
 5ae:	8f bf       	out	0x3f, r24	; 63
 5b0:	08 95       	ret

000005b2 <main>:

#include "APP.h"

int main(void)
{
	App_voidIit();
 5b2:	0e 94 4e 00 	call	0x9c	; 0x9c <App_voidIit>
	
	//Start_voidSchaduler();
	
    while(1)
    {
		App_vidMain();
 5b6:	0e 94 6f 00 	call	0xde	; 0xde <App_vidMain>
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <main+0x4>

000005bc <voidScheduler>:
 5bc:	cf 92       	push	r12
 5be:	df 92       	push	r13
 5c0:	ef 92       	push	r14
 5c2:	ff 92       	push	r15
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	07 e6       	ldi	r16, 0x67	; 103
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	e8 01       	movw	r28, r16
 5d2:	26 97       	sbiw	r28, 0x06	; 6
 5d4:	0f 2e       	mov	r0, r31
 5d6:	ff e0       	ldi	r31, 0x0F	; 15
 5d8:	ef 2e       	mov	r14, r31
 5da:	ff 24       	eor	r15, r15
 5dc:	f0 2d       	mov	r31, r0
 5de:	e0 0e       	add	r14, r16
 5e0:	f1 1e       	adc	r15, r17
 5e2:	f8 01       	movw	r30, r16
 5e4:	80 81       	ld	r24, Z
 5e6:	88 23       	and	r24, r24
 5e8:	91 f4       	brne	.+36     	; 0x60e <voidScheduler+0x52>
 5ea:	8a 81       	ldd	r24, Y+2	; 0x02
 5ec:	9b 81       	ldd	r25, Y+3	; 0x03
 5ee:	00 97       	sbiw	r24, 0x00	; 0
 5f0:	59 f4       	brne	.+22     	; 0x608 <voidScheduler+0x4c>
 5f2:	ec 81       	ldd	r30, Y+4	; 0x04
 5f4:	fd 81       	ldd	r31, Y+5	; 0x05
 5f6:	30 97       	sbiw	r30, 0x00	; 0
 5f8:	51 f0       	breq	.+20     	; 0x60e <voidScheduler+0x52>
 5fa:	09 95       	icall
 5fc:	88 81       	ld	r24, Y
 5fe:	99 81       	ldd	r25, Y+1	; 0x01
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	9b 83       	std	Y+3, r25	; 0x03
 604:	8a 83       	std	Y+2, r24	; 0x02
 606:	03 c0       	rjmp	.+6      	; 0x60e <voidScheduler+0x52>
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	9b 83       	std	Y+3, r25	; 0x03
 60c:	8a 83       	std	Y+2, r24	; 0x02
 60e:	09 5f       	subi	r16, 0xF9	; 249
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	27 96       	adiw	r28, 0x07	; 7
 614:	ce 15       	cp	r28, r14
 616:	df 05       	cpc	r29, r15
 618:	21 f7       	brne	.-56     	; 0x5e2 <voidScheduler+0x26>
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	0f 91       	pop	r16
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	df 90       	pop	r13
 628:	cf 90       	pop	r12
 62a:	08 95       	ret

0000062c <Start_voidSchaduler>:
 62c:	0e 94 39 04 	call	0x872	; 0x872 <TIMER0_void_Init>
 630:	8a ef       	ldi	r24, 0xFA	; 250
 632:	0e 94 5f 04 	call	0x8be	; 0x8be <TIMER0_void_SetCompareVal>
 636:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GIE_voidGlobalInterruptEnable>
 63a:	8e ed       	ldi	r24, 0xDE	; 222
 63c:	92 e0       	ldi	r25, 0x02	; 2
 63e:	0e 94 76 04 	call	0x8ec	; 0x8ec <TIMER0_void_SetCTCCallBack>
 642:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TIMER0_void_EnableCTCInt>
 646:	08 95       	ret

00000648 <Create_u8task>:
 648:	db 01       	movw	r26, r22
 64a:	ba 01       	movw	r22, r20
 64c:	a9 01       	movw	r20, r18
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	f9 01       	movw	r30, r18
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	e2 1b       	sub	r30, r18
 662:	f3 0b       	sbc	r31, r19
 664:	ef 59       	subi	r30, 0x9F	; 159
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	84 81       	ldd	r24, Z+4	; 0x04
 66a:	95 81       	ldd	r25, Z+5	; 0x05
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	a9 f4       	brne	.+42     	; 0x69a <Create_u8task+0x52>
 670:	c9 01       	movw	r24, r18
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	82 1b       	sub	r24, r18
 680:	93 0b       	sbc	r25, r19
 682:	fc 01       	movw	r30, r24
 684:	ef 59       	subi	r30, 0x9F	; 159
 686:	ff 4f       	sbci	r31, 0xFF	; 255
 688:	b1 83       	std	Z+1, r27	; 0x01
 68a:	a0 83       	st	Z, r26
 68c:	73 83       	std	Z+3, r23	; 0x03
 68e:	62 83       	std	Z+2, r22	; 0x02
 690:	55 83       	std	Z+5, r21	; 0x05
 692:	44 83       	std	Z+4, r20	; 0x04
 694:	16 82       	std	Z+6, r1	; 0x06
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	08 95       	ret
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	08 95       	ret

0000069e <Resume_voidTask>:
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	fc 01       	movw	r30, r24
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	e8 1b       	sub	r30, r24
 6b0:	f9 0b       	sbc	r31, r25
 6b2:	ef 59       	subi	r30, 0x9F	; 159
 6b4:	ff 4f       	sbci	r31, 0xFF	; 255
 6b6:	16 82       	std	Z+6, r1	; 0x06
 6b8:	08 95       	ret

000006ba <Suspend_voidTask>:
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	fc 01       	movw	r30, r24
 6be:	ee 0f       	add	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	ee 0f       	add	r30, r30
 6c4:	ff 1f       	adc	r31, r31
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e8 1b       	sub	r30, r24
 6cc:	f9 0b       	sbc	r31, r25
 6ce:	ef 59       	subi	r30, 0x9F	; 159
 6d0:	ff 4f       	sbci	r31, 0xFF	; 255
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	86 83       	std	Z+6, r24	; 0x06
 6d6:	08 95       	ret

000006d8 <Delete_voidTask>:
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fc 01       	movw	r30, r24
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	ee 0f       	add	r30, r30
 6e2:	ff 1f       	adc	r31, r31
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	e8 1b       	sub	r30, r24
 6ea:	f9 0b       	sbc	r31, r25
 6ec:	ef 59       	subi	r30, 0x9F	; 159
 6ee:	ff 4f       	sbci	r31, 0xFF	; 255
 6f0:	15 82       	std	Z+5, r1	; 0x05
 6f2:	14 82       	std	Z+4, r1	; 0x04
 6f4:	08 95       	ret

000006f6 <__vector_12>:
 */


#include "SPI_Interface.h"

ISR(VECTOR(12)) {
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	ptr_func();
 718:	e0 91 76 00 	lds	r30, 0x0076
 71c:	f0 91 77 00 	lds	r31, 0x0077
 720:	09 95       	icall
}
 722:	ff 91       	pop	r31
 724:	ef 91       	pop	r30
 726:	bf 91       	pop	r27
 728:	af 91       	pop	r26
 72a:	9f 91       	pop	r25
 72c:	8f 91       	pop	r24
 72e:	7f 91       	pop	r23
 730:	6f 91       	pop	r22
 732:	5f 91       	pop	r21
 734:	4f 91       	pop	r20
 736:	3f 91       	pop	r19
 738:	2f 91       	pop	r18
 73a:	0f 90       	pop	r0
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti

00000744 <SPI_Init_Master>:

void SPI_Init_Master(Master_Config *My_Config) {
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	66 e0       	ldi	r22, 0x06	; 6
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	65 e0       	ldi	r22, 0x05	; 5
 758:	41 e0       	ldi	r20, 0x01	; 1
 75a:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	67 e0       	ldi	r22, 0x07	; 7
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	64 e0       	ldi	r22, 0x04	; 4
 76c:	41 e0       	ldi	r20, 0x01	; 1
 76e:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>

	SPCR |= (1 << SPE)
 772:	4d b1       	in	r20, 0x0d	; 13
 774:	40 65       	ori	r20, 0x50	; 80
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	83 70       	andi	r24, 0x03	; 3
 77a:	48 2b       	or	r20, r24
			| (My_Config->Int_Enable << SPIE)
 77c:	38 81       	ld	r19, Y
 77e:	37 95       	ror	r19
 780:	33 27       	eor	r19, r19
 782:	37 95       	ror	r19
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 784:	34 2b       	or	r19, r20
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
 786:	29 81       	ldd	r18, Y+1	; 0x01
 788:	22 95       	swap	r18
 78a:	22 0f       	add	r18, r18
 78c:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 78e:	23 2b       	or	r18, r19
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 790:	9a 81       	ldd	r25, Y+2	; 0x02
 792:	99 0f       	add	r25, r25
 794:	99 0f       	add	r25, r25
 796:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 798:	92 2b       	or	r25, r18
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	88 0f       	add	r24, r24
 79e:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 7a0:	89 2b       	or	r24, r25
 7a2:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
			| (My_Config->Prescaler & 0x3);

	SPSR |= (My_Config->Prescaler >> 2);
 7a4:	9e b1       	in	r25, 0x0e	; 14
 7a6:	8c 81       	ldd	r24, Y+4	; 0x04
 7a8:	86 95       	lsr	r24
 7aa:	86 95       	lsr	r24
 7ac:	89 2b       	or	r24, r25
 7ae:	8e b9       	out	0x0e, r24	; 14
}
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <SPI_Init_Slave>:

void SPI_Init_Slave(Slave_Config *My_Config) {
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, OUTPUT);
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	66 e0       	ldi	r22, 0x06	; 6
 7c0:	41 e0       	ldi	r20, 0x01	; 1
 7c2:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	65 e0       	ldi	r22, 0x05	; 5
 7ca:	40 e0       	ldi	r20, 0x00	; 0
 7cc:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	67 e0       	ldi	r22, 0x07	; 7
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	64 e0       	ldi	r22, 0x04	; 4
 7de:	40 e0       	ldi	r20, 0x00	; 0
 7e0:	0e 94 8a 00 	call	0x114	; 0x114 <dio_vidConfigChannel>

	SPCR = 0;
 7e4:	1d b8       	out	0x0d, r1	; 13
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 7e6:	4d b1       	in	r20, 0x0d	; 13
 7e8:	40 64       	ori	r20, 0x40	; 64
 7ea:	38 81       	ld	r19, Y
 7ec:	37 95       	ror	r19
 7ee:	33 27       	eor	r19, r19
 7f0:	37 95       	ror	r19
 7f2:	34 2b       	or	r19, r20
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 7f4:	29 81       	ldd	r18, Y+1	; 0x01
 7f6:	22 95       	swap	r18
 7f8:	22 0f       	add	r18, r18
 7fa:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 7fc:	23 2b       	or	r18, r19
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 7fe:	9a 81       	ldd	r25, Y+2	; 0x02
 800:	99 0f       	add	r25, r25
 802:	99 0f       	add	r25, r25
 804:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 806:	92 2b       	or	r25, r18
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
 808:	8b 81       	ldd	r24, Y+3	; 0x03
 80a:	88 0f       	add	r24, r24
 80c:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 80e:	89 2b       	or	r24, r25
 810:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
}
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	08 95       	ret

00000818 <SPI_Send_Receive_Synch_Byte>:

void SPI_Send_Receive_Synch_Byte(u8 byte, u8 *received) {
	SPDR = byte;
 818:	8f b9       	out	0x0f, r24	; 15

	while (!CHECK_BIT(SPSR, SPIF));
 81a:	77 9b       	sbis	0x0e, 7	; 14
 81c:	fe cf       	rjmp	.-4      	; 0x81a <SPI_Send_Receive_Synch_Byte+0x2>
	*received = SPDR;
 81e:	8f b1       	in	r24, 0x0f	; 15
 820:	fb 01       	movw	r30, r22
 822:	80 83       	st	Z, r24
}
 824:	08 95       	ret

00000826 <SPI_Send_ASynch_Byte>:

void SPI_Send_ASynch_Byte(u8 byte) {
	SPDR = byte;
 826:	8f b9       	out	0x0f, r24	; 15

//	while (!CHECK_BIT(SPSR, SPIF));
}
 828:	08 95       	ret

0000082a <SPI_Read_Data>:

void SPI_Read_Data(u8 *var) {
	*var = SPDR;
 82a:	2f b1       	in	r18, 0x0f	; 15
 82c:	fc 01       	movw	r30, r24
 82e:	20 83       	st	Z, r18
}
 830:	08 95       	ret

00000832 <SPI_Set_CallBack>:

void SPI_Set_CallBack(void (*func)(void)) {
	ptr_func = func;
 832:	90 93 77 00 	sts	0x0077, r25
 836:	80 93 76 00 	sts	0x0076, r24
}
 83a:	08 95       	ret

0000083c <Global_Interrupt_Enable>:

void Global_Interrupt_Enable() {
	SREG |= (1 << 7);
 83c:	8f b7       	in	r24, 0x3f	; 63
 83e:	80 68       	ori	r24, 0x80	; 128
 840:	8f bf       	out	0x3f, r24	; 63
}
 842:	08 95       	ret

00000844 <Master_Send>:
void Master_Send(u8 data){
	SPI_Send_ASynch_Byte(data);
 844:	0e 94 13 04 	call	0x826	; 0x826 <SPI_Send_ASynch_Byte>
}
 848:	08 95       	ret

0000084a <Slave_Send>:
void Slave_Send(u8 data){
	SPI_Send_ASynch_Byte(data);
 84a:	0e 94 13 04 	call	0x826	; 0x826 <SPI_Send_ASynch_Byte>
}
 84e:	08 95       	ret

00000850 <Master_Receive>:
u8 Master_Receive(){
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	0f 92       	push	r0
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
	u8 received=0;
 85a:	19 82       	std	Y+1, r1	; 0x01
	SPI_Send_Receive_Synch_Byte(DUMMY_DATA,&received);
 85c:	8e ef       	ldi	r24, 0xFE	; 254
 85e:	be 01       	movw	r22, r28
 860:	6f 5f       	subi	r22, 0xFF	; 255
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	0e 94 0c 04 	call	0x818	; 0x818 <SPI_Send_Receive_Synch_Byte>
	return received;
}
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	0f 90       	pop	r0
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	08 95       	ret

00000872 <TIMER0_void_Init>:
 872:	83 b7       	in	r24, 0x33	; 51
 874:	8f 7b       	andi	r24, 0xBF	; 191
 876:	83 bf       	out	0x33, r24	; 51
 878:	83 b7       	in	r24, 0x33	; 51
 87a:	88 60       	ori	r24, 0x08	; 8
 87c:	83 bf       	out	0x33, r24	; 51
 87e:	83 b7       	in	r24, 0x33	; 51
 880:	81 60       	ori	r24, 0x01	; 1
 882:	83 bf       	out	0x33, r24	; 51
 884:	83 b7       	in	r24, 0x33	; 51
 886:	82 60       	ori	r24, 0x02	; 2
 888:	83 bf       	out	0x33, r24	; 51
 88a:	83 b7       	in	r24, 0x33	; 51
 88c:	8b 7f       	andi	r24, 0xFB	; 251
 88e:	83 bf       	out	0x33, r24	; 51
 890:	83 b7       	in	r24, 0x33	; 51
 892:	8f 7e       	andi	r24, 0xEF	; 239
 894:	83 bf       	out	0x33, r24	; 51
 896:	83 b7       	in	r24, 0x33	; 51
 898:	8f 7d       	andi	r24, 0xDF	; 223
 89a:	83 bf       	out	0x33, r24	; 51
 89c:	89 b7       	in	r24, 0x39	; 57
 89e:	8e 7f       	andi	r24, 0xFE	; 254
 8a0:	89 bf       	out	0x39, r24	; 57
 8a2:	89 b7       	in	r24, 0x39	; 57
 8a4:	8d 7f       	andi	r24, 0xFD	; 253
 8a6:	89 bf       	out	0x39, r24	; 57
 8a8:	88 b7       	in	r24, 0x38	; 56
 8aa:	81 60       	ori	r24, 0x01	; 1
 8ac:	88 bf       	out	0x38, r24	; 56
 8ae:	88 b7       	in	r24, 0x38	; 56
 8b0:	82 60       	ori	r24, 0x02	; 2
 8b2:	88 bf       	out	0x38, r24	; 56
 8b4:	12 be       	out	0x32, r1	; 50
 8b6:	1c be       	out	0x3c, r1	; 60
 8b8:	08 95       	ret

000008ba <TIMER0_void_SetTimerReg>:
 8ba:	82 bf       	out	0x32, r24	; 50
 8bc:	08 95       	ret

000008be <TIMER0_void_SetCompareVal>:
 8be:	8c bf       	out	0x3c, r24	; 60
 8c0:	08 95       	ret

000008c2 <TIMER0_void_EnableOVInt>:
 8c2:	89 b7       	in	r24, 0x39	; 57
 8c4:	81 60       	ori	r24, 0x01	; 1
 8c6:	89 bf       	out	0x39, r24	; 57
 8c8:	08 95       	ret

000008ca <TIMER0_void_DisableOVInt>:
 8ca:	89 b7       	in	r24, 0x39	; 57
 8cc:	8e 7f       	andi	r24, 0xFE	; 254
 8ce:	89 bf       	out	0x39, r24	; 57
 8d0:	08 95       	ret

000008d2 <TIMER0_void_EnableCTCInt>:
 8d2:	89 b7       	in	r24, 0x39	; 57
 8d4:	82 60       	ori	r24, 0x02	; 2
 8d6:	89 bf       	out	0x39, r24	; 57
 8d8:	08 95       	ret

000008da <TIMER0_void_DisableCTCInt>:
 8da:	89 b7       	in	r24, 0x39	; 57
 8dc:	8d 7f       	andi	r24, 0xFD	; 253
 8de:	89 bf       	out	0x39, r24	; 57
 8e0:	08 95       	ret

000008e2 <TIMER0_void_SetOVCallBack>:
 8e2:	90 93 81 00 	sts	0x0081, r25
 8e6:	80 93 80 00 	sts	0x0080, r24
 8ea:	08 95       	ret

000008ec <TIMER0_void_SetCTCCallBack>:
 8ec:	90 93 7f 00 	sts	0x007F, r25
 8f0:	80 93 7e 00 	sts	0x007E, r24
 8f4:	08 95       	ret

000008f6 <__vector_11>:
 8f6:	1f 92       	push	r1
 8f8:	0f 92       	push	r0
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	0f 92       	push	r0
 8fe:	11 24       	eor	r1, r1
 900:	2f 93       	push	r18
 902:	3f 93       	push	r19
 904:	4f 93       	push	r20
 906:	5f 93       	push	r21
 908:	6f 93       	push	r22
 90a:	7f 93       	push	r23
 90c:	8f 93       	push	r24
 90e:	9f 93       	push	r25
 910:	af 93       	push	r26
 912:	bf 93       	push	r27
 914:	ef 93       	push	r30
 916:	ff 93       	push	r31
 918:	e0 91 80 00 	lds	r30, 0x0080
 91c:	f0 91 81 00 	lds	r31, 0x0081
 920:	09 95       	icall
 922:	ff 91       	pop	r31
 924:	ef 91       	pop	r30
 926:	bf 91       	pop	r27
 928:	af 91       	pop	r26
 92a:	9f 91       	pop	r25
 92c:	8f 91       	pop	r24
 92e:	7f 91       	pop	r23
 930:	6f 91       	pop	r22
 932:	5f 91       	pop	r21
 934:	4f 91       	pop	r20
 936:	3f 91       	pop	r19
 938:	2f 91       	pop	r18
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	1f 90       	pop	r1
 942:	18 95       	reti

00000944 <__vector_10>:
 944:	1f 92       	push	r1
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	0f 92       	push	r0
 94c:	11 24       	eor	r1, r1
 94e:	2f 93       	push	r18
 950:	3f 93       	push	r19
 952:	4f 93       	push	r20
 954:	5f 93       	push	r21
 956:	6f 93       	push	r22
 958:	7f 93       	push	r23
 95a:	8f 93       	push	r24
 95c:	9f 93       	push	r25
 95e:	af 93       	push	r26
 960:	bf 93       	push	r27
 962:	ef 93       	push	r30
 964:	ff 93       	push	r31
 966:	e0 91 7e 00 	lds	r30, 0x007E
 96a:	f0 91 7f 00 	lds	r31, 0x007F
 96e:	09 95       	icall
 970:	ff 91       	pop	r31
 972:	ef 91       	pop	r30
 974:	bf 91       	pop	r27
 976:	af 91       	pop	r26
 978:	9f 91       	pop	r25
 97a:	8f 91       	pop	r24
 97c:	7f 91       	pop	r23
 97e:	6f 91       	pop	r22
 980:	5f 91       	pop	r21
 982:	4f 91       	pop	r20
 984:	3f 91       	pop	r19
 986:	2f 91       	pop	r18
 988:	0f 90       	pop	r0
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	0f 90       	pop	r0
 98e:	1f 90       	pop	r1
 990:	18 95       	reti

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
