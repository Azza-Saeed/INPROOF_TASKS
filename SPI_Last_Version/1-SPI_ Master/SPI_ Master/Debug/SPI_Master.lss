
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000071c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000071c  000007b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  000007b6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c01  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000407  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d3  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b8  00000000  00000000  00002ae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 02 	call	0x520	; 0x520 <main>
  8a:	0c 94 8c 03 	jmp	0x718	; 0x718 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	31 f1       	breq	.+76     	; 0xe2 <dio_vidConfigChannel+0x50>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	38 f0       	brcs	.+14     	; 0xa8 <dio_vidConfigChannel+0x16>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <dio_vidConfigChannel+0xe>
  9e:	3e c0       	rjmp	.+124    	; 0x11c <dio_vidConfigChannel+0x8a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f0       	breq	.+2      	; 0xa6 <dio_vidConfigChannel+0x14>
  a4:	74 c0       	rjmp	.+232    	; 0x18e <dio_vidConfigChannel+0xfc>
  a6:	57 c0       	rjmp	.+174    	; 0x156 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
	if (direction == OUTPUT)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <dio_vidConfigChannel+0x34>
	{
		SET_BIT (DIO_DDRA_REG,channel);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x28>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x24>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	08 95       	ret
	}
	else
	{
		CLEAR_BIT (DIO_DDRA_REG,channel);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x42>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x3e>
  d8:	ba 01       	movw	r22, r20
  da:	60 95       	com	r22
  dc:	62 23       	and	r22, r18
  de:	6a bb       	out	0x1a, r22	; 26
  e0:	08 95       	ret
	}
	break;
	case DIO_PORTB:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dio_vidConfigChannel+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <dio_vidConfigChannel+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	67 bb       	out	0x17, r22	; 23
  fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <dio_vidConfigChannel+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <dio_vidConfigChannel+0x78>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	67 bb       	out	0x17, r22	; 23
 11a:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	ac 01       	movw	r20, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <dio_vidConfigChannel+0x9c>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <dio_vidConfigChannel+0x98>
 132:	ba 01       	movw	r22, r20
 134:	62 2b       	or	r22, r18
 136:	64 bb       	out	0x14, r22	; 20
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <dio_vidConfigChannel+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <dio_vidConfigChannel+0xb2>
 14c:	ba 01       	movw	r22, r20
 14e:	60 95       	com	r22
 150:	62 23       	and	r22, r18
 152:	64 bb       	out	0x14, r22	; 20
 154:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <dio_vidConfigChannel+0xd6>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <dio_vidConfigChannel+0xd2>
 16c:	ba 01       	movw	r22, r20
 16e:	62 2b       	or	r22, r18
 170:	61 bb       	out	0x11, r22	; 17
 172:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <dio_vidConfigChannel+0xf0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <dio_vidConfigChannel+0xec>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	61 bb       	out	0x11, r22	; 17
 18e:	08 95       	ret

00000190 <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	49 f0       	breq	.+18     	; 0x1a6 <dio_vidConfigPort+0x16>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	28 f0       	brcs	.+10     	; 0x1a2 <dio_vidConfigPort+0x12>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	39 f0       	breq	.+14     	; 0x1aa <dio_vidConfigPort+0x1a>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	41 f4       	brne	.+16     	; 0x1b0 <dio_vidConfigPort+0x20>
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <dio_vidConfigPort+0x1e>
	{
		case DIO_PORTA: DIO_DDRA_REG = direction;	break;
 1a2:	6a bb       	out	0x1a, r22	; 26
 1a4:	08 95       	ret
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 1a6:	67 bb       	out	0x17, r22	; 23
 1a8:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 1aa:	64 bb       	out	0x14, r22	; 20
 1ac:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 1ae:	61 bb       	out	0x11, r22	; 17
 1b0:	08 95       	ret

000001b2 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <dio_vidSetPortValue+0x16>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <dio_vidSetPortValue+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	39 f0       	breq	.+14     	; 0x1cc <dio_vidSetPortValue+0x1a>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	41 f4       	brne	.+16     	; 0x1d2 <dio_vidSetPortValue+0x20>
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <dio_vidSetPortValue+0x1e>
	{
		case DIO_PORTA: DIO_PORTA_REG = value;	break;
 1c4:	6b bb       	out	0x1b, r22	; 27
 1c6:	08 95       	ret
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 1c8:	68 bb       	out	0x18, r22	; 24
 1ca:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 1cc:	65 bb       	out	0x15, r22	; 21
 1ce:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 1d0:	62 bb       	out	0x12, r22	; 18
 1d2:	08 95       	ret

000001d4 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f1       	breq	.+76     	; 0x224 <dio_vidWriteChannel+0x50>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	38 f0       	brcs	.+14     	; 0x1ea <dio_vidWriteChannel+0x16>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	09 f4       	brne	.+2      	; 0x1e2 <dio_vidWriteChannel+0xe>
 1e0:	3e c0       	rjmp	.+124    	; 0x25e <dio_vidWriteChannel+0x8a>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <dio_vidWriteChannel+0x14>
 1e6:	74 c0       	rjmp	.+232    	; 0x2d0 <dio_vidWriteChannel+0xfc>
 1e8:	57 c0       	rjmp	.+174    	; 0x298 <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
	if (level == STD_LOW)
 1ea:	44 23       	and	r20, r20
 1ec:	71 f4       	brne	.+28     	; 0x20a <dio_vidWriteChannel+0x36>
	{
		CLEAR_BIT(DIO_PORTA_REG,channel);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	ac 01       	movw	r20, r24
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dio_vidWriteChannel+0x28>
 1f8:	44 0f       	add	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <dio_vidWriteChannel+0x24>
 200:	ba 01       	movw	r22, r20
 202:	60 95       	com	r22
 204:	62 23       	and	r22, r18
 206:	6b bb       	out	0x1b, r22	; 27
 208:	08 95       	ret
	}
	else
	{
		SET_BIT(DIO_PORTA_REG,channel);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <dio_vidWriteChannel+0x44>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <dio_vidWriteChannel+0x40>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	6b bb       	out	0x1b, r22	; 27
 222:	08 95       	ret
	}
	break;
	case DIO_PORTB:
		if (level == STD_LOW)
 224:	44 23       	and	r20, r20
 226:	71 f4       	brne	.+28     	; 0x244 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <dio_vidWriteChannel+0x62>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <dio_vidWriteChannel+0x5e>
 23a:	ba 01       	movw	r22, r20
 23c:	60 95       	com	r22
 23e:	62 23       	and	r22, r18
 240:	68 bb       	out	0x18, r22	; 24
 242:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	ac 01       	movw	r20, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <dio_vidWriteChannel+0x7e>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <dio_vidWriteChannel+0x7a>
 256:	ba 01       	movw	r22, r20
 258:	62 2b       	or	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
 25c:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 25e:	44 23       	and	r20, r20
 260:	71 f4       	brne	.+28     	; 0x27e <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 262:	25 b3       	in	r18, 0x15	; 21
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	ac 01       	movw	r20, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <dio_vidWriteChannel+0x9c>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <dio_vidWriteChannel+0x98>
 274:	ba 01       	movw	r22, r20
 276:	60 95       	com	r22
 278:	62 23       	and	r22, r18
 27a:	65 bb       	out	0x15, r22	; 21
 27c:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_vidWriteChannel+0xb8>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_vidWriteChannel+0xb4>
 290:	ba 01       	movw	r22, r20
 292:	62 2b       	or	r22, r18
 294:	65 bb       	out	0x15, r22	; 21
 296:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 298:	44 23       	and	r20, r20
 29a:	71 f4       	brne	.+28     	; 0x2b8 <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 29c:	22 b3       	in	r18, 0x12	; 18
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <dio_vidWriteChannel+0xd6>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <dio_vidWriteChannel+0xd2>
 2ae:	ba 01       	movw	r22, r20
 2b0:	60 95       	com	r22
 2b2:	62 23       	and	r22, r18
 2b4:	62 bb       	out	0x12, r22	; 18
 2b6:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_vidWriteChannel+0xf2>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_vidWriteChannel+0xee>
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 2b       	or	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret

000002d2 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	c1 f0       	breq	.+48     	; 0x306 <dio_vidWriteChannelGroup+0x34>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	30 f0       	brcs	.+12     	; 0x2e6 <dio_vidWriteChannelGroup+0x14>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	19 f1       	breq	.+70     	; 0x324 <dio_vidWriteChannelGroup+0x52>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <dio_vidWriteChannelGroup+0x12>
 2e2:	3e c0       	rjmp	.+124    	; 0x360 <dio_vidWriteChannelGroup+0x8e>
 2e4:	2e c0       	rjmp	.+92     	; 0x342 <dio_vidWriteChannelGroup+0x70>
	{
		case DIO_PORTA:
		DIO_PORTA_REG &= ~mask;
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	94 2f       	mov	r25, r20
 2ea:	90 95       	com	r25
 2ec:	89 23       	and	r24, r25
 2ee:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTA_REG = (value<<pos) & mask;
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	cb 01       	movw	r24, r22
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <dio_vidWriteChannelGroup+0x28>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	2a 95       	dec	r18
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <dio_vidWriteChannelGroup+0x24>
 2fe:	9c 01       	movw	r18, r24
 300:	24 23       	and	r18, r20
 302:	2b bb       	out	0x1b, r18	; 27
		break;
 304:	08 95       	ret
		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 306:	88 b3       	in	r24, 0x18	; 24
 308:	94 2f       	mov	r25, r20
 30a:	90 95       	com	r25
 30c:	89 23       	and	r24, r25
 30e:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	fb 01       	movw	r30, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <dio_vidWriteChannelGroup+0x48>
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	2a 95       	dec	r18
 31c:	e2 f7       	brpl	.-8      	; 0x316 <dio_vidWriteChannelGroup+0x44>
 31e:	e4 23       	and	r30, r20
 320:	e8 bb       	out	0x18, r30	; 24
		break;
 322:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 324:	85 b3       	in	r24, 0x15	; 21
 326:	94 2f       	mov	r25, r20
 328:	90 95       	com	r25
 32a:	89 23       	and	r24, r25
 32c:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	cb 01       	movw	r24, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <dio_vidWriteChannelGroup+0x66>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	2a 95       	dec	r18
 33a:	e2 f7       	brpl	.-8      	; 0x334 <dio_vidWriteChannelGroup+0x62>
 33c:	84 23       	and	r24, r20
 33e:	85 bb       	out	0x15, r24	; 21
		break;
 340:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 342:	82 b3       	in	r24, 0x12	; 18
 344:	94 2f       	mov	r25, r20
 346:	90 95       	com	r25
 348:	89 23       	and	r24, r25
 34a:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	cb 01       	movw	r24, r22
 350:	02 c0       	rjmp	.+4      	; 0x356 <dio_vidWriteChannelGroup+0x84>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	e2 f7       	brpl	.-8      	; 0x352 <dio_vidWriteChannelGroup+0x80>
 35a:	9c 01       	movw	r18, r24
 35c:	24 23       	and	r18, r20
 35e:	22 bb       	out	0x12, r18	; 18
 360:	08 95       	ret

00000362 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 362:	68 23       	and	r22, r24
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	cb 01       	movw	r24, r22
 368:	02 c0       	rjmp	.+4      	; 0x36e <dio_vidReadChannelGroup+0xc>
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	4a 95       	dec	r20
 370:	e2 f7       	brpl	.-8      	; 0x36a <dio_vidReadChannelGroup+0x8>
}
 372:	08 95       	ret

00000374 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	a1 f0       	breq	.+40     	; 0x3a0 <dio_vidFlipChannel+0x2c>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	28 f0       	brcs	.+10     	; 0x386 <dio_vidFlipChannel+0x12>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	e9 f0       	breq	.+58     	; 0x3ba <dio_vidFlipChannel+0x46>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	a1 f5       	brne	.+104    	; 0x3ec <dio_vidFlipChannel+0x78>
 384:	27 c0       	rjmp	.+78     	; 0x3d4 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
	FLIP_BIT(DIO_PORTA_REG,channel);
 386:	2b b3       	in	r18, 0x1b	; 27
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ac 01       	movw	r20, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <dio_vidFlipChannel+0x20>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <dio_vidFlipChannel+0x1c>
 398:	ba 01       	movw	r22, r20
 39a:	62 27       	eor	r22, r18
 39c:	6b bb       	out	0x1b, r22	; 27
	break;
 39e:	08 95       	ret
	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 3a0:	28 b3       	in	r18, 0x18	; 24
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	ac 01       	movw	r20, r24
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <dio_vidFlipChannel+0x3a>
 3aa:	44 0f       	add	r20, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <dio_vidFlipChannel+0x36>
 3b2:	ba 01       	movw	r22, r20
 3b4:	62 27       	eor	r22, r18
 3b6:	68 bb       	out	0x18, r22	; 24
		break;
 3b8:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 3ba:	25 b3       	in	r18, 0x15	; 21
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	ac 01       	movw	r20, r24
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <dio_vidFlipChannel+0x54>
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <dio_vidFlipChannel+0x50>
 3cc:	ba 01       	movw	r22, r20
 3ce:	62 27       	eor	r22, r18
 3d0:	65 bb       	out	0x15, r22	; 21
		break;
 3d2:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	ac 01       	movw	r20, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <dio_vidFlipChannel+0x6e>
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <dio_vidFlipChannel+0x6a>
 3e6:	ba 01       	movw	r22, r20
 3e8:	62 27       	eor	r22, r18
 3ea:	62 bb       	out	0x12, r22	; 18
 3ec:	08 95       	ret

000003ee <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	89 f0       	breq	.+34     	; 0x414 <dio_dioLevelReadChannel+0x26>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	28 f0       	brcs	.+10     	; 0x400 <dio_dioLevelReadChannel+0x12>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	b9 f0       	breq	.+46     	; 0x428 <dio_dioLevelReadChannel+0x3a>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	49 f5       	brne	.+82     	; 0x450 <dio_dioLevelReadChannel+0x62>
 3fe:	1e c0       	rjmp	.+60     	; 0x43c <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
	 loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 400:	29 b3       	in	r18, 0x19	; 25
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	c9 01       	movw	r24, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <dio_dioLevelReadChannel+0x1e>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <dio_dioLevelReadChannel+0x1a>
 410:	81 70       	andi	r24, 0x01	; 1
	 break;
 412:	08 95       	ret
	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 414:	26 b3       	in	r18, 0x16	; 22
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	c9 01       	movw	r24, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <dio_dioLevelReadChannel+0x32>
 41c:	95 95       	asr	r25
 41e:	87 95       	ror	r24
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <dio_dioLevelReadChannel+0x2e>
 424:	81 70       	andi	r24, 0x01	; 1
		break;
 426:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 428:	23 b3       	in	r18, 0x13	; 19
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	c9 01       	movw	r24, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <dio_dioLevelReadChannel+0x46>
 430:	95 95       	asr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <dio_dioLevelReadChannel+0x42>
 438:	81 70       	andi	r24, 0x01	; 1
		break;
 43a:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 43c:	20 b3       	in	r18, 0x10	; 16
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	c9 01       	movw	r24, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <dio_dioLevelReadChannel+0x5a>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <dio_dioLevelReadChannel+0x56>
 44c:	81 70       	andi	r24, 0x01	; 1
		break;
 44e:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 450:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 452:	08 95       	ret

00000454 <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	f9 f0       	breq	.+62     	; 0x496 <dio_vidEnablePullUp+0x42>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	30 f0       	brcs	.+12     	; 0x468 <dio_vidEnablePullUp+0x14>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	91 f1       	breq	.+100    	; 0x4c4 <dio_vidEnablePullUp+0x70>
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	09 f0       	breq	.+2      	; 0x466 <dio_vidEnablePullUp+0x12>
 464:	5c c0       	rjmp	.+184    	; 0x51e <dio_vidEnablePullUp+0xca>
 466:	45 c0       	rjmp	.+138    	; 0x4f2 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if(CHECK_BIT(DIO_DDRA_REG,channel) == INPUT)
 468:	8a b3       	in	r24, 0x1a	; 26
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	06 2e       	mov	r0, r22
 46e:	02 c0       	rjmp	.+4      	; 0x474 <dio_vidEnablePullUp+0x20>
 470:	95 95       	asr	r25
 472:	87 95       	ror	r24
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <dio_vidEnablePullUp+0x1c>
 478:	80 fd       	sbrc	r24, 0
 47a:	51 c0       	rjmp	.+162    	; 0x51e <dio_vidEnablePullUp+0xca>
		{
			SET_BIT(DIO_PORTA_REG,channel);
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	ac 01       	movw	r20, r24
 484:	02 c0       	rjmp	.+4      	; 0x48a <dio_vidEnablePullUp+0x36>
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <dio_vidEnablePullUp+0x32>
 48e:	ba 01       	movw	r22, r20
 490:	62 2b       	or	r22, r18
 492:	6b bb       	out	0x1b, r22	; 27
 494:	08 95       	ret
		}
		break;
		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 496:	87 b3       	in	r24, 0x17	; 23
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	06 2e       	mov	r0, r22
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <dio_vidEnablePullUp+0x4e>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <dio_vidEnablePullUp+0x4a>
 4a6:	80 fd       	sbrc	r24, 0
 4a8:	3a c0       	rjmp	.+116    	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 4aa:	28 b3       	in	r18, 0x18	; 24
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	ac 01       	movw	r20, r24
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <dio_vidEnablePullUp+0x64>
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <dio_vidEnablePullUp+0x60>
 4bc:	ba 01       	movw	r22, r20
 4be:	62 2b       	or	r22, r18
 4c0:	68 bb       	out	0x18, r22	; 24
 4c2:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 4c4:	84 b3       	in	r24, 0x14	; 20
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	06 2e       	mov	r0, r22
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <dio_vidEnablePullUp+0x7c>
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <dio_vidEnablePullUp+0x78>
 4d4:	80 fd       	sbrc	r24, 0
 4d6:	23 c0       	rjmp	.+70     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	ac 01       	movw	r20, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <dio_vidEnablePullUp+0x92>
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <dio_vidEnablePullUp+0x8e>
 4ea:	ba 01       	movw	r22, r20
 4ec:	62 2b       	or	r22, r18
 4ee:	65 bb       	out	0x15, r22	; 21
 4f0:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 4f2:	81 b3       	in	r24, 0x11	; 17
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	06 2e       	mov	r0, r22
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <dio_vidEnablePullUp+0xaa>
 4fa:	95 95       	asr	r25
 4fc:	87 95       	ror	r24
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <dio_vidEnablePullUp+0xa6>
 502:	80 fd       	sbrc	r24, 0
 504:	0c c0       	rjmp	.+24     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 506:	22 b3       	in	r18, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	ac 01       	movw	r20, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <dio_vidEnablePullUp+0xc0>
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <dio_vidEnablePullUp+0xbc>
 518:	ba 01       	movw	r22, r20
 51a:	62 2b       	or	r22, r18
 51c:	62 bb       	out	0x12, r22	; 18
 51e:	08 95       	ret

00000520 <main>:
#include "CPU_Configuration.h"
#include "DIO_Interface.h"
#include "SPI_Interface.h"

int main(void)
{
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	27 97       	sbiw	r28, 0x07	; 7
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
	Master_Config Master_Obj={ SPI_INTERRUPT_DISABLE,SPI_LSB,SPI_RISING_LEADING,SPI_SAMPLE_LEADING,SPI_PRESCALER_128};
 534:	de 01       	movw	r26, r28
 536:	11 96       	adiw	r26, 0x01	; 1
 538:	e0 e6       	ldi	r30, 0x60	; 96
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	01 90       	ld	r0, Z+
 540:	0d 92       	st	X+, r0
 542:	81 50       	subi	r24, 0x01	; 1
 544:	e1 f7       	brne	.-8      	; 0x53e <main+0x1e>
	volatile u8 u8Copy_data=0x55;
 546:	85 e5       	ldi	r24, 0x55	; 85
 548:	8e 83       	std	Y+6, r24	; 0x06
	volatile u8  Ptr_Received=0;
 54a:	1f 82       	std	Y+7, r1	; 0x07
	
	SPI_Init_Master(&Master_Obj);
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	0e 94 f6 02 	call	0x5ec	; 0x5ec <SPI_Init_Master>
	dio_vidConfigChannel(DIO_PORTC,DIO_PIN1,OUTPUT);
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	
    while(1)
    {
		SPI_Send_Receive_Synch_Byte(u8Copy_data,&Ptr_Received);
 55e:	8e 81       	ldd	r24, Y+6	; 0x06
 560:	be 01       	movw	r22, r28
 562:	69 5f       	subi	r22, 0xF9	; 249
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	0e 94 60 03 	call	0x6c0	; 0x6c0 <SPI_Send_Receive_Synch_Byte>
		
		if( Ptr_Received == 0xFF )
 56a:	8f 81       	ldd	r24, Y+7	; 0x07
 56c:	8f 3f       	cpi	r24, 0xFF	; 255
 56e:	69 f4       	brne	.+26     	; 0x58a <main+0x6a>
		{
			dio_vidFlipChannel(DIO_PORTC,DIO_PIN1);
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	0e 94 ba 01 	call	0x374	; 0x374 <dio_vidFlipChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	99 e6       	ldi	r25, 0x69	; 105
 57c:	a8 e1       	ldi	r26, 0x18	; 24
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	90 40       	sbci	r25, 0x00	; 0
 582:	a0 40       	sbci	r26, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x5e>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x68>
 588:	00 00       	nop
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	99 e6       	ldi	r25, 0x69	; 105
 58e:	a8 e1       	ldi	r26, 0x18	; 24
 590:	81 50       	subi	r24, 0x01	; 1
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	a0 40       	sbci	r26, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <main+0x70>
 598:	00 c0       	rjmp	.+0      	; 0x59a <main+0x7a>
 59a:	00 00       	nop
 59c:	e0 cf       	rjmp	.-64     	; 0x55e <main+0x3e>

0000059e <__vector_12>:
 */


#include "SPI_Interface.h"

ISR(VECTOR(12)) {
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	2f 93       	push	r18
 5aa:	3f 93       	push	r19
 5ac:	4f 93       	push	r20
 5ae:	5f 93       	push	r21
 5b0:	6f 93       	push	r22
 5b2:	7f 93       	push	r23
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	af 93       	push	r26
 5ba:	bf 93       	push	r27
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
	ptr_func();
 5c0:	e0 91 66 00 	lds	r30, 0x0066
 5c4:	f0 91 67 00 	lds	r31, 0x0067
 5c8:	09 95       	icall
}
 5ca:	ff 91       	pop	r31
 5cc:	ef 91       	pop	r30
 5ce:	bf 91       	pop	r27
 5d0:	af 91       	pop	r26
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	7f 91       	pop	r23
 5d8:	6f 91       	pop	r22
 5da:	5f 91       	pop	r21
 5dc:	4f 91       	pop	r20
 5de:	3f 91       	pop	r19
 5e0:	2f 91       	pop	r18
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <SPI_Init_Master>:

void SPI_Init_Master(Master_Config *My_Config) {
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	66 e0       	ldi	r22, 0x06	; 6
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	65 e0       	ldi	r22, 0x05	; 5
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	67 e0       	ldi	r22, 0x07	; 7
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	64 e0       	ldi	r22, 0x04	; 4
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>

	SPCR |= (1 << SPE)
 61a:	4d b1       	in	r20, 0x0d	; 13
 61c:	40 65       	ori	r20, 0x50	; 80
 61e:	8c 81       	ldd	r24, Y+4	; 0x04
 620:	83 70       	andi	r24, 0x03	; 3
 622:	48 2b       	or	r20, r24
			| (My_Config->Int_Enable << SPIE)
 624:	38 81       	ld	r19, Y
 626:	37 95       	ror	r19
 628:	33 27       	eor	r19, r19
 62a:	37 95       	ror	r19
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 62c:	34 2b       	or	r19, r20
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
 62e:	29 81       	ldd	r18, Y+1	; 0x01
 630:	22 95       	swap	r18
 632:	22 0f       	add	r18, r18
 634:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 636:	23 2b       	or	r18, r19
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 638:	9a 81       	ldd	r25, Y+2	; 0x02
 63a:	99 0f       	add	r25, r25
 63c:	99 0f       	add	r25, r25
 63e:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 640:	92 2b       	or	r25, r18
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	88 0f       	add	r24, r24
 646:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 648:	89 2b       	or	r24, r25
 64a:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
			| (My_Config->Prescaler & 0x3);

	SPSR |= (My_Config->Prescaler >> 2);
 64c:	9e b1       	in	r25, 0x0e	; 14
 64e:	8c 81       	ldd	r24, Y+4	; 0x04
 650:	86 95       	lsr	r24
 652:	86 95       	lsr	r24
 654:	89 2b       	or	r24, r25
 656:	8e b9       	out	0x0e, r24	; 14
}
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <SPI_Init_Slave>:

void SPI_Init_Slave(Slave_Config *My_Config) {
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, OUTPUT);
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	66 e0       	ldi	r22, 0x06	; 6
 668:	41 e0       	ldi	r20, 0x01	; 1
 66a:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	65 e0       	ldi	r22, 0x05	; 5
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	67 e0       	ldi	r22, 0x07	; 7
 67c:	40 e0       	ldi	r20, 0x00	; 0
 67e:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	64 e0       	ldi	r22, 0x04	; 4
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>

	SPCR = 0;
 68c:	1d b8       	out	0x0d, r1	; 13
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 68e:	4d b1       	in	r20, 0x0d	; 13
 690:	40 64       	ori	r20, 0x40	; 64
 692:	38 81       	ld	r19, Y
 694:	37 95       	ror	r19
 696:	33 27       	eor	r19, r19
 698:	37 95       	ror	r19
 69a:	34 2b       	or	r19, r20
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 69c:	29 81       	ldd	r18, Y+1	; 0x01
 69e:	22 95       	swap	r18
 6a0:	22 0f       	add	r18, r18
 6a2:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 6a4:	23 2b       	or	r18, r19
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 6a8:	99 0f       	add	r25, r25
 6aa:	99 0f       	add	r25, r25
 6ac:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 6ae:	92 2b       	or	r25, r18
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	88 0f       	add	r24, r24
 6b4:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 6b6:	89 2b       	or	r24, r25
 6b8:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <SPI_Send_Receive_Synch_Byte>:

void SPI_Send_Receive_Synch_Byte(u8 byte, u8 *received) {
	SPDR = byte;
 6c0:	8f b9       	out	0x0f, r24	; 15

	while (!CHECK_BIT(SPSR, SPIF));
 6c2:	77 9b       	sbis	0x0e, 7	; 14
 6c4:	fe cf       	rjmp	.-4      	; 0x6c2 <SPI_Send_Receive_Synch_Byte+0x2>
	*received = SPDR;
 6c6:	8f b1       	in	r24, 0x0f	; 15
 6c8:	fb 01       	movw	r30, r22
 6ca:	80 83       	st	Z, r24
}
 6cc:	08 95       	ret

000006ce <SPI_Send_ASynch_Byte>:

void SPI_Send_ASynch_Byte(u8 byte) {
	SPDR = byte;
 6ce:	8f b9       	out	0x0f, r24	; 15

	while (!CHECK_BIT(SPSR, SPIF));
 6d0:	77 9b       	sbis	0x0e, 7	; 14
 6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <SPI_Send_ASynch_Byte+0x2>
}
 6d4:	08 95       	ret

000006d6 <SPI_Read_Data>:

void SPI_Read_Data(u8 *var) {
	*var = SPDR;
 6d6:	2f b1       	in	r18, 0x0f	; 15
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18
}
 6dc:	08 95       	ret

000006de <SPI_Set_CallBack>:

void SPI_Set_CallBack(void (*func)(void)) {
	ptr_func = func;
 6de:	90 93 67 00 	sts	0x0067, r25
 6e2:	80 93 66 00 	sts	0x0066, r24
}
 6e6:	08 95       	ret

000006e8 <Global_Interrupt_Enable>:

void Global_Interrupt_Enable() {
	SREG |= (1 << 7);
 6e8:	8f b7       	in	r24, 0x3f	; 63
 6ea:	80 68       	ori	r24, 0x80	; 128
 6ec:	8f bf       	out	0x3f, r24	; 63
}
 6ee:	08 95       	ret

000006f0 <Master_Send>:
void Master_Send(u8 data){
	SPI_Send_ASynch_Byte(data);
 6f0:	0e 94 67 03 	call	0x6ce	; 0x6ce <SPI_Send_ASynch_Byte>
}
 6f4:	08 95       	ret

000006f6 <Master_Receive>:

u8 Master_Receive(){
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	0f 92       	push	r0
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
	u8 received=0;
 700:	19 82       	std	Y+1, r1	; 0x01
	SPI_Send_Receive_Synch_Byte(DUMMY_DATA,&received);
 702:	8e ef       	ldi	r24, 0xFE	; 254
 704:	be 01       	movw	r22, r28
 706:	6f 5f       	subi	r22, 0xFF	; 255
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <SPI_Send_Receive_Synch_Byte>
	return received;
}
 70e:	89 81       	ldd	r24, Y+1	; 0x01
 710:	0f 90       	pop	r0
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	08 95       	ret

00000718 <_exit>:
 718:	f8 94       	cli

0000071a <__stop_program>:
 71a:	ff cf       	rjmp	.-2      	; 0x71a <__stop_program>
