
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000596  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000596  0000062a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000062a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc3  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000415  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b4  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000606  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	09 c2       	rjmp	.+1042   	; 0x42c <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b5 d1       	rcall	.+874    	; 0x3c4 <main>
  5a:	9b c2       	rjmp	.+1334   	; 0x592 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  5e:	82 30       	cpi	r24, 0x02	; 2
  60:	19 f1       	breq	.+70     	; 0xa8 <dio_vidConfigChannel+0x4a>
  62:	83 30       	cpi	r24, 0x03	; 3
  64:	09 f4       	brne	.+2      	; 0x68 <dio_vidConfigChannel+0xa>
  66:	3d c0       	rjmp	.+122    	; 0xe2 <dio_vidConfigChannel+0x84>
  68:	81 30       	cpi	r24, 0x01	; 1
  6a:	09 f0       	breq	.+2      	; 0x6e <dio_vidConfigChannel+0x10>
  6c:	56 c0       	rjmp	.+172    	; 0x11a <dio_vidConfigChannel+0xbc>
	{
	case DIO_PORTB:
		if (direction == OUTPUT)
  6e:	41 30       	cpi	r20, 0x01	; 1
  70:	69 f4       	brne	.+26     	; 0x8c <dio_vidConfigChannel+0x2e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  72:	27 b3       	in	r18, 0x17	; 23
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	ac 01       	movw	r20, r24
  7a:	02 c0       	rjmp	.+4      	; 0x80 <dio_vidConfigChannel+0x22>
  7c:	44 0f       	add	r20, r20
  7e:	55 1f       	adc	r21, r21
  80:	6a 95       	dec	r22
  82:	e2 f7       	brpl	.-8      	; 0x7c <dio_vidConfigChannel+0x1e>
  84:	ba 01       	movw	r22, r20
  86:	62 2b       	or	r22, r18
  88:	67 bb       	out	0x17, r22	; 23
  8a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
  8c:	27 b3       	in	r18, 0x17	; 23
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	ac 01       	movw	r20, r24
  94:	02 c0       	rjmp	.+4      	; 0x9a <dio_vidConfigChannel+0x3c>
  96:	44 0f       	add	r20, r20
  98:	55 1f       	adc	r21, r21
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <dio_vidConfigChannel+0x38>
  9e:	ba 01       	movw	r22, r20
  a0:	60 95       	com	r22
  a2:	62 23       	and	r22, r18
  a4:	67 bb       	out	0x17, r22	; 23
  a6:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <dio_vidConfigChannel+0x68>
		{
			SET_BIT (DIO_DDRC_REG,channel);
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x5c>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x58>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	64 bb       	out	0x14, r22	; 20
  c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
  c6:	24 b3       	in	r18, 0x14	; 20
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x76>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x72>
  d8:	ba 01       	movw	r22, r20
  da:	60 95       	com	r22
  dc:	62 23       	and	r22, r18
  de:	64 bb       	out	0x14, r22	; 20
  e0:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <dio_vidConfigChannel+0xa2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
  e6:	21 b3       	in	r18, 0x11	; 17
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dio_vidConfigChannel+0x96>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <dio_vidConfigChannel+0x92>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	61 bb       	out	0x11, r22	; 17
  fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 100:	21 b3       	in	r18, 0x11	; 17
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <dio_vidConfigChannel+0xb0>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <dio_vidConfigChannel+0xac>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	61 bb       	out	0x11, r22	; 17
 11a:	08 95       	ret

0000011c <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	31 f0       	breq	.+12     	; 0x12c <dio_vidConfigPort+0x10>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	31 f0       	breq	.+12     	; 0x130 <dio_vidConfigPort+0x14>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	29 f4       	brne	.+10     	; 0x132 <dio_vidConfigPort+0x16>
	{
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 128:	67 bb       	out	0x17, r22	; 23
 12a:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 12c:	64 bb       	out	0x14, r22	; 20
 12e:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 130:	61 bb       	out	0x11, r22	; 17
 132:	08 95       	ret

00000134 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	31 f0       	breq	.+12     	; 0x144 <dio_vidSetPortValue+0x10>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	31 f0       	breq	.+12     	; 0x148 <dio_vidSetPortValue+0x14>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	29 f4       	brne	.+10     	; 0x14a <dio_vidSetPortValue+0x16>
	{
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 140:	68 bb       	out	0x18, r22	; 24
 142:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 144:	65 bb       	out	0x15, r22	; 21
 146:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 148:	62 bb       	out	0x12, r22	; 18
 14a:	08 95       	ret

0000014c <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	19 f1       	breq	.+70     	; 0x196 <dio_vidWriteChannel+0x4a>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	09 f4       	brne	.+2      	; 0x156 <dio_vidWriteChannel+0xa>
 154:	3d c0       	rjmp	.+122    	; 0x1d0 <dio_vidWriteChannel+0x84>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <dio_vidWriteChannel+0x10>
 15a:	56 c0       	rjmp	.+172    	; 0x208 <dio_vidWriteChannel+0xbc>
	{
	case DIO_PORTB:
		if (level == STD_LOW)
 15c:	44 23       	and	r20, r20
 15e:	71 f4       	brne	.+28     	; 0x17c <dio_vidWriteChannel+0x30>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 160:	28 b3       	in	r18, 0x18	; 24
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	ac 01       	movw	r20, r24
 168:	02 c0       	rjmp	.+4      	; 0x16e <dio_vidWriteChannel+0x22>
 16a:	44 0f       	add	r20, r20
 16c:	55 1f       	adc	r21, r21
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <dio_vidWriteChannel+0x1e>
 172:	ba 01       	movw	r22, r20
 174:	60 95       	com	r22
 176:	62 23       	and	r22, r18
 178:	68 bb       	out	0x18, r22	; 24
 17a:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 17c:	28 b3       	in	r18, 0x18	; 24
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <dio_vidWriteChannel+0x3e>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <dio_vidWriteChannel+0x3a>
 18e:	ba 01       	movw	r22, r20
 190:	62 2b       	or	r22, r18
 192:	68 bb       	out	0x18, r22	; 24
 194:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 196:	44 23       	and	r20, r20
 198:	71 f4       	brne	.+28     	; 0x1b6 <dio_vidWriteChannel+0x6a>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	ac 01       	movw	r20, r24
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <dio_vidWriteChannel+0x5c>
 1a4:	44 0f       	add	r20, r20
 1a6:	55 1f       	adc	r21, r21
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <dio_vidWriteChannel+0x58>
 1ac:	ba 01       	movw	r22, r20
 1ae:	60 95       	com	r22
 1b0:	62 23       	and	r22, r18
 1b2:	65 bb       	out	0x15, r22	; 21
 1b4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 1b6:	25 b3       	in	r18, 0x15	; 21
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	ac 01       	movw	r20, r24
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <dio_vidWriteChannel+0x78>
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <dio_vidWriteChannel+0x74>
 1c8:	ba 01       	movw	r22, r20
 1ca:	62 2b       	or	r22, r18
 1cc:	65 bb       	out	0x15, r22	; 21
 1ce:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 1d0:	44 23       	and	r20, r20
 1d2:	71 f4       	brne	.+28     	; 0x1f0 <dio_vidWriteChannel+0xa4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 1d4:	22 b3       	in	r18, 0x12	; 18
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <dio_vidWriteChannel+0x96>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <dio_vidWriteChannel+0x92>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	62 bb       	out	0x12, r22	; 18
 1ee:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 1f0:	22 b3       	in	r18, 0x12	; 18
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <dio_vidWriteChannel+0xb2>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <dio_vidWriteChannel+0xae>
 202:	ba 01       	movw	r22, r20
 204:	62 2b       	or	r22, r18
 206:	62 bb       	out	0x12, r22	; 18
 208:	08 95       	ret

0000020a <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	a1 f0       	breq	.+40     	; 0x236 <dio_vidWriteChannelGroup+0x2c>
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	09 f1       	breq	.+66     	; 0x254 <dio_vidWriteChannelGroup+0x4a>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	71 f5       	brne	.+92     	; 0x272 <dio_vidWriteChannelGroup+0x68>
	{
		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 216:	88 b3       	in	r24, 0x18	; 24
 218:	94 2f       	mov	r25, r20
 21a:	90 95       	com	r25
 21c:	89 23       	and	r24, r25
 21e:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 220:	e6 2f       	mov	r30, r22
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	bf 01       	movw	r22, r30
 226:	02 c0       	rjmp	.+4      	; 0x22c <dio_vidWriteChannelGroup+0x22>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	2a 95       	dec	r18
 22e:	e2 f7       	brpl	.-8      	; 0x228 <dio_vidWriteChannelGroup+0x1e>
 230:	64 23       	and	r22, r20
 232:	68 bb       	out	0x18, r22	; 24
		break;
 234:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 236:	85 b3       	in	r24, 0x15	; 21
 238:	94 2f       	mov	r25, r20
 23a:	90 95       	com	r25
 23c:	89 23       	and	r24, r25
 23e:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	cb 01       	movw	r24, r22
 244:	02 c0       	rjmp	.+4      	; 0x24a <dio_vidWriteChannelGroup+0x40>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	2a 95       	dec	r18
 24c:	e2 f7       	brpl	.-8      	; 0x246 <dio_vidWriteChannelGroup+0x3c>
 24e:	84 23       	and	r24, r20
 250:	85 bb       	out	0x15, r24	; 21
		break;
 252:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 254:	82 b3       	in	r24, 0x12	; 18
 256:	94 2f       	mov	r25, r20
 258:	90 95       	com	r25
 25a:	89 23       	and	r24, r25
 25c:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	cb 01       	movw	r24, r22
 262:	02 c0       	rjmp	.+4      	; 0x268 <dio_vidWriteChannelGroup+0x5e>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <dio_vidWriteChannelGroup+0x5a>
 26c:	9c 01       	movw	r18, r24
 26e:	24 23       	and	r18, r20
 270:	22 bb       	out	0x12, r18	; 18
 272:	08 95       	ret

00000274 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 274:	68 23       	and	r22, r24
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	cb 01       	movw	r24, r22
 27a:	02 c0       	rjmp	.+4      	; 0x280 <dio_vidReadChannelGroup+0xc>
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	4a 95       	dec	r20
 282:	e2 f7       	brpl	.-8      	; 0x27c <dio_vidReadChannelGroup+0x8>
}
 284:	08 95       	ret

00000286 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	89 f0       	breq	.+34     	; 0x2ac <dio_vidFlipChannel+0x26>
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	e1 f0       	breq	.+56     	; 0x2c6 <dio_vidFlipChannel+0x40>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	31 f5       	brne	.+76     	; 0x2de <dio_vidFlipChannel+0x58>
	{
	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 292:	28 b3       	in	r18, 0x18	; 24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	ac 01       	movw	r20, r24
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <dio_vidFlipChannel+0x1a>
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <dio_vidFlipChannel+0x16>
 2a4:	ba 01       	movw	r22, r20
 2a6:	62 27       	eor	r22, r18
 2a8:	68 bb       	out	0x18, r22	; 24
		break;
 2aa:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 2ac:	25 b3       	in	r18, 0x15	; 21
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	ac 01       	movw	r20, r24
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <dio_vidFlipChannel+0x34>
 2b6:	44 0f       	add	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <dio_vidFlipChannel+0x30>
 2be:	ba 01       	movw	r22, r20
 2c0:	62 27       	eor	r22, r18
 2c2:	65 bb       	out	0x15, r22	; 21
		break;
 2c4:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <dio_vidFlipChannel+0x4e>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <dio_vidFlipChannel+0x4a>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 27       	eor	r22, r18
 2dc:	62 bb       	out	0x12, r22	; 18
 2de:	08 95       	ret

000002e0 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	71 f0       	breq	.+28     	; 0x300 <dio_dioLevelReadChannel+0x20>
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	b1 f0       	breq	.+44     	; 0x314 <dio_dioLevelReadChannel+0x34>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	f1 f4       	brne	.+60     	; 0x328 <dio_dioLevelReadChannel+0x48>
	{
	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 2ec:	26 b3       	in	r18, 0x16	; 22
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	c9 01       	movw	r24, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <dio_dioLevelReadChannel+0x18>
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <dio_dioLevelReadChannel+0x14>
 2fc:	81 70       	andi	r24, 0x01	; 1
		break;
 2fe:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 300:	23 b3       	in	r18, 0x13	; 19
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	c9 01       	movw	r24, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <dio_dioLevelReadChannel+0x2c>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <dio_dioLevelReadChannel+0x28>
 310:	81 70       	andi	r24, 0x01	; 1
		break;
 312:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 314:	20 b3       	in	r18, 0x10	; 16
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	c9 01       	movw	r24, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <dio_dioLevelReadChannel+0x40>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <dio_dioLevelReadChannel+0x3c>
 324:	81 70       	andi	r24, 0x01	; 1
		break;
 326:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 328:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 32a:	08 95       	ret

0000032c <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	e1 f0       	breq	.+56     	; 0x368 <dio_vidEnablePullUp+0x3c>
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	89 f1       	breq	.+98     	; 0x396 <dio_vidEnablePullUp+0x6a>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	09 f0       	breq	.+2      	; 0x33a <dio_vidEnablePullUp+0xe>
 338:	44 c0       	rjmp	.+136    	; 0x3c2 <dio_vidEnablePullUp+0x96>
	{
		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 33a:	87 b3       	in	r24, 0x17	; 23
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	06 2e       	mov	r0, r22
 340:	02 c0       	rjmp	.+4      	; 0x346 <dio_vidEnablePullUp+0x1a>
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <dio_vidEnablePullUp+0x16>
 34a:	80 fd       	sbrc	r24, 0
 34c:	3a c0       	rjmp	.+116    	; 0x3c2 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 34e:	28 b3       	in	r18, 0x18	; 24
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac 01       	movw	r20, r24
 356:	02 c0       	rjmp	.+4      	; 0x35c <dio_vidEnablePullUp+0x30>
 358:	44 0f       	add	r20, r20
 35a:	55 1f       	adc	r21, r21
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <dio_vidEnablePullUp+0x2c>
 360:	ba 01       	movw	r22, r20
 362:	62 2b       	or	r22, r18
 364:	68 bb       	out	0x18, r22	; 24
 366:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 368:	84 b3       	in	r24, 0x14	; 20
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	06 2e       	mov	r0, r22
 36e:	02 c0       	rjmp	.+4      	; 0x374 <dio_vidEnablePullUp+0x48>
 370:	95 95       	asr	r25
 372:	87 95       	ror	r24
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <dio_vidEnablePullUp+0x44>
 378:	80 fd       	sbrc	r24, 0
 37a:	23 c0       	rjmp	.+70     	; 0x3c2 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 37c:	25 b3       	in	r18, 0x15	; 21
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	ac 01       	movw	r20, r24
 384:	02 c0       	rjmp	.+4      	; 0x38a <dio_vidEnablePullUp+0x5e>
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <dio_vidEnablePullUp+0x5a>
 38e:	ba 01       	movw	r22, r20
 390:	62 2b       	or	r22, r18
 392:	65 bb       	out	0x15, r22	; 21
 394:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 396:	81 b3       	in	r24, 0x11	; 17
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	06 2e       	mov	r0, r22
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <dio_vidEnablePullUp+0x76>
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <dio_vidEnablePullUp+0x72>
 3a6:	80 fd       	sbrc	r24, 0
 3a8:	0c c0       	rjmp	.+24     	; 0x3c2 <dio_vidEnablePullUp+0x96>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 3aa:	22 b3       	in	r18, 0x12	; 18
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	ac 01       	movw	r20, r24
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <dio_vidEnablePullUp+0x8c>
 3b4:	44 0f       	add	r20, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <dio_vidEnablePullUp+0x88>
 3bc:	ba 01       	movw	r22, r20
 3be:	62 2b       	or	r22, r18
 3c0:	62 bb       	out	0x12, r22	; 18
 3c2:	08 95       	ret

000003c4 <main>:

#include "dio.h"
#include "SPI_Interface.h"

int main(void)
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x6>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <main+0x8>
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <main+0xa>
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	Slave_Config Slave_Obj={ SPI_INTERRUPT_DISABLE,SPI_LSB,SPI_RISING_LEADING,SPI_SAMPLE_LEADING};
 3d2:	19 82       	std	Y+1, r1	; 0x01
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	8a 83       	std	Y+2, r24	; 0x02
 3d8:	1b 82       	std	Y+3, r1	; 0x03
 3da:	1c 82       	std	Y+4, r1	; 0x04
	volatile u8 u8Copy_data=0xFF;
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	8d 83       	std	Y+5, r24	; 0x05
	volatile u8  Ptr_Received=0;
 3e0:	1e 82       	std	Y+6, r1	; 0x06
	
	SPI_Init_Slave(&Slave_Obj);
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	7e d0       	rcall	.+252    	; 0x4e4 <SPI_Init_Slave>
	
	dio_vidConfigChannel(DIO_PORTB,DIO_PIN0, OUTPUT);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	37 de       	rcall	.-914    	; 0x5e <dio_vidConfigChannel>
	
	while(1)
	{		
 		SPI_Send_Receive_Synch_Byte(u8Copy_data,&Ptr_Received);
 3f0:	8d 81       	ldd	r24, Y+5	; 0x05
 3f2:	be 01       	movw	r22, r28
 3f4:	6a 5f       	subi	r22, 0xFA	; 250
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	a2 d0       	rcall	.+324    	; 0x53e <SPI_Send_Receive_Synch_Byte>
 		if( Ptr_Received == 0x55 )
 3fa:	8e 81       	ldd	r24, Y+6	; 0x06
 3fc:	85 35       	cpi	r24, 0x55	; 85
 3fe:	61 f4       	brne	.+24     	; 0x418 <main+0x54>
 		{
	 		dio_vidFlipChannel(DIO_PORTB,DIO_PIN0);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	40 df       	rcall	.-384    	; 0x286 <dio_vidFlipChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 406:	8f e9       	ldi	r24, 0x9F	; 159
 408:	96 e8       	ldi	r25, 0x86	; 134
 40a:	a1 e0       	ldi	r26, 0x01	; 1
 40c:	81 50       	subi	r24, 0x01	; 1
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	a0 40       	sbci	r26, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <main+0x48>
 414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x52>
 416:	00 00       	nop
 418:	8f e9       	ldi	r24, 0x9F	; 159
 41a:	96 e8       	ldi	r25, 0x86	; 134
 41c:	a1 e0       	ldi	r26, 0x01	; 1
 41e:	81 50       	subi	r24, 0x01	; 1
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	a0 40       	sbci	r26, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <main+0x5a>
 426:	00 c0       	rjmp	.+0      	; 0x428 <main+0x64>
 428:	00 00       	nop
 42a:	e2 cf       	rjmp	.-60     	; 0x3f0 <main+0x2c>

0000042c <__vector_12>:
 */


#include "SPI_Interface.h"

ISR(VECTOR(12)) {
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
	ptr_func();
 44e:	e0 91 60 00 	lds	r30, 0x0060
 452:	f0 91 61 00 	lds	r31, 0x0061
 456:	09 95       	icall
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <SPI_Init_Master>:

void SPI_Init_Master(Master_Config *My_Config) {
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	66 e0       	ldi	r22, 0x06	; 6
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	eb dd       	rcall	.-1066   	; 0x5e <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	65 e0       	ldi	r22, 0x05	; 5
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	e7 dd       	rcall	.-1074   	; 0x5e <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	67 e0       	ldi	r22, 0x07	; 7
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	e3 dd       	rcall	.-1082   	; 0x5e <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	64 e0       	ldi	r22, 0x04	; 4
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	df dd       	rcall	.-1090   	; 0x5e <dio_vidConfigChannel>

	SPCR |= (1 << SPE)
 4a0:	4d b1       	in	r20, 0x0d	; 13
 4a2:	40 65       	ori	r20, 0x50	; 80
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	83 70       	andi	r24, 0x03	; 3
 4a8:	48 2b       	or	r20, r24
			| (My_Config->Int_Enable << SPIE)
 4aa:	38 81       	ld	r19, Y
 4ac:	37 95       	ror	r19
 4ae:	33 27       	eor	r19, r19
 4b0:	37 95       	ror	r19
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 4b2:	34 2b       	or	r19, r20
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
 4b4:	29 81       	ldd	r18, Y+1	; 0x01
 4b6:	22 95       	swap	r18
 4b8:	22 0f       	add	r18, r18
 4ba:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 4bc:	23 2b       	or	r18, r19
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 4be:	9a 81       	ldd	r25, Y+2	; 0x02
 4c0:	99 0f       	add	r25, r25
 4c2:	99 0f       	add	r25, r25
 4c4:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 4c6:	92 2b       	or	r25, r18
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	88 0f       	add	r24, r24
 4cc:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, INPUT);
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, OUTPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, OUTPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, OUTPUT);

	SPCR |= (1 << SPE)
 4ce:	89 2b       	or	r24, r25
 4d0:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
			| (My_Config->Prescaler & 0x3);

	SPSR |= (My_Config->Prescaler >> 2);
 4d2:	9e b1       	in	r25, 0x0e	; 14
 4d4:	8c 81       	ldd	r24, Y+4	; 0x04
 4d6:	86 95       	lsr	r24
 4d8:	86 95       	lsr	r24
 4da:	89 2b       	or	r24, r25
 4dc:	8e b9       	out	0x0e, r24	; 14
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <SPI_Init_Slave>:

void SPI_Init_Slave(Slave_Config *My_Config) {
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
	dio_vidConfigChannel(MISO_PORT, MISO_PIN, OUTPUT);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	66 e0       	ldi	r22, 0x06	; 6
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	b6 dd       	rcall	.-1172   	; 0x5e <dio_vidConfigChannel>
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	65 e0       	ldi	r22, 0x05	; 5
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	b2 dd       	rcall	.-1180   	; 0x5e <dio_vidConfigChannel>
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	67 e0       	ldi	r22, 0x07	; 7
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	ae dd       	rcall	.-1188   	; 0x5e <dio_vidConfigChannel>
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	aa dd       	rcall	.-1196   	; 0x5e <dio_vidConfigChannel>

	SPCR = 0;
 50a:	1d b8       	out	0x0d, r1	; 13
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 50c:	4d b1       	in	r20, 0x0d	; 13
 50e:	40 64       	ori	r20, 0x40	; 64
 510:	38 81       	ld	r19, Y
 512:	37 95       	ror	r19
 514:	33 27       	eor	r19, r19
 516:	37 95       	ror	r19
 518:	34 2b       	or	r19, r20
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 51a:	29 81       	ldd	r18, Y+1	; 0x01
 51c:	22 95       	swap	r18
 51e:	22 0f       	add	r18, r18
 520:	20 7e       	andi	r18, 0xE0	; 224
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 522:	23 2b       	or	r18, r19
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
 524:	9a 81       	ldd	r25, Y+2	; 0x02
 526:	99 0f       	add	r25, r25
 528:	99 0f       	add	r25, r25
 52a:	99 0f       	add	r25, r25
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 52c:	92 2b       	or	r25, r18
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	88 0f       	add	r24, r24
 532:	88 0f       	add	r24, r24
	dio_vidConfigChannel(MOSI_PORT, MOSI_PIN, INPUT);
	dio_vidConfigChannel(CLOCK_PORT, CLOCK_PIN, INPUT);
	dio_vidConfigChannel(SS_PORT, SS_PIN, INPUT);

	SPCR = 0;
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
 534:	89 2b       	or	r24, r25
 536:	8d b9       	out	0x0d, r24	; 13
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <SPI_Send_Receive_Synch_Byte>:

void SPI_Send_Receive_Synch_Byte(u8 byte, u8 *received) {
	SPDR = byte;
 53e:	8f b9       	out	0x0f, r24	; 15

	while (!CHECK_BIT(SPSR, SPIF));
 540:	77 9b       	sbis	0x0e, 7	; 14
 542:	fe cf       	rjmp	.-4      	; 0x540 <SPI_Send_Receive_Synch_Byte+0x2>
	*received = SPDR;
 544:	8f b1       	in	r24, 0x0f	; 15
 546:	fb 01       	movw	r30, r22
 548:	80 83       	st	Z, r24
}
 54a:	08 95       	ret

0000054c <SPI_Send_ASynch_Byte>:

void SPI_Send_ASynch_Byte(u8 byte) {
	SPDR = byte;
 54c:	8f b9       	out	0x0f, r24	; 15

	while (!CHECK_BIT(SPSR, SPIF));
 54e:	77 9b       	sbis	0x0e, 7	; 14
 550:	fe cf       	rjmp	.-4      	; 0x54e <SPI_Send_ASynch_Byte+0x2>
}
 552:	08 95       	ret

00000554 <SPI_Read_Data>:

void SPI_Read_Data(u8 *var) {
	*var = SPDR;
 554:	2f b1       	in	r18, 0x0f	; 15
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
}
 55a:	08 95       	ret

0000055c <SPI_Set_CallBack>:

void SPI_Set_CallBack(void (*func)(void)) {
	ptr_func = func;
 55c:	90 93 61 00 	sts	0x0061, r25
 560:	80 93 60 00 	sts	0x0060, r24
}
 564:	08 95       	ret

00000566 <Global_Interrupt_Enable>:

void Global_Interrupt_Enable() {
	SREG |= (1 << 7);
 566:	8f b7       	in	r24, 0x3f	; 63
 568:	80 68       	ori	r24, 0x80	; 128
 56a:	8f bf       	out	0x3f, r24	; 63
}
 56c:	08 95       	ret

0000056e <Master_Send>:
void Master_Send(u8 data){
	SPI_Send_ASynch_Byte(data);
 56e:	ee df       	rcall	.-36     	; 0x54c <SPI_Send_ASynch_Byte>
}
 570:	08 95       	ret

00000572 <Master_Receive>:

u8 Master_Receive(){
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	0f 92       	push	r0
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	u8 received=0;
 57c:	19 82       	std	Y+1, r1	; 0x01
	SPI_Send_Receive_Synch_Byte(DUMMY_DATA,&received);
 57e:	8e ef       	ldi	r24, 0xFE	; 254
 580:	be 01       	movw	r22, r28
 582:	6f 5f       	subi	r22, 0xFF	; 255
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	db df       	rcall	.-74     	; 0x53e <SPI_Send_Receive_Synch_Byte>
	return received;
}
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	0f 90       	pop	r0
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>
