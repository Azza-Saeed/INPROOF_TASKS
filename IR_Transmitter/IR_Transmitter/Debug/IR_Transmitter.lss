
IR_Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800078  00800078  00000b70  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  000012c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc4  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ae  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060b  00000000  00000000  0000281a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00002e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d7e  00000000  00000000  000037b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_4>
  14:	0c 94 15 03 	jmp	0x62a	; 0x62a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 02 	call	0x520	; 0x520 <main>
  8a:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	31 f1       	breq	.+76     	; 0xe2 <dio_vidConfigChannel+0x50>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	38 f0       	brcs	.+14     	; 0xa8 <dio_vidConfigChannel+0x16>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <dio_vidConfigChannel+0xe>
  9e:	3e c0       	rjmp	.+124    	; 0x11c <dio_vidConfigChannel+0x8a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f0       	breq	.+2      	; 0xa6 <dio_vidConfigChannel+0x14>
  a4:	74 c0       	rjmp	.+232    	; 0x18e <dio_vidConfigChannel+0xfc>
  a6:	57 c0       	rjmp	.+174    	; 0x156 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x28>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x24>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x42>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x3e>
  d8:	ba 01       	movw	r22, r20
  da:	60 95       	com	r22
  dc:	62 23       	and	r22, r18
  de:	6a bb       	out	0x1a, r22	; 26
  e0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dio_vidConfigChannel+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <dio_vidConfigChannel+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	67 bb       	out	0x17, r22	; 23
  fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <dio_vidConfigChannel+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <dio_vidConfigChannel+0x78>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	67 bb       	out	0x17, r22	; 23
 11a:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	ac 01       	movw	r20, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <dio_vidConfigChannel+0x9c>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <dio_vidConfigChannel+0x98>
 132:	ba 01       	movw	r22, r20
 134:	62 2b       	or	r22, r18
 136:	64 bb       	out	0x14, r22	; 20
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <dio_vidConfigChannel+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <dio_vidConfigChannel+0xb2>
 14c:	ba 01       	movw	r22, r20
 14e:	60 95       	com	r22
 150:	62 23       	and	r22, r18
 152:	64 bb       	out	0x14, r22	; 20
 154:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <dio_vidConfigChannel+0xd6>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <dio_vidConfigChannel+0xd2>
 16c:	ba 01       	movw	r22, r20
 16e:	62 2b       	or	r22, r18
 170:	61 bb       	out	0x11, r22	; 17
 172:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <dio_vidConfigChannel+0xf0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <dio_vidConfigChannel+0xec>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	61 bb       	out	0x11, r22	; 17
 18e:	08 95       	ret

00000190 <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	49 f0       	breq	.+18     	; 0x1a6 <dio_vidConfigPort+0x16>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	28 f0       	brcs	.+10     	; 0x1a2 <dio_vidConfigPort+0x12>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	39 f0       	breq	.+14     	; 0x1aa <dio_vidConfigPort+0x1a>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	41 f4       	brne	.+16     	; 0x1b0 <dio_vidConfigPort+0x20>
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <dio_vidConfigPort+0x1e>
	{
		case DIO_PORTA: DIO_DDRA_REG = direction;	break;
 1a2:	6a bb       	out	0x1a, r22	; 26
 1a4:	08 95       	ret
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 1a6:	67 bb       	out	0x17, r22	; 23
 1a8:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 1aa:	64 bb       	out	0x14, r22	; 20
 1ac:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 1ae:	61 bb       	out	0x11, r22	; 17
 1b0:	08 95       	ret

000001b2 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <dio_vidSetPortValue+0x16>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <dio_vidSetPortValue+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	39 f0       	breq	.+14     	; 0x1cc <dio_vidSetPortValue+0x1a>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	41 f4       	brne	.+16     	; 0x1d2 <dio_vidSetPortValue+0x20>
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <dio_vidSetPortValue+0x1e>
	{
		case DIO_PORTA: DIO_PORTA_REG = value;	break;
 1c4:	6b bb       	out	0x1b, r22	; 27
 1c6:	08 95       	ret
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 1c8:	68 bb       	out	0x18, r22	; 24
 1ca:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 1cc:	65 bb       	out	0x15, r22	; 21
 1ce:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 1d0:	62 bb       	out	0x12, r22	; 18
 1d2:	08 95       	ret

000001d4 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f1       	breq	.+76     	; 0x224 <dio_vidWriteChannel+0x50>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	38 f0       	brcs	.+14     	; 0x1ea <dio_vidWriteChannel+0x16>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	09 f4       	brne	.+2      	; 0x1e2 <dio_vidWriteChannel+0xe>
 1e0:	3e c0       	rjmp	.+124    	; 0x25e <dio_vidWriteChannel+0x8a>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <dio_vidWriteChannel+0x14>
 1e6:	74 c0       	rjmp	.+232    	; 0x2d0 <dio_vidWriteChannel+0xfc>
 1e8:	57 c0       	rjmp	.+174    	; 0x298 <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 1ea:	44 23       	and	r20, r20
 1ec:	71 f4       	brne	.+28     	; 0x20a <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	ac 01       	movw	r20, r24
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dio_vidWriteChannel+0x28>
 1f8:	44 0f       	add	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <dio_vidWriteChannel+0x24>
 200:	ba 01       	movw	r22, r20
 202:	60 95       	com	r22
 204:	62 23       	and	r22, r18
 206:	6b bb       	out	0x1b, r22	; 27
 208:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <dio_vidWriteChannel+0x44>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <dio_vidWriteChannel+0x40>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	6b bb       	out	0x1b, r22	; 27
 222:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 224:	44 23       	and	r20, r20
 226:	71 f4       	brne	.+28     	; 0x244 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <dio_vidWriteChannel+0x62>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <dio_vidWriteChannel+0x5e>
 23a:	ba 01       	movw	r22, r20
 23c:	60 95       	com	r22
 23e:	62 23       	and	r22, r18
 240:	68 bb       	out	0x18, r22	; 24
 242:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	ac 01       	movw	r20, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <dio_vidWriteChannel+0x7e>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <dio_vidWriteChannel+0x7a>
 256:	ba 01       	movw	r22, r20
 258:	62 2b       	or	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
 25c:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 25e:	44 23       	and	r20, r20
 260:	71 f4       	brne	.+28     	; 0x27e <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 262:	25 b3       	in	r18, 0x15	; 21
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	ac 01       	movw	r20, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <dio_vidWriteChannel+0x9c>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <dio_vidWriteChannel+0x98>
 274:	ba 01       	movw	r22, r20
 276:	60 95       	com	r22
 278:	62 23       	and	r22, r18
 27a:	65 bb       	out	0x15, r22	; 21
 27c:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_vidWriteChannel+0xb8>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_vidWriteChannel+0xb4>
 290:	ba 01       	movw	r22, r20
 292:	62 2b       	or	r22, r18
 294:	65 bb       	out	0x15, r22	; 21
 296:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 298:	44 23       	and	r20, r20
 29a:	71 f4       	brne	.+28     	; 0x2b8 <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 29c:	22 b3       	in	r18, 0x12	; 18
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <dio_vidWriteChannel+0xd6>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <dio_vidWriteChannel+0xd2>
 2ae:	ba 01       	movw	r22, r20
 2b0:	60 95       	com	r22
 2b2:	62 23       	and	r22, r18
 2b4:	62 bb       	out	0x12, r22	; 18
 2b6:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_vidWriteChannel+0xf2>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_vidWriteChannel+0xee>
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 2b       	or	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret

000002d2 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	c1 f0       	breq	.+48     	; 0x306 <dio_vidWriteChannelGroup+0x34>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	30 f0       	brcs	.+12     	; 0x2e6 <dio_vidWriteChannelGroup+0x14>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	19 f1       	breq	.+70     	; 0x324 <dio_vidWriteChannelGroup+0x52>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <dio_vidWriteChannelGroup+0x12>
 2e2:	3e c0       	rjmp	.+124    	; 0x360 <dio_vidWriteChannelGroup+0x8e>
 2e4:	2e c0       	rjmp	.+92     	; 0x342 <dio_vidWriteChannelGroup+0x70>
	{
		case DIO_PORTA:
			DIO_PORTA_REG &= ~mask;
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	94 2f       	mov	r25, r20
 2ea:	90 95       	com	r25
 2ec:	89 23       	and	r24, r25
 2ee:	8b bb       	out	0x1b, r24	; 27
			DIO_PORTA_REG = (value<<pos) & mask;
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	cb 01       	movw	r24, r22
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <dio_vidWriteChannelGroup+0x28>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	2a 95       	dec	r18
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <dio_vidWriteChannelGroup+0x24>
 2fe:	9c 01       	movw	r18, r24
 300:	24 23       	and	r18, r20
 302:	2b bb       	out	0x1b, r18	; 27
		break;
 304:	08 95       	ret

		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 306:	88 b3       	in	r24, 0x18	; 24
 308:	94 2f       	mov	r25, r20
 30a:	90 95       	com	r25
 30c:	89 23       	and	r24, r25
 30e:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	fb 01       	movw	r30, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <dio_vidWriteChannelGroup+0x48>
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	2a 95       	dec	r18
 31c:	e2 f7       	brpl	.-8      	; 0x316 <dio_vidWriteChannelGroup+0x44>
 31e:	e4 23       	and	r30, r20
 320:	e8 bb       	out	0x18, r30	; 24
		break;
 322:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 324:	85 b3       	in	r24, 0x15	; 21
 326:	94 2f       	mov	r25, r20
 328:	90 95       	com	r25
 32a:	89 23       	and	r24, r25
 32c:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	cb 01       	movw	r24, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <dio_vidWriteChannelGroup+0x66>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	2a 95       	dec	r18
 33a:	e2 f7       	brpl	.-8      	; 0x334 <dio_vidWriteChannelGroup+0x62>
 33c:	84 23       	and	r24, r20
 33e:	85 bb       	out	0x15, r24	; 21
		break;
 340:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 342:	82 b3       	in	r24, 0x12	; 18
 344:	94 2f       	mov	r25, r20
 346:	90 95       	com	r25
 348:	89 23       	and	r24, r25
 34a:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	cb 01       	movw	r24, r22
 350:	02 c0       	rjmp	.+4      	; 0x356 <dio_vidWriteChannelGroup+0x84>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	e2 f7       	brpl	.-8      	; 0x352 <dio_vidWriteChannelGroup+0x80>
 35a:	9c 01       	movw	r18, r24
 35c:	24 23       	and	r18, r20
 35e:	22 bb       	out	0x12, r18	; 18
 360:	08 95       	ret

00000362 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 362:	68 23       	and	r22, r24
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	cb 01       	movw	r24, r22
 368:	02 c0       	rjmp	.+4      	; 0x36e <dio_vidReadChannelGroup+0xc>
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	4a 95       	dec	r20
 370:	e2 f7       	brpl	.-8      	; 0x36a <dio_vidReadChannelGroup+0x8>
}
 372:	08 95       	ret

00000374 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	a1 f0       	breq	.+40     	; 0x3a0 <dio_vidFlipChannel+0x2c>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	28 f0       	brcs	.+10     	; 0x386 <dio_vidFlipChannel+0x12>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	e9 f0       	breq	.+58     	; 0x3ba <dio_vidFlipChannel+0x46>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	a1 f5       	brne	.+104    	; 0x3ec <dio_vidFlipChannel+0x78>
 384:	27 c0       	rjmp	.+78     	; 0x3d4 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 386:	2b b3       	in	r18, 0x1b	; 27
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ac 01       	movw	r20, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <dio_vidFlipChannel+0x20>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <dio_vidFlipChannel+0x1c>
 398:	ba 01       	movw	r22, r20
 39a:	62 27       	eor	r22, r18
 39c:	6b bb       	out	0x1b, r22	; 27
		break;
 39e:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 3a0:	28 b3       	in	r18, 0x18	; 24
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	ac 01       	movw	r20, r24
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <dio_vidFlipChannel+0x3a>
 3aa:	44 0f       	add	r20, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <dio_vidFlipChannel+0x36>
 3b2:	ba 01       	movw	r22, r20
 3b4:	62 27       	eor	r22, r18
 3b6:	68 bb       	out	0x18, r22	; 24
		break;
 3b8:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 3ba:	25 b3       	in	r18, 0x15	; 21
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	ac 01       	movw	r20, r24
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <dio_vidFlipChannel+0x54>
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <dio_vidFlipChannel+0x50>
 3cc:	ba 01       	movw	r22, r20
 3ce:	62 27       	eor	r22, r18
 3d0:	65 bb       	out	0x15, r22	; 21
		break;
 3d2:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	ac 01       	movw	r20, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <dio_vidFlipChannel+0x6e>
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <dio_vidFlipChannel+0x6a>
 3e6:	ba 01       	movw	r22, r20
 3e8:	62 27       	eor	r22, r18
 3ea:	62 bb       	out	0x12, r22	; 18
 3ec:	08 95       	ret

000003ee <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	89 f0       	breq	.+34     	; 0x414 <dio_dioLevelReadChannel+0x26>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	28 f0       	brcs	.+10     	; 0x400 <dio_dioLevelReadChannel+0x12>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	b9 f0       	breq	.+46     	; 0x428 <dio_dioLevelReadChannel+0x3a>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	49 f5       	brne	.+82     	; 0x450 <dio_dioLevelReadChannel+0x62>
 3fe:	1e c0       	rjmp	.+60     	; 0x43c <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 400:	29 b3       	in	r18, 0x19	; 25
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	c9 01       	movw	r24, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <dio_dioLevelReadChannel+0x1e>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <dio_dioLevelReadChannel+0x1a>
 410:	81 70       	andi	r24, 0x01	; 1
		break;
 412:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 414:	26 b3       	in	r18, 0x16	; 22
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	c9 01       	movw	r24, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <dio_dioLevelReadChannel+0x32>
 41c:	95 95       	asr	r25
 41e:	87 95       	ror	r24
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <dio_dioLevelReadChannel+0x2e>
 424:	81 70       	andi	r24, 0x01	; 1
		break;
 426:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 428:	23 b3       	in	r18, 0x13	; 19
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	c9 01       	movw	r24, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <dio_dioLevelReadChannel+0x46>
 430:	95 95       	asr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <dio_dioLevelReadChannel+0x42>
 438:	81 70       	andi	r24, 0x01	; 1
		break;
 43a:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 43c:	20 b3       	in	r18, 0x10	; 16
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	c9 01       	movw	r24, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <dio_dioLevelReadChannel+0x5a>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <dio_dioLevelReadChannel+0x56>
 44c:	81 70       	andi	r24, 0x01	; 1
		break;
 44e:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 450:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 452:	08 95       	ret

00000454 <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	f9 f0       	breq	.+62     	; 0x496 <dio_vidEnablePullUp+0x42>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	30 f0       	brcs	.+12     	; 0x468 <dio_vidEnablePullUp+0x14>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	91 f1       	breq	.+100    	; 0x4c4 <dio_vidEnablePullUp+0x70>
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	09 f0       	breq	.+2      	; 0x466 <dio_vidEnablePullUp+0x12>
 464:	5c c0       	rjmp	.+184    	; 0x51e <dio_vidEnablePullUp+0xca>
 466:	45 c0       	rjmp	.+138    	; 0x4f2 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if(CHECK_BIT(DIO_DDRA_REG,channel) == INPUT)
 468:	8a b3       	in	r24, 0x1a	; 26
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	06 2e       	mov	r0, r22
 46e:	02 c0       	rjmp	.+4      	; 0x474 <dio_vidEnablePullUp+0x20>
 470:	95 95       	asr	r25
 472:	87 95       	ror	r24
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <dio_vidEnablePullUp+0x1c>
 478:	80 fd       	sbrc	r24, 0
 47a:	51 c0       	rjmp	.+162    	; 0x51e <dio_vidEnablePullUp+0xca>
		{
			SET_BIT(DIO_PORTA_REG,channel);	
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	ac 01       	movw	r20, r24
 484:	02 c0       	rjmp	.+4      	; 0x48a <dio_vidEnablePullUp+0x36>
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <dio_vidEnablePullUp+0x32>
 48e:	ba 01       	movw	r22, r20
 490:	62 2b       	or	r22, r18
 492:	6b bb       	out	0x1b, r22	; 27
 494:	08 95       	ret
		}
		break;

		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 496:	87 b3       	in	r24, 0x17	; 23
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	06 2e       	mov	r0, r22
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <dio_vidEnablePullUp+0x4e>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <dio_vidEnablePullUp+0x4a>
 4a6:	80 fd       	sbrc	r24, 0
 4a8:	3a c0       	rjmp	.+116    	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 4aa:	28 b3       	in	r18, 0x18	; 24
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	ac 01       	movw	r20, r24
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <dio_vidEnablePullUp+0x64>
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <dio_vidEnablePullUp+0x60>
 4bc:	ba 01       	movw	r22, r20
 4be:	62 2b       	or	r22, r18
 4c0:	68 bb       	out	0x18, r22	; 24
 4c2:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 4c4:	84 b3       	in	r24, 0x14	; 20
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	06 2e       	mov	r0, r22
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <dio_vidEnablePullUp+0x7c>
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <dio_vidEnablePullUp+0x78>
 4d4:	80 fd       	sbrc	r24, 0
 4d6:	23 c0       	rjmp	.+70     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	ac 01       	movw	r20, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <dio_vidEnablePullUp+0x92>
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <dio_vidEnablePullUp+0x8e>
 4ea:	ba 01       	movw	r22, r20
 4ec:	62 2b       	or	r22, r18
 4ee:	65 bb       	out	0x15, r22	; 21
 4f0:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 4f2:	81 b3       	in	r24, 0x11	; 17
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	06 2e       	mov	r0, r22
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <dio_vidEnablePullUp+0xaa>
 4fa:	95 95       	asr	r25
 4fc:	87 95       	ror	r24
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <dio_vidEnablePullUp+0xa6>
 502:	80 fd       	sbrc	r24, 0
 504:	0c c0       	rjmp	.+24     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 506:	22 b3       	in	r18, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	ac 01       	movw	r20, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <dio_vidEnablePullUp+0xc0>
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <dio_vidEnablePullUp+0xbc>
 518:	ba 01       	movw	r22, r20
 51a:	62 2b       	or	r22, r18
 51c:	62 bb       	out	0x12, r22	; 18
 51e:	08 95       	ret

00000520 <main>:
 */ 

#include "Tranmitter_IR.h"

int main(void)
{
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	68 97       	sbiw	r28, 0x18	; 24
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
	//IR_parameters_t ir_1 = {DIO_PORTC,DIO_PIN0, 0xF0,0xff};
		
	IR_parameters_t Array_Transmitter[NUMBER_OF_SENSORS] ={ {DIO_PORTC,DIO_PIN0, 0xf0,0xff},{DIO_PORTC,DIO_PIN1, 0xf1,0xff}, {DIO_PORTC,DIO_PIN2, 0xf2,0xff},
 534:	de 01       	movw	r26, r28
 536:	11 96       	adiw	r26, 0x01	; 1
 538:	e0 e6       	ldi	r30, 0x60	; 96
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	88 e1       	ldi	r24, 0x18	; 24
 53e:	01 90       	ld	r0, Z+
 540:	0d 92       	st	X+, r0
 542:	81 50       	subi	r24, 0x01	; 1
 544:	e1 f7       	brne	.-8      	; 0x53e <main+0x1e>
 546:	00 e0       	ldi	r16, 0x00	; 0
 548:	10 e0       	ldi	r17, 0x00	; 0
										   {DIO_PORTC,DIO_PIN3, 0xf3,0xff}, {DIO_PORTC,DIO_PIN4, 0xf4,0xff}, {DIO_PORTC,DIO_PIN5, 0xf5,0xff}, 
										   {DIO_PORTC,DIO_PIN6, 0xf6,0xff}, {DIO_PORTC,DIO_PIN7, 0xf7,0xff} };
	u8 u8Counter=0;
	for( u8Counter=0;u8Counter<NUMBER_OF_SENSORS;u8Counter++)
	{
		IR_voidInit( Array_Transmitter[u8Counter] );
 54a:	f8 01       	movw	r30, r16
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	e0 0f       	add	r30, r16
 552:	f1 1f       	adc	r31, r17
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	8c 0f       	add	r24, r28
 55a:	9d 1f       	adc	r25, r29
 55c:	e8 0f       	add	r30, r24
 55e:	f9 1f       	adc	r31, r25
 560:	60 81       	ld	r22, Z
 562:	71 81       	ldd	r23, Z+1	; 0x01
 564:	82 81       	ldd	r24, Z+2	; 0x02
 566:	0e 94 63 03 	call	0x6c6	; 0x6c6 <IR_voidInit>
 56a:	0f 5f       	subi	r16, 0xFF	; 255
 56c:	1f 4f       	sbci	r17, 0xFF	; 255
		
	IR_parameters_t Array_Transmitter[NUMBER_OF_SENSORS] ={ {DIO_PORTC,DIO_PIN0, 0xf0,0xff},{DIO_PORTC,DIO_PIN1, 0xf1,0xff}, {DIO_PORTC,DIO_PIN2, 0xf2,0xff},
										   {DIO_PORTC,DIO_PIN3, 0xf3,0xff}, {DIO_PORTC,DIO_PIN4, 0xf4,0xff}, {DIO_PORTC,DIO_PIN5, 0xf5,0xff}, 
										   {DIO_PORTC,DIO_PIN6, 0xf6,0xff}, {DIO_PORTC,DIO_PIN7, 0xf7,0xff} };
	u8 u8Counter=0;
	for( u8Counter=0;u8Counter<NUMBER_OF_SENSORS;u8Counter++)
 56e:	08 30       	cpi	r16, 0x08	; 8
 570:	11 05       	cpc	r17, r1
 572:	59 f7       	brne	.-42     	; 0x54a <main+0x2a>
 574:	10 e0       	ldi	r17, 0x00	; 0
	
    while(1)
    {
		//IR_voidTransmitFrame_timer(ir_1);
	
     for( u8Counter=0;u8Counter<NUMBER_OF_SENSORS;u8Counter++)
 576:	00 e0       	ldi	r16, 0x00	; 0
        {
	        IR_voidTransmitFrame_timer(Array_Transmitter[u8Counter]);
 578:	81 2f       	mov	r24, r17
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	fc 01       	movw	r30, r24
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	e8 0f       	add	r30, r24
 584:	f9 1f       	adc	r31, r25
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	8c 0f       	add	r24, r28
 58c:	9d 1f       	adc	r25, r29
 58e:	e8 0f       	add	r30, r24
 590:	f9 1f       	adc	r31, r25
 592:	60 81       	ld	r22, Z
 594:	71 81       	ldd	r23, Z+1	; 0x01
 596:	82 81       	ldd	r24, Z+2	; 0x02
 598:	0e 94 45 05 	call	0xa8a	; 0xa8a <IR_voidTransmitFrame_timer>
	
    while(1)
    {
		//IR_voidTransmitFrame_timer(ir_1);
	
     for( u8Counter=0;u8Counter<NUMBER_OF_SENSORS;u8Counter++)
 59c:	1f 5f       	subi	r17, 0xFF	; 255
 59e:	18 30       	cpi	r17, 0x08	; 8
 5a0:	58 f3       	brcs	.-42     	; 0x578 <main+0x58>
 5a2:	10 2f       	mov	r17, r16
 5a4:	e9 cf       	rjmp	.-46     	; 0x578 <main+0x58>

000005a6 <TIMER2_void_Init>:
void (*TIMER2_CTC_CallBack) (void) ;

void TIMER2_void_Init(void)
{
	#if(TIMER2_MODE == TIMER2_NORMAL)
		CLEAR_BIT(TCCR2 , 6);
 5a6:	85 b5       	in	r24, 0x25	; 37
 5a8:	8f 7b       	andi	r24, 0xBF	; 191
 5aa:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 3);
 5ac:	85 b5       	in	r24, 0x25	; 37
 5ae:	87 7f       	andi	r24, 0xF7	; 247
 5b0:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 0);
		CLEAR_BIT(TCCR2 , 1);
		CLEAR_BIT(TCCR2 , 2);
	
	#elif(TIMER2_PRESCALER == TIMER2_DIV_BY_8)
		CLEAR_BIT(TCCR2 , 0);
 5b2:	85 b5       	in	r24, 0x25	; 37
 5b4:	8e 7f       	andi	r24, 0xFE	; 254
 5b6:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 1);
 5b8:	85 b5       	in	r24, 0x25	; 37
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 2);
 5be:	85 b5       	in	r24, 0x25	; 37
 5c0:	8b 7f       	andi	r24, 0xFB	; 251
 5c2:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 2);
		
	#endif
	
	#if(TIMER2_COM_EVENT == TIMER2_NO_ACTION)
		CLEAR_BIT(TCCR2 , 4);
 5c4:	85 b5       	in	r24, 0x25	; 37
 5c6:	8f 7e       	andi	r24, 0xEF	; 239
 5c8:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2 , 5);
 5ca:	85 b5       	in	r24, 0x25	; 37
 5cc:	8f 7d       	andi	r24, 0xDF	; 223
 5ce:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , 5);

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);	
 5d0:	89 b7       	in	r24, 0x39	; 57
 5d2:	8e 7f       	andi	r24, 0xFE	; 254
 5d4:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 5d6:	89 b7       	in	r24, 0x39	; 57
 5d8:	8d 7f       	andi	r24, 0xFD	; 253
 5da:	89 bf       	out	0x39, r24	; 57
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);	
 5dc:	88 b7       	in	r24, 0x38	; 56
 5de:	81 60       	ori	r24, 0x01	; 1
 5e0:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 5e2:	88 b7       	in	r24, 0x38	; 56
 5e4:	82 60       	ori	r24, 0x02	; 2
 5e6:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT2 = 0 ;
 5e8:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0 ;
 5ea:	13 bc       	out	0x23, r1	; 35
	
	
}
 5ec:	08 95       	ret

000005ee <TIMER2_void_SetTimerReg>:

void TIMER2_void_SetTimerReg(u8 Copy_uint8Val)
{
	TCNT2 = Copy_uint8Val ;
 5ee:	84 bd       	out	0x24, r24	; 36
}
 5f0:	08 95       	ret

000005f2 <TIMER2_void_SetCompareVal>:

void TIMER2_void_SetCompareVal(u8 Copy_uint8Val)
{
	OCR2 = Copy_uint8Val ;
 5f2:	83 bd       	out	0x23, r24	; 35
}
 5f4:	08 95       	ret

000005f6 <TIMER2_void_EnableOVInt>:

void TIMER2_void_EnableOVInt(void)
{
	SET_BIT(TIMSK , 6);
 5f6:	89 b7       	in	r24, 0x39	; 57
 5f8:	80 64       	ori	r24, 0x40	; 64
 5fa:	89 bf       	out	0x39, r24	; 57
}
 5fc:	08 95       	ret

000005fe <TIMER2_void_DisableOVInt>:

void TIMER2_void_DisableOVInt(void)
{
	CLEAR_BIT(TIMSK , 6);
 5fe:	89 b7       	in	r24, 0x39	; 57
 600:	8f 7b       	andi	r24, 0xBF	; 191
 602:	89 bf       	out	0x39, r24	; 57
}
 604:	08 95       	ret

00000606 <TIMER2_void_EnableCTCInt>:

void TIMER2_void_EnableCTCInt(void)
{
	SET_BIT(TIMSK , 7);
 606:	89 b7       	in	r24, 0x39	; 57
 608:	80 68       	ori	r24, 0x80	; 128
 60a:	89 bf       	out	0x39, r24	; 57
}
 60c:	08 95       	ret

0000060e <TIMER2_void_DisableCTCInt>:

void TIMER2_void_DisableCTCInt(void)
{
	CLEAR_BIT(TIMSK , 7);
 60e:	89 b7       	in	r24, 0x39	; 57
 610:	8f 77       	andi	r24, 0x7F	; 127
 612:	89 bf       	out	0x39, r24	; 57
}
 614:	08 95       	ret

00000616 <TIMER2_void_SetOVCallBack>:

void TIMER2_void_SetOVCallBack(void (*Copy_ptr) (void) )
{
	TIMER2_OV_CallBack = Copy_ptr ;
 616:	90 93 82 00 	sts	0x0082, r25
 61a:	80 93 81 00 	sts	0x0081, r24
}
 61e:	08 95       	ret

00000620 <TIMER2_void_SetCTCCallBack>:

void TIMER2_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
	TIMER2_CTC_CallBack = Copy_ptr ;
 620:	90 93 80 00 	sts	0x0080, r25
 624:	80 93 7f 00 	sts	0x007F, r24
	
}
 628:	08 95       	ret

0000062a <__vector_5>:

void __vector_5(void) __attribute__((signal , used));
void __vector_5(void)
{
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	11 24       	eor	r1, r1
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	
	TIMER2_OV_CallBack();
 64c:	e0 91 81 00 	lds	r30, 0x0081
 650:	f0 91 82 00 	lds	r31, 0x0082
 654:	09 95       	icall
}
 656:	ff 91       	pop	r31
 658:	ef 91       	pop	r30
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <__vector_4>:

void __vector_4(void) __attribute__((signal , used));
void __vector_4(void)
{
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	
	TIMER2_CTC_CallBack();
 69a:	e0 91 7f 00 	lds	r30, 0x007F
 69e:	f0 91 80 00 	lds	r31, 0x0080
 6a2:	09 95       	icall
}
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <IR_voidInit>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : initialize the system
*/
void IR_voidInit(IR_parameters_t IR_Obj)
{
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <IR_voidInit+0xa>
 6d0:	0f 92       	push	r0
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	16 2f       	mov	r17, r22
 6d8:	69 83       	std	Y+1, r22	; 0x01
 6da:	07 2f       	mov	r16, r23
 6dc:	7a 83       	std	Y+2, r23	; 0x02
 6de:	8b 83       	std	Y+3, r24	; 0x03
	IR_Global_Obj = IR_Obj;
 6e0:	ac e7       	ldi	r26, 0x7C	; 124
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	fe 01       	movw	r30, r28
 6e6:	31 96       	adiw	r30, 0x01	; 1
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	01 90       	ld	r0, Z+
 6ec:	0d 92       	st	X+, r0
 6ee:	81 50       	subi	r24, 0x01	; 1
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <IR_voidInit+0x24>
//	u32Concat |= IR_Obj.u8Address;			// address bits
//	u32Concat |= (~IR_Obj.u8Address)<<8;	// inverted address bits
//	u32Concat |= (IR_Obj.u8Data)<<16;		// data bits
//	u32Concat |= (~IR_Obj.u8Data)<<24;		// inverted data bits
	
		u32Concat |= IR_Obj.u8Data;			// data bits
 6f2:	40 91 78 00 	lds	r20, 0x0078
 6f6:	50 91 79 00 	lds	r21, 0x0079
 6fa:	60 91 7a 00 	lds	r22, 0x007A
 6fe:	70 91 7b 00 	lds	r23, 0x007B
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	84 2b       	or	r24, r20
 70c:	95 2b       	or	r25, r21
 70e:	a6 2b       	or	r26, r22
 710:	b7 2b       	or	r27, r23
 712:	80 93 78 00 	sts	0x0078, r24
 716:	90 93 79 00 	sts	0x0079, r25
 71a:	a0 93 7a 00 	sts	0x007A, r26
 71e:	b0 93 7b 00 	sts	0x007B, r27
	/* IO initialization */
	dio_vidConfigChannel(IR_Obj.u8port, IR_Obj.u8pin,OUTPUT);
 722:	81 2f       	mov	r24, r17
 724:	60 2f       	mov	r22, r16
 726:	41 e0       	ldi	r20, 0x01	; 1
 728:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	/* Idle */
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin,STD_LOW);
 72c:	81 2f       	mov	r24, r17
 72e:	60 2f       	mov	r22, r16
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
	/* Initialize timer */
	TIMER2_void_Init();
 736:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER2_void_Init>
}
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	08 95       	ret

0000074a <IR_voidSendStartBit>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the start of the frame
*/
void IR_voidSendStartBit(IR_parameters_t IR_Obj)
{
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	00 d0       	rcall	.+0      	; 0x754 <IR_voidSendStartBit+0xa>
 754:	0f 92       	push	r0
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
 75a:	06 2f       	mov	r16, r22
 75c:	69 83       	std	Y+1, r22	; 0x01
 75e:	17 2f       	mov	r17, r23
 760:	7a 83       	std	Y+2, r23	; 0x02
 762:	8b 83       	std	Y+3, r24	; 0x03
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 764:	86 2f       	mov	r24, r22
 766:	67 2f       	mov	r22, r23
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 76e:	8f e9       	ldi	r24, 0x9F	; 159
 770:	9c e8       	ldi	r25, 0x8C	; 140
 772:	01 97       	sbiw	r24, 0x01	; 1
 774:	f1 f7       	brne	.-4      	; 0x772 <IR_voidSendStartBit+0x28>
 776:	00 c0       	rjmp	.+0      	; 0x778 <IR_voidSendStartBit+0x2e>
 778:	00 00       	nop
	_delay_ms(SET_BIT_PULSE_TIMES);
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 77a:	80 2f       	mov	r24, r16
 77c:	61 2f       	mov	r22, r17
 77e:	40 e0       	ldi	r20, 0x00	; 0
 780:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 784:	8f e4       	ldi	r24, 0x4F	; 79
 786:	96 e4       	ldi	r25, 0x46	; 70
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <IR_voidSendStartBit+0x3e>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <IR_voidSendStartBit+0x44>
 78e:	00 00       	nop
	_delay_ms(SET_BIT_PULSE_SPACE_TIMES);
}
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	08 95       	ret

000007a0 <IR_voidTransmitData>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the IR Address & Data
*/
void IR_voidTransmitData(IR_parameters_t IR_Obj)
{
 7a0:	ef 92       	push	r14
 7a2:	ff 92       	push	r15
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <IR_voidTransmitData+0xe>
 7ae:	0f 92       	push	r0
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	f6 2e       	mov	r15, r22
 7b6:	69 83       	std	Y+1, r22	; 0x01
 7b8:	e7 2e       	mov	r14, r23
 7ba:	7a 83       	std	Y+2, r23	; 0x02
 7bc:	8b 83       	std	Y+3, r24	; 0x03
 7be:	00 e0       	ldi	r16, 0x00	; 0
 7c0:	10 e0       	ldi	r17, 0x00	; 0
	u8 u8Counter=0;

	/* check on data */
	for(u8Counter=0;u8Counter<MAXIMUM_LENGTH;u8Counter++ )
	{
		dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 7c2:	8f 2d       	mov	r24, r15
 7c4:	6e 2d       	mov	r22, r14
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 7cc:	8b ec       	ldi	r24, 0xCB	; 203
 7ce:	98 e0       	ldi	r25, 0x08	; 8
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <IR_voidTransmitData+0x30>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <IR_voidTransmitData+0x36>
 7d6:	00 00       	nop
		_delay_ms(HIGH_PULSE_BURST_TIMES);
		
		if(((u32Concat >> u8Counter) & 1 != 0 ) )
 7d8:	80 91 78 00 	lds	r24, 0x0078
 7dc:	90 91 79 00 	lds	r25, 0x0079
 7e0:	a0 91 7a 00 	lds	r26, 0x007A
 7e4:	b0 91 7b 00 	lds	r27, 0x007B
 7e8:	00 2e       	mov	r0, r16
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <IR_voidTransmitData+0x54>
 7ec:	b6 95       	lsr	r27
 7ee:	a7 95       	ror	r26
 7f0:	97 95       	ror	r25
 7f2:	87 95       	ror	r24
 7f4:	0a 94       	dec	r0
 7f6:	d2 f7       	brpl	.-12     	; 0x7ec <IR_voidTransmitData+0x4c>
 7f8:	81 70       	andi	r24, 0x01	; 1
 7fa:	90 70       	andi	r25, 0x00	; 0
 7fc:	00 97       	sbiw	r24, 0x00	; 0
 7fe:	61 f0       	breq	.+24     	; 0x818 <IR_voidTransmitData+0x78>
		{
			dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 800:	8f 2d       	mov	r24, r15
 802:	6e 2d       	mov	r22, r14
 804:	40 e0       	ldi	r20, 0x00	; 0
 806:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 80a:	ad e5       	ldi	r26, 0x5D	; 93
 80c:	ba e1       	ldi	r27, 0x1A	; 26
 80e:	11 97       	sbiw	r26, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <IR_voidTransmitData+0x6e>
 812:	00 c0       	rjmp	.+0      	; 0x814 <IR_voidTransmitData+0x74>
 814:	00 00       	nop
 816:	0e c0       	rjmp	.+28     	; 0x834 <IR_voidTransmitData+0x94>
			_delay_ms(HIGH_PULSE_BURST_SPACE_TIMES);
		}else{
			dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 818:	8f 2d       	mov	r24, r15
 81a:	6e 2d       	mov	r22, r14
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 822:	8f e7       	ldi	r24, 0x7F	; 127
 824:	9d e7       	ldi	r25, 0x7D	; 125
 826:	ab e1       	ldi	r26, 0x1B	; 27
 828:	81 50       	subi	r24, 0x01	; 1
 82a:	90 40       	sbci	r25, 0x00	; 0
 82c:	a0 40       	sbci	r26, 0x00	; 0
 82e:	e1 f7       	brne	.-8      	; 0x828 <IR_voidTransmitData+0x88>
 830:	00 c0       	rjmp	.+0      	; 0x832 <IR_voidTransmitData+0x92>
 832:	00 00       	nop
 834:	0f 5f       	subi	r16, 0xFF	; 255
 836:	1f 4f       	sbci	r17, 0xFF	; 255
void IR_voidTransmitData(IR_parameters_t IR_Obj)
{
	u8 u8Counter=0;

	/* check on data */
	for(u8Counter=0;u8Counter<MAXIMUM_LENGTH;u8Counter++ )
 838:	00 32       	cpi	r16, 0x20	; 32
 83a:	11 05       	cpc	r17, r1
 83c:	11 f6       	brne	.-124    	; 0x7c2 <IR_voidTransmitData+0x22>
		}else{
			dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
			_delay_ms(LOW_PULSE_BURST_TIMES);
		}
	}
}
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	1f 91       	pop	r17
 84a:	0f 91       	pop	r16
 84c:	ff 90       	pop	r15
 84e:	ef 90       	pop	r14
 850:	08 95       	ret

00000852 <IR_voidEndBit>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the end of the frame
*/
void IR_voidEndBit(IR_parameters_t IR_Obj)
{
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	00 d0       	rcall	.+0      	; 0x858 <IR_voidEndBit+0x6>
 858:	0f 92       	push	r0
 85a:	cd b7       	in	r28, 0x3d	; 61
 85c:	de b7       	in	r29, 0x3e	; 62
 85e:	96 2f       	mov	r25, r22
 860:	69 83       	std	Y+1, r22	; 0x01
 862:	67 2f       	mov	r22, r23
 864:	7a 83       	std	Y+2, r23	; 0x02
 866:	8b 83       	std	Y+3, r24	; 0x03
	dio_vidWriteChannel(IR_Obj.u8port,IR_Obj.u8pin,STD_HIGH);
 868:	89 2f       	mov	r24, r25
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 870:	8b ec       	ldi	r24, 0xCB	; 203
 872:	98 e0       	ldi	r25, 0x08	; 8
 874:	01 97       	sbiw	r24, 0x01	; 1
 876:	f1 f7       	brne	.-4      	; 0x874 <__stack+0x15>
 878:	00 c0       	rjmp	.+0      	; 0x87a <__stack+0x1b>
 87a:	00 00       	nop
	_delay_ms(END_BURST_TIMES);
}
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <IR_voidTransmitFrame>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the IR signal
*/
void IR_voidTransmitFrame(IR_parameters_t IR_Obj)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	00 d0       	rcall	.+0      	; 0x88e <IR_voidTransmitFrame+0x6>
 88e:	0f 92       	push	r0
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	69 83       	std	Y+1, r22	; 0x01
 896:	7a 83       	std	Y+2, r23	; 0x02
 898:	8b 83       	std	Y+3, r24	; 0x03
	/* Sending Start Frame */
	IR_voidSendStartBit(IR_Obj);
 89a:	0e 94 a5 03 	call	0x74a	; 0x74a <IR_voidSendStartBit>
	/* Sensing Address & Data */
	IR_voidTransmitData(IR_Obj);
 89e:	69 81       	ldd	r22, Y+1	; 0x01
 8a0:	7a 81       	ldd	r23, Y+2	; 0x02
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <IR_voidTransmitData>
	/* Send the end of the frame */
	IR_voidEndBit(IR_Obj);
 8a8:	69 81       	ldd	r22, Y+1	; 0x01
 8aa:	7a 81       	ldd	r23, Y+2	; 0x02
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	0e 94 29 04 	call	0x852	; 0x852 <IR_voidEndBit>
}
 8b2:	0f 90       	pop	r0
 8b4:	0f 90       	pop	r0
 8b6:	0f 90       	pop	r0
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	08 95       	ret

000008be <IR_voidSendPulses>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the start of the modulation pulses
*/
void IR_voidSendPulses(IR_parameters_t IR_Obj)
{
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	00 d0       	rcall	.+0      	; 0x8c8 <IR_voidSendPulses+0xa>
 8c8:	0f 92       	push	r0
 8ca:	cd b7       	in	r28, 0x3d	; 61
 8cc:	de b7       	in	r29, 0x3e	; 62
 8ce:	06 2f       	mov	r16, r22
 8d0:	69 83       	std	Y+1, r22	; 0x01
 8d2:	17 2f       	mov	r17, r23
 8d4:	7a 83       	std	Y+2, r23	; 0x02
 8d6:	8b 83       	std	Y+3, r24	; 0x03
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 8d8:	86 2f       	mov	r24, r22
 8da:	67 2f       	mov	r22, r23
 8dc:	41 e0       	ldi	r20, 0x01	; 1
 8de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 8e2:	8a e3       	ldi	r24, 0x3A	; 58
 8e4:	8a 95       	dec	r24
 8e6:	f1 f7       	brne	.-4      	; 0x8e4 <IR_voidSendPulses+0x26>
 8e8:	00 c0       	rjmp	.+0      	; 0x8ea <IR_voidSendPulses+0x2c>
	_delay_ms(HIGH_PULSE_TIME);
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 8ea:	80 2f       	mov	r24, r16
 8ec:	61 2f       	mov	r22, r17
 8ee:	40 e0       	ldi	r20, 0x00	; 0
 8f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 8f4:	86 e3       	ldi	r24, 0x36	; 54
 8f6:	8a 95       	dec	r24
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <IR_voidSendPulses+0x38>
	_delay_ms(LOW_PULSE_TIME);
}
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	0f 90       	pop	r0
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	08 95       	ret

0000090a <IR_voidSendPulses_timer>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the start of the modulation pulses
*/
void IR_voidSendPulses_timer(IR_parameters_t IR_Obj)
{
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	00 d0       	rcall	.+0      	; 0x914 <IR_voidSendPulses_timer+0xa>
 914:	0f 92       	push	r0
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	06 2f       	mov	r16, r22
 91c:	69 83       	std	Y+1, r22	; 0x01
 91e:	17 2f       	mov	r17, r23
 920:	7a 83       	std	Y+2, r23	; 0x02
 922:	8b 83       	std	Y+3, r24	; 0x03
	TCNT2 =0;
 924:	14 bc       	out	0x24, r1	; 36
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 926:	86 2f       	mov	r24, r22
 928:	67 2f       	mov	r22, r23
 92a:	41 e0       	ldi	r20, 0x01	; 1
 92c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
	while( TCNT2 <= HALF_PULSE_TIME );
 930:	84 b5       	in	r24, 0x24	; 36
 932:	89 31       	cpi	r24, 0x19	; 25
 934:	e8 f3       	brcs	.-6      	; 0x930 <IR_voidSendPulses_timer+0x26>
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 936:	80 2f       	mov	r24, r16
 938:	61 2f       	mov	r22, r17
 93a:	40 e0       	ldi	r20, 0x00	; 0
 93c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
	while( TCNT2 <= 2*HALF_PULSE_TIME );
 940:	84 b5       	in	r24, 0x24	; 36
 942:	81 33       	cpi	r24, 0x31	; 49
 944:	e8 f3       	brcs	.-6      	; 0x940 <IR_voidSendPulses_timer+0x36>
}
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	0f 91       	pop	r16
 954:	08 95       	ret

00000956 <IR_voidSendStartBit_timer>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the start of the frame
*/
void IR_voidSendStartBit_timer(IR_parameters_t IR_Obj)
{
 956:	0f 93       	push	r16
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	00 d0       	rcall	.+0      	; 0x960 <IR_voidSendStartBit_timer+0xa>
 960:	0f 92       	push	r0
 962:	cd b7       	in	r28, 0x3d	; 61
 964:	de b7       	in	r29, 0x3e	; 62
 966:	06 2f       	mov	r16, r22
 968:	69 83       	std	Y+1, r22	; 0x01
 96a:	17 2f       	mov	r17, r23
 96c:	7a 83       	std	Y+2, r23	; 0x02
 96e:	8b 83       	std	Y+3, r24	; 0x03
	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 970:	86 2f       	mov	r24, r22
 972:	67 2f       	mov	r22, r23
 974:	41 e0       	ldi	r20, 0x01	; 1
 976:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 97a:	8f e9       	ldi	r24, 0x9F	; 159
 97c:	9c e8       	ldi	r25, 0x8C	; 140
 97e:	01 97       	sbiw	r24, 0x01	; 1
 980:	f1 f7       	brne	.-4      	; 0x97e <IR_voidSendStartBit_timer+0x28>
 982:	00 c0       	rjmp	.+0      	; 0x984 <IR_voidSendStartBit_timer+0x2e>
 984:	00 00       	nop
/*	for(int i=0; i<LOW_START_ITERATION;i++)
	{
		IR_voidSendPulses_timer(IR_Obj);
	}*/

	dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_LOW);
 986:	80 2f       	mov	r24, r16
 988:	61 2f       	mov	r22, r17
 98a:	40 e0       	ldi	r20, 0x00	; 0
 98c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 990:	8f e4       	ldi	r24, 0x4F	; 79
 992:	96 e4       	ldi	r25, 0x46	; 70
 994:	01 97       	sbiw	r24, 0x01	; 1
 996:	f1 f7       	brne	.-4      	; 0x994 <IR_voidSendStartBit_timer+0x3e>
 998:	00 c0       	rjmp	.+0      	; 0x99a <IR_voidSendStartBit_timer+0x44>
 99a:	00 00       	nop
	_delay_ms(4.5);
	
	
}
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	df 91       	pop	r29
 9a4:	cf 91       	pop	r28
 9a6:	1f 91       	pop	r17
 9a8:	0f 91       	pop	r16
 9aa:	08 95       	ret

000009ac <IR_voidEndBit_timer>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send end of the frame
*/
void IR_voidEndBit_timer(IR_parameters_t IR_Obj)
{
 9ac:	0f 93       	push	r16
 9ae:	1f 93       	push	r17
 9b0:	cf 93       	push	r28
 9b2:	df 93       	push	r29
 9b4:	00 d0       	rcall	.+0      	; 0x9b6 <IR_voidEndBit_timer+0xa>
 9b6:	0f 92       	push	r0
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
 9bc:	69 83       	std	Y+1, r22	; 0x01
 9be:	7a 83       	std	Y+2, r23	; 0x02
 9c0:	8b 83       	std	Y+3, r24	; 0x03
 9c2:	05 e1       	ldi	r16, 0x15	; 21
 9c4:	10 e0       	ldi	r17, 0x00	; 0
	{
		IR_voidSendPulses_timer(IR_Obj);
	}*/
			for(int i=0;i<LOW_DATA_ITERATION;i++)
			{
				IR_voidSendPulses_timer(IR_Obj);
 9c6:	69 81       	ldd	r22, Y+1	; 0x01
 9c8:	7a 81       	ldd	r23, Y+2	; 0x02
 9ca:	8b 81       	ldd	r24, Y+3	; 0x03
 9cc:	0e 94 85 04 	call	0x90a	; 0x90a <IR_voidSendPulses_timer>
 9d0:	01 50       	subi	r16, 0x01	; 1
 9d2:	10 40       	sbci	r17, 0x00	; 0
	/* send the pulse modulation signal */
	/*for(int i=0;i<LOW_DATA_ITERATION;i++)
	{
		IR_voidSendPulses_timer(IR_Obj);
	}*/
			for(int i=0;i<LOW_DATA_ITERATION;i++)
 9d4:	c1 f7       	brne	.-16     	; 0x9c6 <IR_voidEndBit_timer+0x1a>
			{
				IR_voidSendPulses_timer(IR_Obj);
			}
}
 9d6:	0f 90       	pop	r0
 9d8:	0f 90       	pop	r0
 9da:	0f 90       	pop	r0
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	0f 91       	pop	r16
 9e4:	08 95       	ret

000009e6 <IR_voidNew>:
void IR_voidNew(IR_parameters_t IR_Obj){
 9e6:	cf 92       	push	r12
 9e8:	df 92       	push	r13
 9ea:	ef 92       	push	r14
 9ec:	ff 92       	push	r15
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	00 d0       	rcall	.+0      	; 0x9f8 <IR_voidNew+0x12>
 9f8:	0f 92       	push	r0
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	69 83       	std	Y+1, r22	; 0x01
 a00:	7a 83       	std	Y+2, r23	; 0x02
 a02:	8b 83       	std	Y+3, r24	; 0x03
 a04:	ee 24       	eor	r14, r14
 a06:	ff 24       	eor	r15, r15
		{
			/* send the high signal */
			dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
			_delay_ms(HIGH_PULSE_BURST_TIMES);
			/* check on the data and send the pulse modulation signal */
			if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
 a08:	0f 2e       	mov	r0, r31
 a0a:	f4 e1       	ldi	r31, 0x14	; 20
 a0c:	cf 2e       	mov	r12, r31
 a0e:	dd 24       	eor	r13, r13
 a10:	f0 2d       	mov	r31, r0
void IR_voidNew(IR_parameters_t IR_Obj){
	u8 u8Counter=0;
		for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
		{
			/* send the high signal */
			dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
 a12:	89 81       	ldd	r24, Y+1	; 0x01
 a14:	6a 81       	ldd	r22, Y+2	; 0x02
 a16:	41 e0       	ldi	r20, 0x01	; 1
 a18:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <dio_vidWriteChannel>
 a1c:	8b ec       	ldi	r24, 0xCB	; 203
 a1e:	98 e0       	ldi	r25, 0x08	; 8
 a20:	01 97       	sbiw	r24, 0x01	; 1
 a22:	f1 f7       	brne	.-4      	; 0xa20 <IR_voidNew+0x3a>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <IR_voidNew+0x40>
 a26:	00 00       	nop
			_delay_ms(HIGH_PULSE_BURST_TIMES);
			/* check on the data and send the pulse modulation signal */
			if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
 a28:	8b 81       	ldd	r24, Y+3	; 0x03
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 2c       	mov	r0, r14
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <IR_voidNew+0x4e>
 a30:	95 95       	asr	r25
 a32:	87 95       	ror	r24
 a34:	0a 94       	dec	r0
 a36:	e2 f7       	brpl	.-8      	; 0xa30 <IR_voidNew+0x4a>
 a38:	80 fd       	sbrc	r24, 0
 a3a:	0a c0       	rjmp	.+20     	; 0xa50 <IR_voidNew+0x6a>
 a3c:	86 01       	movw	r16, r12
			{
				for(int i=0;i<20/*LOW_DATA_ITERATION*/;i++)//20
				{
					IR_voidSendPulses_timer(IR_Obj);
 a3e:	69 81       	ldd	r22, Y+1	; 0x01
 a40:	7a 81       	ldd	r23, Y+2	; 0x02
 a42:	8b 81       	ldd	r24, Y+3	; 0x03
 a44:	0e 94 85 04 	call	0x90a	; 0x90a <IR_voidSendPulses_timer>
 a48:	01 50       	subi	r16, 0x01	; 1
 a4a:	10 40       	sbci	r17, 0x00	; 0
			dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
			_delay_ms(HIGH_PULSE_BURST_TIMES);
			/* check on the data and send the pulse modulation signal */
			if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
			{
				for(int i=0;i<20/*LOW_DATA_ITERATION*/;i++)//20
 a4c:	c1 f7       	brne	.-16     	; 0xa3e <IR_voidNew+0x58>
 a4e:	0a c0       	rjmp	.+20     	; 0xa64 <IR_voidNew+0x7e>
		{
			/* send the high signal */
			dio_vidWriteChannel(IR_Obj.u8port, IR_Obj.u8pin, STD_HIGH);
			_delay_ms(HIGH_PULSE_BURST_TIMES);
			/* check on the data and send the pulse modulation signal */
			if(CHECK_BIT(IR_Obj.u8Data, u8Counter) == 0)
 a50:	01 e4       	ldi	r16, 0x41	; 65
 a52:	10 e0       	ldi	r17, 0x00	; 0
				}
				
			}else{
				for(int i=0;i<HIGH_DATA_ITERATION;i++)
				{
					IR_voidSendPulses_timer(IR_Obj);
 a54:	69 81       	ldd	r22, Y+1	; 0x01
 a56:	7a 81       	ldd	r23, Y+2	; 0x02
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	0e 94 85 04 	call	0x90a	; 0x90a <IR_voidSendPulses_timer>
 a5e:	01 50       	subi	r16, 0x01	; 1
 a60:	10 40       	sbci	r17, 0x00	; 0
				{
					IR_voidSendPulses_timer(IR_Obj);
				}
				
			}else{
				for(int i=0;i<HIGH_DATA_ITERATION;i++)
 a62:	c1 f7       	brne	.-16     	; 0xa54 <IR_voidNew+0x6e>
 a64:	08 94       	sec
 a66:	e1 1c       	adc	r14, r1
 a68:	f1 1c       	adc	r15, r1
				IR_voidSendPulses_timer(IR_Obj);
			}
}
void IR_voidNew(IR_parameters_t IR_Obj){
	u8 u8Counter=0;
		for(u8Counter=0;u8Counter<MAX_NUMBER_BITS;u8Counter++ )
 a6a:	98 e0       	ldi	r25, 0x08	; 8
 a6c:	e9 16       	cp	r14, r25
 a6e:	f1 04       	cpc	r15, r1
 a70:	81 f6       	brne	.-96     	; 0xa12 <IR_voidNew+0x2c>
				{
					IR_voidSendPulses_timer(IR_Obj);
				}
			}
		}
}
 a72:	0f 90       	pop	r0
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	ff 90       	pop	r15
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	08 95       	ret

00000a8a <IR_voidTransmitFrame_timer>:
	Function Returns     : void
	Function Arguments   : struct
	Function Description : send the IR signal
*/
void IR_voidTransmitFrame_timer(IR_parameters_t IR_Obj)
{
 a8a:	cf 93       	push	r28
 a8c:	df 93       	push	r29
 a8e:	00 d0       	rcall	.+0      	; 0xa90 <IR_voidTransmitFrame_timer+0x6>
 a90:	0f 92       	push	r0
 a92:	cd b7       	in	r28, 0x3d	; 61
 a94:	de b7       	in	r29, 0x3e	; 62
 a96:	69 83       	std	Y+1, r22	; 0x01
 a98:	7a 83       	std	Y+2, r23	; 0x02
 a9a:	8b 83       	std	Y+3, r24	; 0x03
	/* send the start of the frame */
	IR_voidSendStartBit_timer(IR_Obj); 
 a9c:	0e 94 ab 04 	call	0x956	; 0x956 <IR_voidSendStartBit_timer>
	/* send the address and data */
	//IR_voidTransmitData_timer(IR_Obj);
	IR_voidNew(IR_Obj);
 aa0:	69 81       	ldd	r22, Y+1	; 0x01
 aa2:	7a 81       	ldd	r23, Y+2	; 0x02
 aa4:	8b 81       	ldd	r24, Y+3	; 0x03
 aa6:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <IR_voidNew>
	/* send the end of the frame */
	IR_voidEndBit_timer(IR_Obj);
 aaa:	69 81       	ldd	r22, Y+1	; 0x01
 aac:	7a 81       	ldd	r23, Y+2	; 0x02
 aae:	8b 81       	ldd	r24, Y+3	; 0x03
 ab0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <IR_voidEndBit_timer>
 ab4:	0f 90       	pop	r0
 ab6:	0f 90       	pop	r0
 ab8:	0f 90       	pop	r0
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
